Index: Bootstrap-v1.16/board/eco-g45/eco-g45.c
===================================================================
--- /dev/null
+++ Bootstrap-v1.16/board/eco-g45/eco-g45.c
@@ -0,0 +1,240 @@
+/* ----------------------------------------------------------------------------
+ *         ECO-G45 board support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2011, Garz & Fricke GmbH
+ *
+ * ----------------------------------------------------------------------------
+ * File Name           : eco-g45.c
+ * Object              :
+ * Creation            : CBe Sep 2011
+ *-----------------------------------------------------------------------------
+ */
+#include "../../include/version.h"
+#include "../../include/part.h"
+#include "../../include/gpio.h"
+#include "../../include/pmc.h"
+#include "../../include/debug.h"
+#include "../../include/main.h"
+#include "../../include/ddramc.h"
+#ifdef CFG_NANDFLASH
+#include "../../include/nandflash.h"
+#endif
+#ifdef CFG_DATAFLASH
+#include "../../include/dataflash.h"
+#endif
+
+void smc_sram_hw_init();
+
+static inline unsigned int get_cp15(void)
+{
+	unsigned int value;
+	__asm__("mrc p15, 0, %0, c1, c0, 0" : "=r" (value));
+	return value;
+}
+
+static inline void set_cp15(unsigned int value)
+{
+	__asm__("mcr p15, 0, %0, c1, c0, 0" : : "r" (value));
+}
+
+#ifdef CFG_HW_INIT
+/*----------------------------------------------------------------------------*/
+/* \fn    hw_init							      */
+/* \brief This function performs very low level HW initialization	      */
+/* This function is invoked as soon as possible during the c_startup	      */
+/* The bss segment must be initialized					      */
+/*----------------------------------------------------------------------------*/
+void hw_init(void)
+{
+	unsigned int cp15;
+
+	/* Configure PIOs */
+	const struct pio_desc hw_pio[] = {
+#ifdef CFG_DEBUG
+		{"RXD", AT91C_PIN_PB(12), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TXD", AT91C_PIN_PB(13), 0, PIO_DEFAULT, PIO_PERIPH_A},
+#endif
+		{(char *) 0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Disable watchdog */
+	writel(AT91C_WDTC_WDDIS, AT91C_BASE_WDTC + WDTC_WDMR);
+
+	/* At this stage the main oscillator is supposed to be enabled
+	 * PCK = MCK = MOSC */
+	writel(0x00, AT91C_BASE_PMC + PMC_PLLICPR);
+
+	/* Configure PLLA = MOSC * (PLL_MULA + 1) / PLL_DIVA */
+	pmc_cfg_plla(PLLA_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* PCK = PLLA/2 = 3 * MCK */
+	pmc_cfg_mck(MCKR_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Switch MCK on PLLA output */
+	pmc_cfg_mck(MCKR_CSS_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Configure PLLB */
+	//pmc_cfg_pllutmi(PLLUTMI_SETTINGS, PLL_LOCK_TIMEOUT);
+
+	/* Configure CP15 */
+	cp15 = get_cp15();
+	cp15 |= I_CACHE;
+	set_cp15(cp15);
+
+	/* Configure the PIO controller */
+	pio_setup(hw_pio);
+
+#ifdef CFG_DEBUG
+	/* Enable Debug messages on the DBGU */
+	dbg_init(BAUDRATE(MASTER_CLOCK, 115200));
+
+	dbg_print(VERSION);
+#endif /* CFG_DEBUG */
+
+#ifdef CFG_DDRAM
+	/* Configure DDRAM Controller */
+	ddramc_hw_init();
+#endif /* CFG_DDRAM */
+
+#ifdef CFG_SMC_SRAM
+	/* Configure SM Controller for SRAM access*/
+	smc_sram_hw_init();
+#endif
+
+}
+#endif /* CFG_HW_INIT */
+
+#ifdef CFG_DDRAM
+static	SDdramConfig ddram_config = {
+	.ddramc_mdr  = (AT91C_DDRC2_DBW_16_BITS | AT91C_DDRC2_MD_LP_DDR_SDRAM),
+
+	.ddramc_cr   = (AT91C_DDRC2_NC_DDR10_SDR9  | // 10 column bits (1K)
+			AT91C_DDRC2_NR_14          |		 // 14 row bits    (8K)
+			AT91C_DDRC2_CAS_3          |     	 // CAS Latency 3
+			AT91C_DDRC2_DLL_RESET_DISABLED),	 // DLL not reset
+
+	.ddramc_rtr  = 	0x24B,
+
+	/* Timing values conform to JEDEC Standard No. 209B for LPDDR200 (we have 100MHz SysClk DDR (tcyc=10ns)) */
+	.ddramc_t0pr = (AT91C_DDRC2_TRAS_5 | // 5 * 10ns = 50ns
+			AT91C_DDRC2_TRCD_3  |     	 // 3 * 10ns = 30ns
+			AT91C_DDRC2_TWR_2   |		 // 2 * 10ns = 20ns (JEDEC: 15ns, but is not a multiple of 10ns)
+			AT91C_DDRC2_TRC_8   |		 // 8 * 10ns = 80ns (TRAS+TRP)
+			AT91C_DDRC2_TRP_3   |		 // 3 * 10ns = 30ns
+			AT91C_DDRC2_TRRD_2  |		 // 2 * 10ns = 20ns (JEDEC: 15ns, but is not a multiple of 10ns)
+			AT91C_DDRC2_TWTR_1  |		 // 1 clock cycle
+			AT91C_DDRC2_TMRD_2),		 // 2 clock cycles
+
+	.ddramc_t1pr = (AT91C_DDRC2_TXP_3 | // 3 * 10ns = 30ns    (JEDEC: 25ns, but is not a multiple of 10ns)
+			AT91C_DDRC2_TXSNR_20 |		// 20 * 10 ns = 200ns (according to the AT91SAM9G45 datasheet this corresponds to tXSR for LPDDR)
+			AT91C_DDRC2_TXSRD_20 |		// 20 * 10 ns = 200ns (according to the AT91SAM9G45 datasheet ths field is unique for DDR2)
+			AT91C_DDRC2_TRFC_14),	    // 14 * 10ns = 140ns  (must be 140 ns for 1Gb LPDDR)
+
+	.ddramc_t2pr = (AT91C_DDRC2_TRTP_2 | //  2 * 10ns = 20ns
+			AT91C_DDRC2_TRPA_0   |		 //  0 * 10ns = 0ns
+			AT91C_DDRC2_TXARDS_0 |		 //  0 clock cycles
+			AT91C_DDRC2_TXARD_0),		 //  0 clock cycles
+
+	.ddramc_lpr = (AT91C_DDRC2_TIMEOUT_64  | // Wait 64 clocks before LP Mode
+			AT91C_DDRC2_CLK_FR_SELFREFRESH | // Frozen Clock
+			AT91C_DDRC2_LPCB_SELFREFRESH),   // Self Refresh
+};
+
+/*------------------------------------------------------------------------------*/
+/* \fn    ddramc_hw_init							*/
+/* \brief This function performs DDRAMC HW initialization			*/
+/*------------------------------------------------------------------------------*/
+void ddramc_hw_init(void)
+{
+	// ENABLE DDR2 clock
+	writel(AT91C_PMC_DDR, AT91C_BASE_PMC + PMC_SCER);
+
+	/* DDRAM2 controller */
+	ddram_init(AT91C_BASE_DDR2C, AT91C_DDR2, &ddram_config);
+}
+#endif /* CFG_DDRAM */
+
+#ifdef CFG_SMC_SRAM
+/*------------------------------------------------------------------------------*/
+/* \fn    smc_sram_hw_init							                            */
+/* \brief This function performs SRAM HW initialization			                */
+/*------------------------------------------------------------------------------*/
+void smc_sram_hw_init(void)
+{
+	/* Configure PIOs, no pin multiplexing for NCS_1 with 16-bi access */
+	/* NCS1 is already assigned to the Statc Memory Controller (EBI_CSA1A=0) */
+	/* EBI_DRIVE is "01b" per default (drive strength optimized for < 30pF) */
+	/* SRAM and NAND flash hev an input capacitance of 10pF@3.3V, "01" fits */
+	/* Setup timing parameters for NCS_1 */
+	/* Configure SMC CS1 */
+ 	writel((AT91C_SM_CS0_NWE_SETUP | AT91C_SM_CS0_NCS_WR_SETUP | AT91C_SM_CS0_NRD_SETUP | AT91C_SM_CS0_NCS_RD_SETUP), AT91C_BASE_SMC + SMC_SETUP0);
+  	writel((AT91C_SM_CS0_NWE_PULSE | AT91C_SM_CS0_NCS_WR_PULSE | AT91C_SM_CS0_NRD_PULSE | AT91C_SM_CS0_NCS_RD_PULSE), AT91C_BASE_SMC + SMC_PULSE0);
+	writel((AT91C_SM_CS0_NWE_CYCLE | AT91C_SM_CS0_NRD_CYCLE), AT91C_BASE_SMC + SMC_CYCLE0);
+	writel((AT91C_SMC_READMODE | AT91C_SMC_WRITEMODE | AT91C_SMC_NWAITM_NWAIT_DISABLE |
+  		AT91C_SMC_DBW_WIDTH_SIXTEEN_BITS | AT91C_SM_CS0_TDF), AT91C_BASE_SMC + SMC_CTRL0);
+}
+#endif /* CFG_SMC_SRAM */
+
+#ifdef CFG_NANDFLASH
+/*------------------------------------------------------------------------------*/
+/* \fn    nand_recovery						                                    */
+/* \brief This function erases NandFlash Block 0 if BP4 is pressed 		        */
+/*        during boot sequence							                        */
+/*------------------------------------------------------------------------------*/
+static void nand_recovery(void)
+{
+
+}
+
+/*------------------------------------------------------------------------------*/
+/* \fn    nandflash_hw_init							                            */
+/* \brief NandFlash HW init							                            */
+/*------------------------------------------------------------------------------*/
+void nandflash_hw_init(void)
+{
+	/* Configure PIOs */
+	const struct pio_desc nand_pio[] = {
+		{"RDY_BSY", AT91C_PIN_PC(8), 0, PIO_PULLUP, PIO_INPUT},
+		{"NANDCS",  AT91C_PIN_PC(14), 1, PIO_PULLUP, PIO_OUTPUT},
+		{(char *) 0, 0, 0,  PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Setup Smart Media, first enable the address range of CS3 in HMATRIX user interface */
+	writel(readl(AT91C_BASE_CCFG + CCFG_EBICSA) | AT91C_EBI_CS3A_SM, AT91C_BASE_CCFG + CCFG_EBICSA);
+
+	/* EBI IO in 1.8V mode */
+	//writel(readl(AT91C_BASE_CCFG + CCFG_EBICSA) & ~(1<<16), AT91C_BASE_CCFG + CCFG_EBICSA);
+
+	/* Configure SMC CS3 */
+ 	writel((AT91C_SM_CS3_NWE_SETUP | AT91C_SM_CS3_NCS_WR_SETUP | AT91C_SM_CS3_NRD_SETUP | AT91C_SM_CS3_NCS_RD_SETUP), AT91C_BASE_SMC + SMC_SETUP3);
+  	writel((AT91C_SM_CS3_NWE_PULSE | AT91C_SM_CS3_NCS_WR_PULSE | AT91C_SM_CS3_NRD_PULSE | AT91C_SM_CS3_NCS_RD_PULSE), AT91C_BASE_SMC + SMC_PULSE3);
+	writel((AT91C_SM_CS3_NWE_CYCLE | AT91C_SM_CS3_NRD_CYCLE), AT91C_BASE_SMC + SMC_CYCLE3);
+	writel((AT91C_SMC_READMODE | AT91C_SMC_WRITEMODE | AT91C_SMC_NWAITM_NWAIT_DISABLE | AT91C_SMC_TDFEN |
+  		AT91C_SMC_DBW_WIDTH_EIGTH_BITS | AT91C_SM_CS3_TDF), AT91C_BASE_SMC + SMC_CTRL3);
+
+	/* Configure the PIO controller */
+	writel((1 << AT91C_ID_PIOC), (PMC_PCER + AT91C_BASE_PMC));
+	pio_setup(nand_pio);
+
+	nand_recovery();
+}
+
+/*------------------------------------------------------------------------------*/
+/* \fn    nandflash_cfg_16bits_dbw_init						                    */
+/* \brief Configure SMC in 16 bits mode						                    */
+/*------------------------------------------------------------------------------*/
+void nandflash_cfg_16bits_dbw_init(void)
+{
+	writel(readl(AT91C_BASE_SMC + SMC_CTRL3) | AT91C_SMC_DBW_WIDTH_SIXTEEN_BITS, AT91C_BASE_SMC + SMC_CTRL3);
+}
+
+/*------------------------------------------------------------------------------*/
+/* \fn    nandflash_cfg_8bits_dbw_init						                    */
+/* \brief Configure SMC in 8 bits mode						                    */
+/*------------------------------------------------------------------------------*/
+void nandflash_cfg_8bits_dbw_init(void)
+{
+	writel((readl(AT91C_BASE_SMC + SMC_CTRL3) & ~(AT91C_SMC_DBW)) | AT91C_SMC_DBW_WIDTH_EIGTH_BITS, AT91C_BASE_SMC + SMC_CTRL3);
+}
+
+#endif /* #ifdef CFG_NANDFLASH */
Index: Bootstrap-v1.16/board/eco-g45/nandflash/Makefile
===================================================================
--- /dev/null
+++ Bootstrap-v1.16/board/eco-g45/nandflash/Makefile
@@ -0,0 +1,131 @@
+# TODO: set this appropriately for your local toolchain
+ifndef ERASE_FCT
+ERASE_FCT=rm -f
+endif
+ifndef CROSS_COMPILE
+CROSS_COMPILE=arm-elf-
+endif
+
+TOOLCHAIN=gcc
+
+BOOTSTRAP_PATH=../../..
+
+# NandFlashBoot Configuration for ECO-G45
+
+# Target name (case sensitive!!!)
+TARGET=AT91SAM9G45
+# Board name (case sensitive!!!)
+BOARD=eco-g45
+# Board define (case sensitive!!!)
+BOARD_DEF=eco_g45
+# Link Address and Top_of_Memory
+LINK_ADDR=0x300000
+TOP_OF_MEMORY=0x304000
+# Name of current directory
+PROJECT=nandflash
+
+ifndef BOOT_NAME
+BOOT_NAME=$(PROJECT)_$(BOARD)
+endif
+
+INCL=./$(BOOTSTRAP_PATH)/board/$(BOARD)/$(PROJECT)
+
+ifeq ($(TOOLCHAIN), gcc)
+
+AS=$(CROSS_COMPILE)gcc
+CC=$(CROSS_COMPILE)gcc
+LD=$(CROSS_COMPILE)gcc
+NM= $(CROSS_COMPILE)nm
+SIZE=$(CROSS_COMPILE)size
+OBJCOPY=$(CROSS_COMPILE)objcopy
+OBJDUMP=$(CROSS_COMPILE)objdump
+CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -D$(BOARD_DEF) -I$(INCL)
+ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -D$(BOARD_DEF) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
+
+# Uncomment this for debugging
+#CCFLAGS=-g -mcpu=arm926ej-s -O0 -Wall -D$(TARGET) -D$(BOARD_DEF) -I$(INCL)
+#ASFLAGS=-g -mcpu=arm926ej-s -c -O0 -Wall -D$(TARGET) -D$(BOARD_DEF) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
+
+# Linker flags.
+#  -Wl,...:     tell GCC to pass this to linker.
+#    -Map:      create map file
+#    --cref:    add cross reference to map file
+LDFLAGS+=-nostartfiles -nostdlib -Wl,-Map=$(BOOT_NAME).map,--cref
+LDFLAGS+=-T $(BOOTSTRAP_PATH)/elf32-littlearm.lds -Ttext $(LINK_ADDR)
+OBJS=crt0_gnu.o
+
+endif
+
+OBJS+=\
+	$(BOARD).o \
+	main.o \
+	gpio.o \
+	pmc.o \
+	debug.o \
+	sdramc.o \
+	ddramc.o \
+	nandflash.o \
+	_udivsi3.o \
+	_umodsi3.o \
+	div0.o \
+	udiv.o \
+	string.o
+
+rebuild: clean all
+
+all: 	$(BOOT_NAME)
+
+ifeq ($(TOOLCHAIN), gcc)
+$(BOOT_NAME): $(OBJS)
+	$(LD) $(LDFLAGS) -n -o $(BOOT_NAME).elf $(OBJS)
+	$(OBJCOPY) --strip-debug --strip-unneeded $(BOOT_NAME).elf -O binary $(BOOT_NAME).bin
+endif
+
+
+$(BOARD).o: $(BOOTSTRAP_PATH)/board/$(BOARD)/$(BOARD).c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/board/$(BOARD)/$(BOARD).c -o $(BOARD).o
+
+main.o: $(BOOTSTRAP_PATH)/main.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/main.c -o main.o
+
+gpio.o: $(BOOTSTRAP_PATH)/driver/gpio.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/gpio.c -o gpio.o
+
+pmc.o:  $(BOOTSTRAP_PATH)/driver/pmc.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/pmc.c -o pmc.o
+
+debug.o: $(BOOTSTRAP_PATH)/driver/debug.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/debug.c -o debug.o
+
+sdramc.o:  $(BOOTSTRAP_PATH)/driver/sdramc.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/sdramc.c -o sdramc.o
+
+ddramc.o:  $(BOOTSTRAP_PATH)/driver/ddramc.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/ddramc.c -o ddramc.o
+
+dataflash.o:  $(BOOTSTRAP_PATH)/driver/dataflash.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/dataflash.c -o dataflash.o
+
+nandflash.o:  $(BOOTSTRAP_PATH)/driver/nandflash.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/driver/nandflash.c -o nandflash.o
+
+crt0_gnu.o:  $(BOOTSTRAP_PATH)/crt0_gnu.S
+	$(AS) $(ASFLAGS) $(BOOTSTRAP_PATH)/crt0_gnu.S -o crt0_gnu.o
+
+div0.o:  $(BOOTSTRAP_PATH)/lib/div0.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/lib/div0.c -o div0.o
+
+string.o:  $(BOOTSTRAP_PATH)/lib/string.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/lib/string.c -o string.o
+
+udiv.o:  $(BOOTSTRAP_PATH)/lib/udiv.c
+	$(CC) -c $(CCFLAGS) $(BOOTSTRAP_PATH)/lib/udiv.c -o udiv.o
+
+_udivsi3.o:  $(BOOTSTRAP_PATH)/lib/_udivsi3.S
+	$(AS) $(ASFLAGS) $(BOOTSTRAP_PATH)/lib/_udivsi3.S -o _udivsi3.o
+
+_umodsi3.o:  $(BOOTSTRAP_PATH)/lib/_umodsi3.S
+	$(AS) $(ASFLAGS) $(BOOTSTRAP_PATH)/lib/_umodsi3.S -o _umodsi3.o
+
+clean:
+	$(ERASE_FCT) *.o *.bin *.elf *.map
Index: Bootstrap-v1.16/board/eco-g45/nandflash/eco-g45.h
===================================================================
--- /dev/null
+++ Bootstrap-v1.16/board/eco-g45/nandflash/eco-g45.h
@@ -0,0 +1,133 @@
+/* ----------------------------------------------------------------------------
+ *         ECO-G45 board support
+ * ----------------------------------------------------------------------------
+  * Copyright (c) 2011, Garz & Fricke GmbH
+ *
+ * ----------------------------------------------------------------------------
+ * File Name           : eco-g45.h
+ * Object              :
+ * Creation            : CBe Sep 2011
+ *-----------------------------------------------------------------------------
+ */
+#ifndef _ECO-G45_H
+#define _ECO-G45_H
+
+/* ******************************************************************* */
+/* PMC Settings                                                        */
+/*                                                                     */
+/* The main oscillator is enabled as soon as possible in the c_startup */
+/* and MCK is switched on the main oscillator.                         */
+/* PLL initialization is done later in the hw_init() function          */
+/* ******************************************************************* */
+#define MASTER_CLOCK		(100000000)
+#define PLL_LOCK_TIMEOUT	1000000
+
+#define BOARD_MAINOSC           12000000
+#define BOARD_MCK               ((unsigned long)((BOARD_MAINOSC / 3 / 2 / 4) * 200 )) // 100MHz
+#define BOARD_OSCOUNT           (AT91C_CKGR_OSCOUNT & (64 << 8))
+#define BOARD_CKGR_PLLA         (AT91C_CKGR_SRCA | AT91C_CKGR_OUTA_0)
+#define BOARD_PLLACOUNT         (0x3F << 8)
+#define BOARD_MULA              (AT91C_CKGR_MULA & (199 << 16))
+#define BOARD_DIVA              (AT91C_CKGR_DIVA & 3)
+#define BOARD_PRESCALER         (0x00001200)
+
+#define PLLA_SETTINGS           ( BOARD_CKGR_PLLA \
+                                | BOARD_PLLACOUNT \
+                                | BOARD_MULA \
+                                | BOARD_DIVA)
+
+//#define PLLA_SETTINGS	0x202A3F01
+#define PLLUTMI
+#define PLLUTMI_SETTINGS	0x10193F05
+
+/* Switch MCK on PLLA output PCK = PLLA/2 = 3 * MCK */
+#define MCKR_SETTINGS		(AT91C_PMC_CSS_MAIN_CLK | BOARD_PRESCALER)
+#define MCKR_CSS_SETTINGS	(AT91C_PMC_CSS_PLLA_CLK | BOARD_PRESCALER)
+
+/* ******************************************************************* */
+/* SRAM Settings                                                       */
+/*                                                                     */
+/* ******************************************************************* */
+/* ******************************************************************* */
+/* SMC Chip Select 0 Timings for SRAM for MASTER_CLOCK = 100000000.    */
+/* Please refer to SMC section in AT91SAM9 datasheet to learn how 	   */
+/* to generate these values. 						                   */
+/* Currently we have a Cypress CY62147EV30 SRAM                        */
+/* ******************************************************************* */
+#define AT91C_SM_CS0_NWE_SETUP		(1 << 0)
+#define AT91C_SM_CS0_NWE_PULSE 		(5 << 0)
+#define AT91C_SM_CS0_NWE_CYCLE 		(7 << 0)
+
+#define AT91C_SM_CS0_NCS_WR_SETUP	(1 << 8)
+#define AT91C_SM_CS0_NCS_WR_PULSE	(5 << 8)
+
+#define AT91C_SM_CS0_NRD_SETUP		(1 << 16)
+#define AT91C_SM_CS0_NRD_PULSE		(5 << 16)
+#define AT91C_SM_CS0_NRD_CYCLE		(7 << 16)
+
+#define AT91C_SM_CS0_NCS_RD_SETUP	(1 << 24)
+#define AT91C_SM_CS0_NCS_RD_PULSE	(5 << 24)
+
+#define AT91C_SM_CS0_TDF	      	(5 << 16) /* tAA=45 ns */
+
+/* ******************************************************************* */
+/* NandFlash Settings                                                  */
+/*                                                                     */
+/* ******************************************************************* */
+#define AT91C_SMARTMEDIA_BASE	0x40000000
+
+#define AT91_SMART_MEDIA_ALE    (1 << 21)	/* our ALE is AD21 */
+#define AT91_SMART_MEDIA_CLE    (1 << 22)	/* our CLE is AD22 */
+
+#define NAND_DISABLE_CE() do { *(volatile unsigned int *)AT91C_PIOC_SODR = AT91C_PIO_PC14;} while(0)
+#define NAND_ENABLE_CE() do { *(volatile unsigned int *)AT91C_PIOC_CODR = AT91C_PIO_PC14;} while(0)
+
+#define NAND_WAIT_READY() while (!(*(volatile unsigned int *)AT91C_PIOC_PDSR & AT91C_PIO_PC8))
+
+/* ******************************************************************** */
+/* SMC Chip Select 3 Timings for NandFlash for MASTER_CLOCK = 100000000.*/
+/* Please refer to SMC section in AT91SAM9 datasheet to learn how 	    */
+/* to generate these values. 						                    */
+/* ******************************************************************** */
+#define AT91C_SM_CS3_NWE_SETUP		(1 << 0)
+#define AT91C_SM_CS3_NCS_WR_SETUP	(0 << 8)
+#define AT91C_SM_CS3_NRD_SETUP		(1 << 16)
+#define AT91C_SM_CS3_NCS_RD_SETUP	(0 << 24)
+
+#define AT91C_SM_CS3_NWE_PULSE 		(4 << 0)
+#define AT91C_SM_CS3_NCS_WR_PULSE	(3 << 8)
+#define AT91C_SM_CS3_NRD_PULSE		(3 << 16)
+#define AT91C_SM_CS3_NCS_RD_PULSE	(2 << 24)
+
+#define AT91C_SM_CS3_NWE_CYCLE 		(7 << 0)
+#define AT91C_SM_CS3_NRD_CYCLE		(4 << 16)
+
+#define AT91C_SM_CS3_TDF	      	(3 << 16)
+
+/* ******************************************************************* */
+/* BootStrap Settings                                                  */
+/*                                                                     */
+/* ******************************************************************* */
+#define IMG_ADDRESS 		0x20000			/* Image Address in NandFlash */
+#define	IMG_SIZE		0x80000			/* Image Size in NandFlash */
+
+#define MACH_TYPE		0xE0B			/* ECOG45 Linux machine type */
+#define JUMP_ADDR		0x73F00000		/* Final Jump Address */
+
+/* ******************************************************************* */
+/* Application Settings                                                */
+/* ******************************************************************* */
+#undef CFG_DEBUG
+#undef CFG_DATAFLASH
+
+#define CFG_NANDFLASH
+#undef	NANDFLASH_SMALL_BLOCKS	/* NANDFLASH_LARGE_BLOCKS used instead */
+
+#define CFG_SMC_SRAM
+
+#define	CFG_DDRAM
+#define	CFG_HW_INIT
+#define	CFG_DEBUG
+#define	DEBUG
+
+#endif	/* _ECO-G45_H */
Index: Bootstrap-v1.16/include/part.h
===================================================================
--- Bootstrap-v1.16.orig/include/part.h
+++ Bootstrap-v1.16/include/part.h
@@ -80,7 +80,11 @@
 
 #ifdef AT91SAM9G45
 #include "AT91SAM9G45_inc.h"
-#include "at91sam9g45ekes.h"
+	#ifdef at91sam9g45ekes
+	#include "at91sam9g45ekes.h"
+	#elif eco_g45
+	#include "eco-g45.h"
+	#endif
 #endif
 
 #ifdef AT91SAM9M10
Index: Bootstrap-v1.16/board/at91sam9g45ekes/nandflash/Makefile
===================================================================
--- Bootstrap-v1.16.orig/board/at91sam9g45ekes/nandflash/Makefile
+++ Bootstrap-v1.16/board/at91sam9g45ekes/nandflash/Makefile
@@ -37,8 +37,8 @@ NM= $(CROSS_COMPILE)nm
 SIZE=$(CROSS_COMPILE)size
 OBJCOPY=$(CROSS_COMPILE)objcopy
 OBJDUMP=$(CROSS_COMPILE)objdump
-CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -I$(INCL)
-ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
+CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL)
+ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
 
 # Linker flags.
 #  -Wl,...:     tell GCC to pass this to linker.
Index: Bootstrap-v1.16/board/at91sam9m10g45ek/dataflash/Makefile
===================================================================
--- Bootstrap-v1.16.orig/board/at91sam9m10g45ek/dataflash/Makefile
+++ Bootstrap-v1.16/board/at91sam9m10g45ek/dataflash/Makefile
@@ -37,8 +37,8 @@ NM= $(CROSS_COMPILE)nm
 SIZE=$(CROSS_COMPILE)size
 OBJCOPY=$(CROSS_COMPILE)objcopy
 OBJDUMP=$(CROSS_COMPILE)objdump
-CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -I$(INCL)
-ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
+CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL)
+ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
 
 # Linker flags.
 #  -Wl,...:     tell GCC to pass this to linker.
Index: Bootstrap-v1.16/board/at91sam9m10g45ek/nandflash/Makefile
===================================================================
--- Bootstrap-v1.16.orig/board/at91sam9m10g45ek/nandflash/Makefile
+++ Bootstrap-v1.16/board/at91sam9m10g45ek/nandflash/Makefile
@@ -37,8 +37,8 @@ NM= $(CROSS_COMPILE)nm
 SIZE=$(CROSS_COMPILE)size
 OBJCOPY=$(CROSS_COMPILE)objcopy
 OBJDUMP=$(CROSS_COMPILE)objdump
-CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -I$(INCL)
-ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
+CCFLAGS=-g -mcpu=arm926ej-s -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL)
+ASFLAGS=-g -mcpu=arm926ej-s -c -O2 -Wall -D$(TARGET) -D$(BOARD) -I$(INCL) -DTOP_OF_MEM=$(TOP_OF_MEMORY)
 
 # Linker flags.
 #  -Wl,...:     tell GCC to pass this to linker.
