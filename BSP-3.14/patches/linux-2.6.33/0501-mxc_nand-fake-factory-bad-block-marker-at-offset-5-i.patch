From d23ea2e6cab784e6be96338b95e687d6de4fb91c Mon Sep 17 00:00:00 2001
From: Juergen Beisert <jbe@pengutronix.de>
Date: Thu, 11 Mar 2010 17:26:02 +0100
Subject: [PATCH 58/59] mxc_nand: fake factory bad block marker at offset 5 instead of offset 0

NAND flash manufacturers provide their bad block marker at offset 0 in
the OOB. However, RedBoot still expect it at position 5 (long time used
for NAND devices with 512 byte pages). So we the factory bad block
marker to the expected offset.

Signed-off-by: Juergen Beisert <jbe@pengutronix.de>
---
 drivers/mtd/nand/mxc_nand.c |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

Index: linux-2.6.33/drivers/mtd/nand/mxc_nand.c
===================================================================
--- linux-2.6.33.orig/drivers/mtd/nand/mxc_nand.c
+++ linux-2.6.33/drivers/mtd/nand/mxc_nand.c
@@ -129,7 +129,7 @@ static struct nand_ecclayout nandv1_hw_e
 	.eccbytes = 20,
 	.eccpos = {6, 7, 8, 9, 10, 22, 23, 24, 25, 26,
 		   38, 39, 40, 41, 42, 54, 55, 56, 57, 58},
-	.oobfree = {{2, 4}, {11, 10}, {27, 10}, {43, 10}, {59, 5}, }
+	.oobfree = {{0, 5}, {11, 11}, {27, 11}, {43, 11}, {59, 5}, }
 };
 
 /* OOB description for 512 byte pages with 16 byte OOB */
@@ -153,7 +153,8 @@ static struct nand_ecclayout nandv2_hw_e
 		55, 56, 57, 58, 59, 60, 61, 62, 63
 	},
 	.oobfree = {
-		{.offset = 2, .length = 4},
+		{.offset = 0, .length = 5},
+		{.offset = 6, .length = 1},
 		{.offset = 16, .length = 7},
 		{.offset = 32, .length = 7},
 		{.offset = 48, .length = 7}
@@ -505,10 +506,10 @@ static void mxc_nand_select_chip(struct
  * 2112
  *
  * Due to the strange layout manufacturer's bad block marker will be stored
- * to offset 2005 in the SRAM. But this offset will be handled later on as
+ * to offset 2000 in the SRAM. But this offset will be handled later on as
  * main page data and the information is lost.
  * To keep manufacturer's bad block marker this function swaps the byte
- * at offset 2005 with the byte at offset 2053.
+ * at offset 2000 with the byte at offset 2053 (to still emulate offset 5).
  * Important: This swap must be done prior writing the buffer data to the NAND
  * and after reading the buffer from the NAND.
  * Note: This function is only important for NAND devices with 2kiB pages. Its
@@ -519,13 +520,13 @@ static void mxc_swap_2k_bi_main_sp(struc
 	u16 tmp1, tmp2, new_tmp1;
 
 	/* note: Only 16 bit accesses are allowed */
-	tmp1 = readw(host->main_area0 + 2004);
+	tmp1 = readw(host->main_area0 + 2000);
 	tmp2 = readw(host->main_area0 + 2052);
 
 	new_tmp1 = (tmp1 & 0xFF00) | (tmp2 >> 8);
 	tmp2 = (tmp1 << 8) | (tmp2 & 0xFF);
 
-	writew(new_tmp1, host->main_area0 + 2004);
+	writew(new_tmp1, host->main_area0 + 2000);
 	writew(tmp2, host->main_area0 + 2052);
 }
 
@@ -861,6 +862,10 @@ static int __init mxcnd_probe(struct pla
 	this->ecc.size = 512;
 	this->ecc.layout = oob_smallpage;
 
+	/* Set the bad block marker position always to 5
+	   for this NFC */
+	this->badblockpos = 5;
+	
 	if (pdata->hw_ecc) {
 		this->ecc.calculate = mxc_nand_calculate_ecc;
 		this->ecc.hwctl = mxc_nand_enable_hwecc;
Index: linux-2.6.33/drivers/mtd/nand/nand_base.c
===================================================================
--- linux-2.6.33.orig/drivers/mtd/nand/nand_base.c
+++ linux-2.6.33/drivers/mtd/nand/nand_base.c
@@ -2701,9 +2701,10 @@ static struct nand_flash_dev *nand_get_f
 	else
 		chip->chip_shift = ffs((unsigned)(chip->chipsize >> 32)) + 32 - 1;
 
-	/* Set the bad block position */
-	chip->badblockpos = mtd->writesize > 512 ?
-		NAND_LARGE_BADBLOCK_POS : NAND_SMALL_BADBLOCK_POS;
+	/* Set the bad block position if not already done by the driver */
+	if(!chip->badblockpos)
+		chip->badblockpos = mtd->writesize > 512 ?
+			NAND_LARGE_BADBLOCK_POS : NAND_SMALL_BADBLOCK_POS;
 
 	/* Get chip options, preserve non chip based options */
 	chip->options &= ~NAND_CHIPOPTIONS_MSK;
