Index: linux-2.6.33/drivers/serial/imx.c
===================================================================
--- linux-2.6.33.orig/drivers/serial/imx.c
+++ linux-2.6.33/drivers/serial/imx.c
@@ -49,6 +49,7 @@
 
 #include <asm/io.h>
 #include <asm/irq.h>
+#include <asm/uaccess.h>
 #include <mach/hardware.h>
 #include <mach/imx-uart.h>
 
@@ -192,6 +193,7 @@ struct imx_port {
 	unsigned int		irda_inv_tx:1;
 	unsigned short		trcv_delay; /* transceiver delay */
 	struct clk		*clk;
+	struct serial_rs485	rs485;	/* rs485 settings */
 };
 
 #ifdef CONFIG_IRDA
@@ -200,6 +202,9 @@ struct imx_port {
 #define USE_IRDA(sport)	(0)
 #endif
 
+#define USE_RS485(sport) ((sport)->rs485.flags & (SER_RS485_ENABLED))
+#define USE_RS485_HALF_DUPLEX(sport) (USE_RS485(sport) && ((sport)->rs485.flags & (SER_RS485_RTS_ON_SEND)))
+
 /*
  * Handle any change of modem status signal since we were last called.
  */
@@ -246,54 +251,38 @@ static void imx_timeout(unsigned long da
 }
 
 /*
- * interrupts disabled on entry
+ * set RS485 configuration
  */
-static void imx_stop_tx(struct uart_port *port)
+static int imx_config_rs485(struct uart_port *port, struct serial_rs485 rs485conf)
 {
+	unsigned long flags;
 	struct imx_port *sport = (struct imx_port *)port;
-	unsigned long temp;
+	struct imxuart_platform_data *pdata;
+	pdata = sport->port.dev->platform_data;
 
-	if (USE_IRDA(sport)) {
-		/* half duplex - wait for end of transmission */
-		int n = 256;
-		while ((--n > 0) &&
-		      !(readl(sport->port.membase + USR2) & USR2_TXDC)) {
-			udelay(5);
-			barrier();
-		}
-		/*
-		 * irda transceiver - wait a bit more to avoid
-		 * cutoff, hardware dependent
-		 */
-		udelay(sport->trcv_delay);
+	if (!pdata->rs485_tx_enable)
+		return -ENOSYS;
 
-		/*
-		 * half duplex - reactivate receive mode,
-		 * flush receive pipe echo crap
-		 */
-		if (readl(sport->port.membase + USR2) & USR2_TXDC) {
-			temp = readl(sport->port.membase + UCR1);
-			temp &= ~(UCR1_TXMPTYEN | UCR1_TRDYEN);
-			writel(temp, sport->port.membase + UCR1);
+	spin_lock_irqsave(&sport->port.lock, flags);
 
-			temp = readl(sport->port.membase + UCR4);
-			temp &= ~(UCR4_TCEN);
-			writel(temp, sport->port.membase + UCR4);
+	sport->rs485 = rs485conf;
+	if (USE_RS485_HALF_DUPLEX(sport))
+		pdata->rs485_tx_enable(0);
+	else
+		pdata->rs485_tx_enable(1);
 
-			while (readl(sport->port.membase + URXD0) &
-			       URXD_CHARRDY)
-				barrier();
+	spin_unlock_irqrestore(&sport->port.lock, flags);
 
-			temp = readl(sport->port.membase + UCR1);
-			temp |= UCR1_RRDYEN;
-			writel(temp, sport->port.membase + UCR1);
+	return 0;
+}
 
-			temp = readl(sport->port.membase + UCR4);
-			temp |= UCR4_DREN;
-			writel(temp, sport->port.membase + UCR4);
-		}
-		return;
-	}
+/*
+ * interrupts disabled on entry
+ */
+static void imx_stop_tx(struct uart_port *port)
+{
+	struct imx_port *sport = (struct imx_port *)port;
+	unsigned long temp;
 
 	temp = readl(sport->port.membase + UCR1);
 	writel(temp & ~UCR1_TXMPTYEN, sport->port.membase + UCR1);
@@ -349,9 +338,11 @@ static void imx_start_tx(struct uart_por
 {
 	struct imx_port *sport = (struct imx_port *)port;
 	unsigned long temp;
+	struct imxuart_platform_data *pdata;
+	pdata = sport->port.dev->platform_data;
 
-	if (USE_IRDA(sport)) {
-		/* half duplex in IrDA mode; have to disable receive mode */
+	if (USE_IRDA(sport) || USE_RS485_HALF_DUPLEX(sport)) {
+		/* half duplex in IrDA / RS485 mode; have to disable receive mode */
 		temp = readl(sport->port.membase + UCR4);
 		temp &= ~(UCR4_DREN);
 		writel(temp, sport->port.membase + UCR4);
@@ -361,10 +352,14 @@ static void imx_start_tx(struct uart_por
 		writel(temp, sport->port.membase + UCR1);
 	}
 
+	/* half duplex - activate TX line */
+	if (USE_RS485_HALF_DUPLEX(sport) && pdata->rs485_tx_enable)
+		pdata->rs485_tx_enable(1);
+
 	temp = readl(sport->port.membase + UCR1);
 	writel(temp | UCR1_TXMPTYEN, sport->port.membase + UCR1);
 
-	if (USE_IRDA(sport)) {
+	if (USE_IRDA(sport) || USE_RS485_HALF_DUPLEX(sport)) {
 		temp = readl(sport->port.membase + UCR1);
 		temp |= UCR1_TRDYEN;
 		writel(temp, sport->port.membase + UCR1);
@@ -423,6 +418,56 @@ out:
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t imx_txcompleteint(int irq, void *dev_id)
+{
+	struct imx_port *sport = dev_id;
+	unsigned long temp;
+	struct imxuart_platform_data *pdata;
+	pdata = sport->port.dev->platform_data;
+
+	/*
+	 * irda transceiver - wait a bit more to avoid
+	 * cutoff, hardware dependent
+	 */
+	if (USE_IRDA(sport))
+		udelay(sport->trcv_delay);
+
+	/*
+	 * half duplex - deactivate TX line
+	 */
+	if (USE_RS485_HALF_DUPLEX(sport) && pdata->rs485_tx_enable)
+		pdata->rs485_tx_enable(0);
+
+	if (USE_IRDA(sport) || USE_RS485_HALF_DUPLEX(sport)) {
+		/*
+		 * half duplex - reactivate receive mode,
+		 * flush receive pipe echo crap
+		 */
+		if (readl(sport->port.membase + USR2) & USR2_TXDC) {
+			temp = readl(sport->port.membase + UCR1);
+			temp &= ~(UCR1_TXMPTYEN | UCR1_TRDYEN);
+			writel(temp, sport->port.membase + UCR1);
+
+			temp = readl(sport->port.membase + UCR4);
+			temp &= ~(UCR4_TCEN);
+			writel(temp, sport->port.membase + UCR4);
+
+			while (readl(sport->port.membase + URXD0) &
+			       URXD_CHARRDY)
+				barrier();
+
+			temp = readl(sport->port.membase + UCR1);
+			temp |= UCR1_RRDYEN;
+			writel(temp, sport->port.membase + UCR1);
+
+			temp = readl(sport->port.membase + UCR4);
+			temp |= UCR4_DREN;
+			writel(temp, sport->port.membase + UCR4);
+		}
+	}
+	return IRQ_HANDLED;
+}
+
 static irqreturn_t imx_rxint(int irq, void *dev_id)
 {
 	struct imx_port *sport = dev_id;
@@ -488,18 +533,24 @@ out:
 static irqreturn_t imx_int(int irq, void *dev_id)
 {
 	struct imx_port *sport = dev_id;
-	unsigned int sts;
+	unsigned int usr1, usr2;
 
-	sts = readl(sport->port.membase + USR1);
+	usr1 = readl(sport->port.membase + USR1);
+	usr2 = readl(sport->port.membase + USR2);
 
-	if (sts & USR1_RRDY)
+	if (usr1 & USR1_RRDY &&
+			readl(sport->port.membase + UCR1) & (UCR1_RRDYEN))
 		imx_rxint(irq, dev_id);
 
-	if (sts & USR1_TRDY &&
-			readl(sport->port.membase + UCR1) & UCR1_TXMPTYEN)
+	if (usr1 & USR1_TRDY &&
+			readl(sport->port.membase + UCR1) & (UCR1_TXMPTYEN | UCR1_TRDYEN))
 		imx_txint(irq, dev_id);
 
-	if (sts & USR1_RTSD)
+	if (usr2 & USR2_TXDC &&
+			readl(sport->port.membase + UCR4) & UCR4_TCEN)
+		imx_txcompleteint(irq, dev_id);
+
+	if (usr1 & USR1_RTSD)
 		imx_rtsint(irq, dev_id);
 
 	return IRQ_HANDLED;
@@ -565,7 +616,7 @@ static void imx_break_ctl(struct uart_po
 	spin_unlock_irqrestore(&sport->port.lock, flags);
 }
 
-#define TXTL 2 /* reset default */
+#define TXTL 16 /* RS485 needs high threshold */
 #define RXTL 1 /* reset default */
 
 static int imx_setup_ufcr(struct imx_port *sport, unsigned int mode)
@@ -673,7 +724,7 @@ static int imx_startup(struct uart_port
 	temp |= (UCR2_RXEN | UCR2_TXEN);
 	writel(temp, sport->port.membase + UCR2);
 
-	if (USE_IRDA(sport)) {
+	if (USE_IRDA(sport) || USE_RS485_HALF_DUPLEX(sport)) {
 		/* clear RX-FIFO */
 		int i = 64;
 		while ((--i > 0) &&
@@ -721,6 +772,17 @@ static int imx_startup(struct uart_port
 			pdata->irda_enable(1);
 	}
 
+	if (USE_RS485(sport)) {
+		struct imxuart_platform_data *pdata;
+		pdata = sport->port.dev->platform_data;
+		// Enable RS485 mode
+		if (pdata->rs485_enable)
+			pdata->rs485_enable(1);
+		// Enable TX line in full duplex mode, disable it in half duplex mode
+		if (pdata->rs485_tx_enable)
+			pdata->rs485_tx_enable(USE_RS485_HALF_DUPLEX(sport) ? 0 : 1);
+	}
+
 	return 0;
 
 error_out3:
@@ -749,6 +811,17 @@ static void imx_shutdown(struct uart_por
 			pdata->irda_enable(0);
 	}
 
+	if (USE_RS485(sport)) {
+		struct imxuart_platform_data *pdata;
+		pdata = sport->port.dev->platform_data;
+		// Disable RS485 mode
+		if (pdata->rs485_enable)
+			pdata->rs485_enable(0);
+		// Disable TX line
+		if (pdata->rs485_tx_enable)
+			pdata->rs485_tx_enable(0);
+	}
+
 	/*
 	 * Stop our timer.
 	 */
@@ -1011,6 +1084,28 @@ imx_verify_port(struct uart_port *port,
 	return ret;
 }
 
+static int
+imx_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
+{
+	struct serial_rs485 rs485conf;
+	int err = 0;
+
+	switch (cmd) {
+	case TIOCSRS485:
+		if (copy_from_user(&rs485conf, (struct serial_rs485 *) arg, \
+					sizeof(rs485conf)))
+			return -EFAULT;
+
+		dev_dbg(port->dev, "enable e/o disable rs485\n");
+		err = imx_config_rs485(port, rs485conf);
+		break;
+
+	default:
+		err = -ENOIOCTLCMD;
+	}
+	return err;
+}
+
 static struct uart_ops imx_pops = {
 	.tx_empty	= imx_tx_empty,
 	.set_mctrl	= imx_set_mctrl,
@@ -1028,6 +1123,7 @@ static struct uart_ops imx_pops = {
 	.request_port	= imx_request_port,
 	.config_port	= imx_config_port,
 	.verify_port	= imx_verify_port,
+	.ioctl			= imx_ioctl,
 };
 
 static struct imx_port *imx_ports[UART_NR];
@@ -1226,6 +1322,7 @@ static int serial_imx_probe(struct platf
 	int ret = 0;
 	struct resource *res;
 
+	printk(KERN_INFO "Serial: imx_probe.\n");
 	sport = kzalloc(sizeof(*sport), GFP_KERNEL);
 	if (!sport)
 		return -ENOMEM;
@@ -1279,6 +1376,11 @@ static int serial_imx_probe(struct platf
 		sport->use_irda = 1;
 #endif
 
+	if (pdata && (pdata->flags & IMXUART_RS485))
+		sport->rs485.flags = SER_RS485_ENABLED;
+	if (pdata && (pdata->flags & IMXUART_RS485_HALFD))
+		sport->rs485.flags |= SER_RS485_RTS_ON_SEND;
+
 	if (pdata->init) {
 		ret = pdata->init(pdev);
 		if (ret)
Index: linux-2.6.33/arch/arm/plat-mxc/include/mach/imx-uart.h
===================================================================
--- linux-2.6.33.orig/arch/arm/plat-mxc/include/mach/imx-uart.h
+++ linux-2.6.33/arch/arm/plat-mxc/include/mach/imx-uart.h
@@ -21,12 +21,16 @@
 
 #define IMXUART_HAVE_RTSCTS (1<<0)
 #define IMXUART_IRDA        (1<<1)
+#define IMXUART_RS485       (1<<2)
+#define IMXUART_RS485_HALFD (1<<3)
 
 struct imxuart_platform_data {
 	int (*init)(struct platform_device *pdev);
 	void (*exit)(struct platform_device *pdev);
 	unsigned int flags;
 	void (*irda_enable)(int enable);
+	void (*rs485_enable)(int enable);
+	void (*rs485_tx_enable)(int enable);
 	unsigned int irda_inv_rx:1;
 	unsigned int irda_inv_tx:1;
 	unsigned short transceiver_delay;
Index: linux-2.6.33/arch/arm/include/asm/ioctls.h
===================================================================
--- linux-2.6.33.orig/arch/arm/include/asm/ioctls.h
+++ linux-2.6.33/arch/arm/include/asm/ioctls.h
@@ -50,6 +50,8 @@
 #define TCSETS2		_IOW('T',0x2B, struct termios2)
 #define TCSETSW2	_IOW('T',0x2C, struct termios2)
 #define TCSETSF2	_IOW('T',0x2D, struct termios2)
+#define TIOCGRS485	0x542E
+#define TIOCSRS485	0x542F
 #define TIOCGPTN	_IOR('T',0x30, unsigned int) /* Get Pty Number (of pty-mux device) */
 #define TIOCSPTLCK	_IOW('T',0x31, int)  /* Lock/unlock Pty */
 
