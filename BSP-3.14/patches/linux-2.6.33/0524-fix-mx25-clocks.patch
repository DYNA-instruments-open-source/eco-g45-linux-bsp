Index: linux-2.6.33/arch/arm/mach-mx25/clock.c
===================================================================
--- linux-2.6.33.orig/arch/arm/mach-mx25/clock.c
+++ linux-2.6.33/arch/arm/mach-mx25/clock.c
@@ -51,6 +51,7 @@
 #define CCM_LTR1	0x44
 #define CCM_LTR2	0x48
 #define CCM_LTR3	0x4c
+#define CCM_MCR		0x64
 
 static unsigned long get_rate_mpll(void)
 {
@@ -109,6 +110,16 @@ static unsigned long get_rate_uart(struc
 	return get_rate_per(15);
 }
 
+static unsigned long get_rate_ssi2(struct clk *clk)
+{
+	return get_rate_per(14);
+}
+
+static unsigned long get_rate_ssi1(struct clk *clk)
+{
+	return get_rate_per(13);
+}
+
 static unsigned long get_rate_i2c(struct clk *clk)
 {
 	return get_rate_per(6);
@@ -124,9 +135,33 @@ static unsigned long get_rate_gpt(struct
 	return get_rate_per(5);
 }
 
+static unsigned long get_rate_lcdc(struct clk *clk)
+{
+	return get_rate_per(7);
+}
+
 static unsigned long get_rate_otg(struct clk *clk)
 {
-	return 48000000; /* FIXME */
+	unsigned long cctl = readl(CRM_BASE + CCM_CCTL);
+
+	return get_rate_upll() / (((cctl >> 16) & 0x3F) + 1);
+}
+
+static unsigned long get_rate_sdhc(struct clk *clk)
+{
+	unsigned long rate;
+
+	switch (clk->id) {
+	default:
+	case 0:
+		rate = get_rate_per(3);
+		break;
+	case 1:
+		rate = get_rate_per(4);
+		break;
+	}
+
+	return rate;
 }
 
 static int clk_cgcr_enable(struct clk *clk)
@@ -137,6 +172,13 @@ static int clk_cgcr_enable(struct clk *c
 	reg |= 1 << clk->enable_shift;
 	__raw_writel(reg, clk->enable_reg);
 
+	if (clk->enable_reg == CRM_BASE + CCM_CGCR0	&& clk->enable_shift == 28)
+	{
+		// This is the USB clock, we have to enable the UPLL
+		reg = __raw_readl(CRM_BASE + CCM_CCTL);
+		reg &= ~(1 << 23);
+		__raw_writel(reg, CRM_BASE + CCM_CCTL);
+	}
 	return 0;
 }
 
@@ -163,10 +205,18 @@ static void clk_cgcr_disable(struct clk
 
 DEFINE_CLOCK(gpt_clk,    0, CCM_CGCR0,  5, get_rate_gpt, NULL, NULL);
 DEFINE_CLOCK(uart_per_clk, 0, CCM_CGCR0, 15, get_rate_uart, NULL, NULL);
+DEFINE_CLOCK(ssi1_per_clk, 0, CCM_CGCR0, 13, get_rate_ipg, NULL, NULL);
+DEFINE_CLOCK(ssi2_per_clk, 0, CCM_CGCR0, 14, get_rate_ipg, NULL, NULL);
 DEFINE_CLOCK(cspi1_clk,  0, CCM_CGCR1,  5, get_rate_ipg, NULL, NULL);
 DEFINE_CLOCK(cspi2_clk,  0, CCM_CGCR1,  6, get_rate_ipg, NULL, NULL);
 DEFINE_CLOCK(cspi3_clk,  0, CCM_CGCR1,  7, get_rate_ipg, NULL, NULL);
 DEFINE_CLOCK(fec_ahb_clk, 0, CCM_CGCR0, 23, NULL,	 NULL, NULL);
+DEFINE_CLOCK(lcdc_ahb_clk, 0, CCM_CGCR0, 24, NULL, NULL, NULL);
+DEFINE_CLOCK(lcdc_per_clk, 0, CCM_CGCR0,  7, NULL, NULL, &lcdc_ahb_clk);
+DEFINE_CLOCK(esdhc1_ahb_clk, 0, CCM_CGCR0, 21, NULL, NULL, NULL);
+DEFINE_CLOCK(esdhc2_ahb_clk, 0, CCM_CGCR0, 22, NULL, NULL, NULL);
+DEFINE_CLOCK(esdhc1_per_clk, 0, CCM_CGCR0,  3, NULL, NULL, &esdhc1_ahb_clk);
+DEFINE_CLOCK(esdhc2_per_clk, 0, CCM_CGCR0,  4, NULL, NULL, &esdhc2_ahb_clk);
 DEFINE_CLOCK(uart1_clk,  0, CCM_CGCR2, 14, get_rate_uart, NULL, &uart_per_clk);
 DEFINE_CLOCK(uart2_clk,  0, CCM_CGCR2, 15, get_rate_uart, NULL, &uart_per_clk);
 DEFINE_CLOCK(uart3_clk,  0, CCM_CGCR2, 16, get_rate_uart, NULL, &uart_per_clk);
@@ -182,6 +232,13 @@ DEFINE_CLOCK(kpp_clk,	 0, CCM_CGCR1, 28,
 DEFINE_CLOCK(tsc_clk,	 0, CCM_CGCR2, 13, get_rate_ipg, NULL, NULL);
 DEFINE_CLOCK(i2c_clk,	 0, CCM_CGCR0,  6, get_rate_i2c, NULL, NULL);
 DEFINE_CLOCK(fec_clk,	 0, CCM_CGCR1, 15, get_rate_ipg, NULL, &fec_ahb_clk);
+DEFINE_CLOCK(lcdc_clk,	 0, CCM_CGCR1, 29, get_rate_lcdc, NULL, &lcdc_per_clk);
+DEFINE_CLOCK(esdhc1_clk, 0, CCM_CGCR1, 13, get_rate_sdhc, NULL, &esdhc1_per_clk);
+DEFINE_CLOCK(esdhc2_clk, 1, CCM_CGCR1, 14, get_rate_sdhc, NULL, &esdhc2_per_clk);
+DEFINE_CLOCK(can1_clk,   0, CCM_CGCR1,  2, get_rate_ipg, NULL, NULL);
+DEFINE_CLOCK(audmux_clk, 0, CCM_CGCR1,  0, NULL, NULL, NULL);
+DEFINE_CLOCK(ssi1_clk,   0, CCM_CGCR2, 11, get_rate_ssi1, NULL, &ssi1_per_clk);
+DEFINE_CLOCK(ssi2_clk,   1, CCM_CGCR2, 12, get_rate_ssi2, NULL, &ssi2_per_clk);
 
 #define _REGISTER_CLOCK(d, n, c)	\
 	{				\
@@ -209,16 +266,24 @@ static struct clk_lookup lookups[] = {
 	_REGISTER_CLOCK("mxc_pwm.2", NULL, pwm3_clk)
 	_REGISTER_CLOCK("mxc_pwm.3", NULL, pwm4_clk)
 	_REGISTER_CLOCK("mxc-keypad", NULL, kpp_clk)
-	_REGISTER_CLOCK("mx25-adc", NULL, tsc_clk)
+	_REGISTER_CLOCK("imx_adc.0", NULL, tsc_clk)
 	_REGISTER_CLOCK("imx-i2c.0", NULL, i2c_clk)
 	_REGISTER_CLOCK("imx-i2c.1", NULL, i2c_clk)
 	_REGISTER_CLOCK("imx-i2c.2", NULL, i2c_clk)
 	_REGISTER_CLOCK("fec.0", NULL, fec_clk)
+	_REGISTER_CLOCK("imx-fb.0", NULL, lcdc_clk)
+	_REGISTER_CLOCK("sdhci-esdhc-imx.0", NULL, esdhc1_clk)
+	_REGISTER_CLOCK("sdhci-esdhc-imx.1", NULL, esdhc2_clk)
+	_REGISTER_CLOCK("flexcan.0", NULL, can1_clk)
+	_REGISTER_CLOCK(NULL, "audmux", audmux_clk)
+	_REGISTER_CLOCK("imx-ssi.0", NULL, ssi1_clk)
+	_REGISTER_CLOCK("imx-ssi.1", NULL, ssi2_clk)
 };
 
 int __init mx25_clocks_init(void)
 {
 	int i;
+	unsigned long reg;
 
 	for (i = 0; i < ARRAY_SIZE(lookups); i++)
 		clkdev_add(&lookups[i]);
@@ -233,5 +298,14 @@ int __init mx25_clocks_init(void)
 
 	mxc_timer_init(&gpt_clk, MX25_IO_ADDRESS(MX25_GPT1_BASE_ADDR), 54);
 
+	/* Setup CLKO for audio codec */
+	reg = __raw_readl(CRM_BASE + CCM_MCR);
+	reg &= ~0x3ff00000;	// Reset CLKO registers
+	reg |= (1<<13);		// Select UPLL as source for SSI1 clock
+	reg |= (1<<17);		// Set special SSI1 clock divider for 24.61 MHz
+	reg |= (12<<20);	// Set CLKO to SSI1
+	reg |= (1<<30);		// Enable CLKO
+	__raw_writel(reg, CRM_BASE + CCM_MCR);
+
 	return 0;
 }
