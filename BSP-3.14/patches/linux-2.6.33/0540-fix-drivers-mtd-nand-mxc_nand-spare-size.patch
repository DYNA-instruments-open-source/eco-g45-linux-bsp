Index: linux-2.6.33/drivers/mtd/nand/mxc_nand.c
===================================================================
--- linux-2.6.33.orig/drivers/mtd/nand/mxc_nand.c
+++ linux-2.6.33/drivers/mtd/nand/mxc_nand.c
@@ -852,13 +852,11 @@ static int __init mxcnd_probe(struct pla
 	if (nfc_is_v21()) {
 		host->regs = host->base + 0x1000;
 		host->spare0 = host->base + 0x1000;
-		host->spare_len = 64;
 		oob_smallpage = &nandv2_hw_eccoob_smallpage;
 		oob_largepage = &nandv2_hw_eccoob_largepage;
 	} else if (nfc_is_v1()) {
 		host->regs = host->base;
 		host->spare0 = host->base + 0x800;
-		host->spare_len = 16;
 		oob_smallpage = &nandv1_hw_eccoob_smallpage;
 		oob_largepage = &nandv1_hw_eccoob_largepage;
 	} else
@@ -887,14 +885,6 @@ static int __init mxcnd_probe(struct pla
 	/* Unlock the internal RAM Buffer */
 	writew(0x2, host->regs + NFC_CONFIG);
 
-	if (nfc_is_v21()) {
-		/* configure spare size (in 16-bit blocks) */
-		tmp = readw(host->regs + NFC_RSLTSPARE_AREA);
-		tmp &= ~0xff;
-		tmp |= host->spare_len / 2;
-		writew(tmp, host->regs + NFC_RSLTSPARE_AREA);
-	}
-
 	/* Blocks to be unlocked */
 	if (nfc_is_v21()) {
 		writew(0x0, host->regs + NFC_V21_UNLOCKSTART_BLKADDR);
@@ -949,8 +939,26 @@ static int __init mxcnd_probe(struct pla
 		goto escan;
 	}
 
-	if (mtd->writesize == 2048)
+	if (mtd->writesize == 2048) {
 		this->ecc.layout = oob_largepage;
+		/* configure spare size (in 16-bit blocks) */
+		tmp = readw(host->regs + NFC_RSLTSPARE_AREA);
+		tmp &= ~0xff;
+		/* The SPAS field is defined as 16 bit half words */
+		tmp |= 32;
+		writew(tmp, host->regs + NFC_RSLTSPARE_AREA);
+		host->spare_len = 64;
+	}
+	else if (mtd->writesize == 512) {
+		this->ecc.layout = oob_smallpage;
+		/* configure spare size (in 16-bit blocks) */
+		tmp = readw(host->regs + NFC_RSLTSPARE_AREA);
+		tmp &= ~0xff;
+		/* The SPAS field is defined as 16 bit half words */
+		tmp |= 8;
+		writew(tmp, host->regs + NFC_RSLTSPARE_AREA);
+		host->spare_len = 16;
+	}
 
 	/* force our own bad block pattern here */
 	this->badblock_pattern = &largepage_memorybased_8bit;
