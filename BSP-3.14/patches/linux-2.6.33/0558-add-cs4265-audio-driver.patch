Index: linux-2.6.33/sound/soc/codecs/cs4265.c
===================================================================
--- /dev/null
+++ linux-2.6.33/sound/soc/codecs/cs4265.c
@@ -0,0 +1,1047 @@
+/*
+ * CS4265 ALSA SoC (ASoC) codec driver
+ *
+ * Author: Tim Jaacks <tim.jaacks@garz-fricke.com>
+ *
+ * This is an ASoC device driver for the Cirrus Logic CS4265 codec.
+ * The code is based on the CS4270 driver by Timur Tabi <timur@freescale.com>.
+ *
+ * Current features/limitations:
+ *
+ * - Software mode is supported.  Stand-alone mode is not supported.
+ * - Only I2C is supported, not SPI
+ * - Support for master and slave mode
+ * - The machine driver's 'startup' function must call
+ *   cs4265_set_dai_sysclk() with the value of MCLK.
+ * - Only I2S and left-justified modes are supported
+ * - Power management is supported
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <sound/core.h>
+#include <sound/soc.h>
+#include <sound/initval.h>
+#include <sound/asoundef.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+
+#include "cs4265.h"
+
+/*
+ * The codec isn't really big-endian or little-endian, since the I2S
+ * interface requires data to be sent serially with the MSbit first.
+ * However, to support BE and LE I2S devices, we specify both here.  That
+ * way, ALSA will always match the bit patterns.
+ */
+#define CS4265_FORMATS (SNDRV_PCM_FMTBIT_S8      | \
+			SNDRV_PCM_FMTBIT_S16_LE  | SNDRV_PCM_FMTBIT_S16_BE  | \
+			SNDRV_PCM_FMTBIT_S18_3LE | SNDRV_PCM_FMTBIT_S18_3BE | \
+			SNDRV_PCM_FMTBIT_S20_3LE | SNDRV_PCM_FMTBIT_S20_3BE | \
+			SNDRV_PCM_FMTBIT_S24_3LE | SNDRV_PCM_FMTBIT_S24_3BE | \
+			SNDRV_PCM_FMTBIT_S24_LE  | SNDRV_PCM_FMTBIT_S24_BE)
+
+/* CS4265 registers addresses */
+#define CS4265_CHIPID	0x01	/* Chip ID */
+#define CS4265_PWRCTL	0x02	/* Power Control */
+#define CS4265_DACCTL	0x03	/* DAC Control 1 */
+#define CS4265_ADCCTL	0x04	/* ADC Control */
+#define CS4265_MCLK		0x05	/* MCLK Frequency */
+#define CS4265_SIGSEL	0x06	/* Signal Selection */
+#define CS4265_GAIN_B	0x07	/* PGA Ch B Gain Control */
+#define CS4265_GAIN_A	0x08	/* PGA Ch C Gain Control */
+#define CS4265_AICTL	0x09	/* Analog Input Control */
+#define CS4265_VOLA		0x0a	/* DAC Channel A Volume Control */
+#define CS4265_VOLB		0x0b	/* DAC Channel B Volume Control */
+#define CS4265_DACCTL2	0x0c	/* DAC Control 2 */
+#define CS4265_STAT		0x0d	/* Status */
+#define CS4265_STATMASK	0x0e	/* Status Mask */
+#define CS4265_STMODMSB	0x0f	/* Status Mode MSB */
+#define CS4265_STMODLSB	0x10	/* Status Mode LSB */
+#define CS4265_TRCTL1	0x11	/* Transmitter Control 1 */
+#define CS4265_TRCTL2	0x12	/* Transmitter Control 2 */
+#define CS4265_C_DATA	0x13	/* C-Data Buffer */
+
+#define CS4265_FIRSTREG	0x01
+#define CS4265_LASTREG	0x12
+#define CS4265_NUMREGS	(CS4265_LASTREG - CS4265_FIRSTREG + 1)
+
+/* Bit masks for the CS4265 registers */
+#define CS4265_CHIPID_ID		0xF0
+#define CS4265_CHIPID_REV		0x0F
+#define CS4265_PWRCTL_FREEZE	0x80
+#define CS4265_PWRCTL_PDN_MIC	0x08
+#define CS4265_PWRCTL_PDN_ADC	0x04
+#define CS4265_PWRCTL_PDN_DAC	0x02
+#define CS4265_PWRCTL_PDN		0x01
+#define CS4265_PWRCTL_PDN_ALL	\
+	(CS4265_PWRCTL_PDN_MIC | CS4265_PWRCTL_PDN_ADC | CS4265_PWRCTL_PDN_DAC | CS4265_PWRCTL_PDN)
+
+#define CS4265_DACCTL_MASK		0x30
+#define CS4265_DACCTL_LJ		0x00
+#define CS4265_DACCTL_I2S		0x10
+#define CS4265_DACCTL_RJ16		0x20
+#define CS4265_DACCTL_RJ24		0x30
+#define CS4265_DACCTL_MUTE		0x04
+#define CS4265_DACCTL_DEEMPH	0x02
+
+#define CS4265_ADCCTL_SPEED_MASK	0xc0
+#define CS4265_ADCCTL_1X		0x00
+#define CS4265_ADCCTL_2X		0x40
+#define CS4265_ADCCTL_4X		0x80
+#define CS4265_ADCCTL_MASK		0x10
+#define CS4265_ADCCTL_LJ		0x00
+#define CS4265_ADCCTL_I2S		0x10
+#define CS4265_ADCCTL_MUTE		0x04
+#define CS4265_ADCCTL_HPFFREEZE	0x02
+#define CS4265_ADCCTL_MASTER	0x01
+
+#define CS4265_MCLK_DIV_MASK	0x70
+#define CS4265_MCLK_DIV1		0x00
+#define CS4265_MCLK_DIV15		0x10
+#define CS4265_MCLK_DIV2		0x20
+#define CS4265_MCLK_DIV3		0x30
+#define CS4265_MCLK_DIV4		0x40
+
+#define CS4265_DACCTL2_SOFT		0x80
+#define CS4265_DACCTL2_ZERO		0x40
+#define CS4265_DACCTL2_INV		0x20
+
+#define CS4265_SIGSEL_SDIN		0x80
+#define CS4265_SIGSEL_LOOPBACK	0x02
+
+#define CS4265_AICTL_PGA_SOFT	0x10
+#define CS4265_AICTL_PGA_ZERO	0x08
+#define CS4265_AICTL_SEL		0x01
+#define CS4265_AICTL_SEL_LINE	0x01
+#define CS4265_AICTL_SEL_MIC	0x00
+
+#define CS4265_TRCTL1_EFTCI		0x40
+#define CS4265_TRCTL1_CAM		0x20
+#define CS4265_TRCTL2_MASK		0xc0
+#define CS4265_TRCTL2_LJ		0x00
+#define CS4265_TRCTL2_I2S		0x40
+#define CS4265_TRCTL2_RJ16		0x80
+#define CS4265_TRCTL2_RJ24		0xc0
+#define CS4265_TRCTL2_OFF		0x20
+#define CS4265_TRCTL2_MUTE		0x10
+#define CS4265_TRCTL2_V			0x08
+#define CS4265_TRCTL2_MMT		0x04
+#define CS4265_TRCTL2_MMTCS		0x02
+#define CS4265_TRCTL2_MMTLR		0x01
+
+#define CS4265_STAT_EFTC		0x10
+#define CS4265_STAT_CLKERR		0x08
+#define CS4265_STAT_ADC_OVFL	0x02
+#define CS4265_STAT_ADC_UNFL	0x01
+
+/* Private data for the CS4265 */
+struct cs4265_private {
+	struct snd_soc_codec codec;
+	u8 reg_cache[CS4265_NUMREGS];
+	unsigned int mclk; /* Input frequency of the MCLK pin */
+	unsigned int mode; /* The mode (I2S or left-justified) */
+	unsigned int slave_mode;
+	unsigned int manual_mute;
+	unsigned char channel_status[5]; /* S/PDIF channel status */
+};
+
+/**
+ * struct cs4265_mode_ratios - clock ratio tables
+ * @ratio: the ratio of MCLK to the sample rate
+ * @speed_mode: the Speed Mode bits to set in the Mode Control register for
+ *              this ratio
+ * @mclk: the Ratio Select bits to set in the Mode Control register for this
+ *        ratio
+ *
+ * The data for this chart is taken from Table 5 of the CS4265 reference
+ * manual.
+ *
+ * This table is used to determine how to program the Mode Control register.
+ * It is also used by cs4265_set_dai_sysclk() to tell ALSA which sampling
+ * rates the CS4265 currently supports.
+ *
+ * @speed_mode is the corresponding bit pattern to be written to the
+ * MODE bits of the Mode Control Register
+ *
+ * @mclk is the corresponding bit pattern to be wirten to the MCLK bits of
+ * the Mode Control Register.
+ *
+ * In situations where a single ratio is represented by multiple speed
+ * modes, we favor the slowest speed.  E.g, for a ratio of 128, we pick
+ * double-speed instead of quad-speed.  However, the CS4265 errata states
+ * that divide-By-1.5 can cause failures, so we avoid that mode where
+ * possible.
+ *
+ * Errata: There is an errata for the CS4265 where divide-by-1.5 does not
+ * work if Vd is 3.3V.  If this effects you, select the
+ * CONFIG_SND_SOC_CS4265_VD33_ERRATA Kconfig option, and the driver will
+ * never select any sample rates that require divide-by-1.5.
+ */
+struct cs4265_mode_ratios {
+	unsigned int ratio;
+	u8 speed_mode;
+	u8 mclk;
+};
+
+static struct cs4265_mode_ratios cs4265_mode_ratios[] = {
+	{64, CS4265_ADCCTL_4X, CS4265_MCLK_DIV1},
+	{96, CS4265_ADCCTL_4X, CS4265_MCLK_DIV15},
+	{128, CS4265_ADCCTL_2X, CS4265_MCLK_DIV1},
+	{192, CS4265_ADCCTL_4X, CS4265_MCLK_DIV3},
+	{256, CS4265_ADCCTL_1X, CS4265_MCLK_DIV1},
+	{384, CS4265_ADCCTL_2X, CS4265_MCLK_DIV3},
+	{512, CS4265_ADCCTL_1X, CS4265_MCLK_DIV2},
+	{768, CS4265_ADCCTL_1X, CS4265_MCLK_DIV3},
+	{1024, CS4265_ADCCTL_1X, CS4265_MCLK_DIV4}
+};
+
+/* The number of MCLK/LRCK ratios supported by the CS4265 */
+#define NUM_MCLK_RATIOS		ARRAY_SIZE(cs4265_mode_ratios)
+
+/**
+ * cs4265_set_dai_sysclk - determine the CS4265 samples rates.
+ * @codec_dai: the codec DAI
+ * @clk_id: the clock ID (ignored)
+ * @freq: the MCLK input frequency
+ * @dir: the clock direction (ignored)
+ *
+ * This function is used to tell the codec driver what the input MCLK
+ * frequency is.
+ *
+ * The value of MCLK is used to determine which sample rates are supported
+ * by the CS4265.  The ratio of MCLK / Fs must be equal to one of nine
+ * supported values - 64, 96, 128, 192, 256, 384, 512, 768, and 1024.
+ *
+ * This function calculates the nine ratios and determines which ones match
+ * a standard sample rate.  If there's a match, then it is added to the list
+ * of supported sample rates.
+ *
+ * This function must be called by the machine driver's 'startup' function,
+ * otherwise the list of supported sample rates will not be available in
+ * time for ALSA.
+ */
+static int cs4265_set_dai_sysclk(struct snd_soc_dai *codec_dai,
+				 int clk_id, unsigned int freq, int dir)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	struct cs4265_private *cs4265 = codec->private_data;
+	unsigned int rates = 0;
+	unsigned int rate_min = -1;
+	unsigned int rate_max = 0;
+	unsigned int i;
+
+	cs4265->mclk = freq;
+
+	for (i = 0; i < NUM_MCLK_RATIOS; i++) {
+		unsigned int rate = freq / cs4265_mode_ratios[i].ratio;
+		rates |= snd_pcm_rate_to_rate_bit(rate);
+		if (rate < rate_min)
+			rate_min = rate;
+		if (rate > rate_max)
+			rate_max = rate;
+	}
+	/* FIXME: soc should support a rate list */
+	rates &= ~SNDRV_PCM_RATE_KNOT;
+
+	if (!rates) {
+		dev_err(codec->dev, "could not find a valid sample rate\n");
+		return -EINVAL;
+	}
+
+	codec_dai->playback.rates = rates;
+	codec_dai->playback.rate_min = rate_min;
+	codec_dai->playback.rate_max = rate_max;
+
+	codec_dai->capture.rates = rates;
+	codec_dai->capture.rate_min = rate_min;
+	codec_dai->capture.rate_max = rate_max;
+
+	return 0;
+}
+
+/**
+ * cs4265_set_dai_fmt - configure the codec for the selected audio format
+ * @codec_dai: the codec DAI
+ * @format: a SND_SOC_DAIFMT_x value indicating the data format
+ *
+ * This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the
+ * codec accordingly.
+ *
+ * Currently, this function only supports SND_SOC_DAIFMT_I2S and
+ * SND_SOC_DAIFMT_LEFT_J.  The CS4265 codec also supports right-justified
+ * data for playback only, but ASoC currently does not support different
+ * formats for playback vs. record.
+ */
+static int cs4265_set_dai_fmt(struct snd_soc_dai *codec_dai,
+			      unsigned int format)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	struct cs4265_private *cs4265 = codec->private_data;
+	int ret = 0;
+
+	/* set DAI format */
+	switch (format & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+	case SND_SOC_DAIFMT_LEFT_J:
+		cs4265->mode = format & SND_SOC_DAIFMT_FORMAT_MASK;
+		break;
+	default:
+		dev_err(codec->dev, "invalid dai format\n");
+		ret = -EINVAL;
+	}
+
+	/* set master/slave audio interface */
+	switch (format & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		cs4265->slave_mode = 1;
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		cs4265->slave_mode = 0;
+		break;
+	default:
+		/* all other modes are unsupported by the hardware */
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+/**
+ * cs4265_fill_cache - pre-fill the CS4265 register cache.
+ * @codec: the codec for this CS4265
+ *
+ * This function fills in the CS4265 register cache by reading the register
+ * values from the hardware.
+ *
+ * This CS4265 registers are cached to avoid excessive I2C I/O operations.
+ * After the initial read to pre-fill the cache, the CS4265 never updates
+ * the register values, so we won't have a cache coherency problem.
+ *
+ * We use the auto-increment feature of the CS4265 to read all registers in
+ * one shot.
+ */
+static int cs4265_fill_cache(struct snd_soc_codec *codec)
+{
+	u8 *cache = codec->reg_cache;
+	struct i2c_client *i2c_client = codec->control_data;
+	s32 length;
+
+	length = i2c_smbus_read_i2c_block_data(i2c_client,
+		CS4265_FIRSTREG, CS4265_NUMREGS, cache);
+
+	if (length != CS4265_NUMREGS) {
+		dev_err(codec->dev, "i2c read failure, addr=0x%x\n",
+		       i2c_client->addr);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+/**
+ * cs4265_read_reg_cache - read from the CS4265 register cache.
+ * @codec: the codec for this CS4265
+ * @reg: the register to read
+ *
+ * This function returns the value for a given register.  It reads only from
+ * the register cache, not the hardware itself.
+ *
+ * This CS4265 registers are cached to avoid excessive I2C I/O operations.
+ * After the initial read to pre-fill the cache, the CS4265 never updates
+ * the register values, so we won't have a cache coherency problem.
+ */
+static unsigned int cs4265_read_reg_cache(struct snd_soc_codec *codec,
+	unsigned int reg)
+{
+	u8 *cache = codec->reg_cache;
+
+	if ((reg < CS4265_FIRSTREG) || (reg > CS4265_LASTREG))
+		return -EIO;
+
+	return cache[reg - CS4265_FIRSTREG];
+}
+
+/**
+ * cs4265_i2c_write - write to a CS4265 register via the I2C bus.
+ * @codec: the codec for this CS4265
+ * @reg: the register to write
+ * @value: the value to write to the register
+ *
+ * This function writes the given value to the given CS4265 register, and
+ * also updates the register cache.
+ *
+ * Note that we don't use the hw_write function pointer of snd_soc_codec.
+ * That's because it's too clunky: the hw_write_t prototype does not match
+ * i2c_smbus_write_byte_data(), and it's just another layer of overhead.
+ */
+static int cs4265_i2c_write(struct snd_soc_codec *codec, unsigned int reg,
+			    unsigned int value)
+{
+	u8 *cache = codec->reg_cache;
+
+	if ((reg < CS4265_FIRSTREG) || (reg > CS4265_LASTREG))
+		return -EIO;
+
+	/* Only perform an I2C operation if the new value is different */
+	if (cache[reg - CS4265_FIRSTREG] != value) {
+		struct i2c_client *client = codec->control_data;
+		if (i2c_smbus_write_byte_data(client, reg, value)) {
+			dev_err(codec->dev, "i2c write failed\n");
+			return -EIO;
+		}
+
+		/* We've written to the hardware, so update the cache */
+		cache[reg - CS4265_FIRSTREG] = value;
+	}
+
+	return 0;
+}
+
+/**
+ * cs4265_hw_params - program the CS4265 with the given hardware parameters.
+ * @substream: the audio stream
+ * @params: the hardware parameters to set
+ * @dai: the SOC DAI (ignored)
+ *
+ * This function programs the hardware with the values provided.
+ * Specifically, the sample rate and the data format.
+ *
+ * The .ops functions are used to provide board-specific data, like input
+ * frequencies, to this driver.  This function takes that information,
+ * combines it with the hardware parameters provided, and programs the
+ * hardware accordingly.
+ */
+static int cs4265_hw_params(struct snd_pcm_substream *substream,
+			    struct snd_pcm_hw_params *params,
+			    struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_device *socdev = rtd->socdev;
+	struct snd_soc_codec *codec = socdev->card->codec;
+	struct cs4265_private *cs4265 = codec->private_data;
+	struct i2c_client *client = codec->control_data;
+	int ret;
+	unsigned int i;
+	unsigned int rate;
+	unsigned int ratio;
+	unsigned int bits = params->msbits;
+	int reg;
+	unsigned char buf[10];
+
+	/* Figure out which MCLK/LRCK ratio to use */
+
+	rate = params_rate(params);	/* Sampling rate, in Hz */
+	ratio = cs4265->mclk / rate;	/* MCLK/LRCK ratio */
+
+	for (i = 0; i < NUM_MCLK_RATIOS; i++) {
+		if (cs4265_mode_ratios[i].ratio == ratio)
+			break;
+	}
+
+	if (i == NUM_MCLK_RATIOS) {
+		/* We did not find a matching ratio */
+		dev_err(codec->dev, "could not find matching ratio\n");
+		return -EINVAL;
+	}
+
+	/* Set the sample rate and DAI format */
+
+	reg = snd_soc_read(codec, CS4265_MCLK);
+	reg &= ~CS4265_MCLK_DIV_MASK;
+	reg |= cs4265_mode_ratios[i].mclk;
+
+	ret = snd_soc_write(codec, CS4265_MCLK, reg);
+	if (ret < 0) {
+		dev_err(codec->dev, "i2c write failed\n");
+		return ret;
+	}
+
+	reg = snd_soc_read(codec, CS4265_ADCCTL);
+	reg &= ~(CS4265_ADCCTL_SPEED_MASK | CS4265_ADCCTL_MASK);
+	reg |= cs4265_mode_ratios[i].mclk;
+
+	if (cs4265->slave_mode) {
+		reg &= ~CS4265_ADCCTL_MASTER;
+	} else {
+		reg |= CS4265_ADCCTL_MASTER;
+		reg |= cs4265_mode_ratios[i].speed_mode;
+	}
+
+	switch (cs4265->mode) {
+	case SND_SOC_DAIFMT_I2S:
+		reg |= CS4265_ADCCTL_I2S;
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:
+		reg |= CS4265_ADCCTL_LJ;
+		break;
+	default:
+		dev_err(codec->dev, "unknown dai format\n");
+		return -EINVAL;
+	}
+
+	ret = snd_soc_write(codec, CS4265_ADCCTL, reg);
+	if (ret < 0) {
+		dev_err(codec->dev, "i2c write failed\n");
+		return ret;
+	}
+
+	reg = snd_soc_read(codec, CS4265_DACCTL);
+	reg &= ~CS4265_DACCTL_MASK;
+
+	switch (cs4265->mode) {
+	case SND_SOC_DAIFMT_I2S:
+		reg |= CS4265_DACCTL_I2S;
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:
+		reg |= CS4265_DACCTL_LJ;
+		break;
+	default:
+		dev_err(codec->dev, "unknown dai format\n");
+		return -EINVAL;
+	}
+
+	ret = snd_soc_write(codec, CS4265_DACCTL, reg);
+	if (ret < 0) {
+		dev_err(codec->dev, "i2c write failed\n");
+	}
+
+	/* Set S/PDIF channel status data */
+
+	cs4265->channel_status[3] |= IEC958_AES3_CON_CLOCK_VARIABLE;
+	cs4265->channel_status[3] &= ~IEC958_AES3_CON_FS;
+	switch (rate) {
+	case 22050:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_22050;
+		break;
+	case 24000:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_24000;
+		break;
+	case 32000:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_32000;
+		break;
+	case 44100:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_44100;
+		break;
+	case 48000:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_48000;
+		break;
+	case 88200:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_88200;
+		break;
+	case 96000:
+		cs4265->channel_status[3] |= IEC958_AES3_CON_FS_96000;
+		break;
+	default:
+		dev_err(codec->dev, "unsupported S/PDIF frequency\n");
+		return -EINVAL;
+	}
+
+	cs4265->channel_status[4] &= ~IEC958_AES4_CON_WORDLEN;
+	if (bits > 20) {
+		cs4265->channel_status[4] |= IEC958_AES4_CON_MAX_WORDLEN_24;
+		bits -= 4;
+	} else {
+		cs4265->channel_status[4] &= ~IEC958_AES4_CON_MAX_WORDLEN_24;
+	}
+	switch (bits) {
+	case 16:
+		cs4265->channel_status[4] |= IEC958_AES4_CON_WORDLEN_20_16;
+		break;
+	case 17:
+		cs4265->channel_status[4] |= IEC958_AES4_CON_WORDLEN_21_17;
+		break;
+	case 18:
+		cs4265->channel_status[4] |= IEC958_AES4_CON_WORDLEN_22_18;
+		break;
+	case 19:
+		cs4265->channel_status[4] |= IEC958_AES4_CON_WORDLEN_23_19;
+		break;
+	case 20:
+		cs4265->channel_status[4] |= IEC958_AES4_CON_WORDLEN_24_20;
+		break;
+	default:
+		dev_err(codec->dev, "unsupported S/PDIF bit length\n");
+		return -EINVAL;
+	}
+
+	/* Prepare channel status data for writing */
+
+	cs4265->channel_status[2] &= ~IEC958_AES2_CON_CHANNEL;
+	cs4265->channel_status[2] |= (1<<4); // Channel A
+
+	for (i=0; i<5; i++)
+		buf[2*i] = cs4265->channel_status[i];
+
+	cs4265->channel_status[2] &= ~IEC958_AES2_CON_CHANNEL;
+	cs4265->channel_status[2] |= (1<<4); // Channel B
+
+	for (i=0; i<5; i++)
+		buf[2*i+1] = cs4265->channel_status[i];
+
+	/* Write channel status data to E register */
+
+	reg = snd_soc_read(codec, CS4265_TRCTL1);
+	reg |= CS4265_TRCTL1_CAM; // Two-byte access mode
+	ret = snd_soc_write(codec, CS4265_TRCTL1, reg);
+	if (ret < 0) {
+		dev_err(codec->dev, "i2c write failed\n");
+	}
+
+	if (i2c_smbus_write_block_data(client, CS4265_C_DATA, 10, buf)) {
+		dev_err(codec->dev, "i2c write failed\n");
+		return -EIO;
+	}
+
+	/* Set DAI format and enable S/PDIF output */
+
+	reg = snd_soc_read(codec, CS4265_TRCTL2);
+	reg &= ~CS4265_TRCTL2_MASK;
+
+	switch (cs4265->mode) {
+	case SND_SOC_DAIFMT_I2S:
+		reg |= CS4265_TRCTL2_I2S;
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:
+		reg |= CS4265_TRCTL2_LJ;
+		break;
+	default:
+		dev_err(codec->dev, "unknown dai format\n");
+		return -EINVAL;
+	}
+
+	reg &= ~CS4265_TRCTL2_OFF;
+
+	ret = snd_soc_write(codec, CS4265_TRCTL2, reg);
+	if (ret < 0) {
+		dev_err(codec->dev, "i2c write failed\n");
+	}
+
+	return ret;
+}
+
+/**
+ * cs4265_dai_mute - enable/disable the CS4265 external mute
+ * @dai: the SOC DAI
+ * @mute: 0 = disable mute, 1 = enable mute
+ *
+ * This function toggles the mute bit in the MUTE register.
+ */
+static int cs4265_dai_mute(struct snd_soc_dai *dai, int mute)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct cs4265_private *cs4265 = codec->private_data;
+	int reg6;
+
+	reg6 = snd_soc_read(codec, CS4265_DACCTL);
+
+	// We only regard the manual mute function here, because we don't
+	// want to here a crackling noise everytime we play an audio file.
+	reg6 &= ~CS4265_DACCTL_MUTE;
+	reg6 |= cs4265->manual_mute;
+
+	return snd_soc_write(codec, CS4265_DACCTL, reg6);
+}
+
+/**
+ * cs4265_soc_put_mute - put callback for the 'Master Playback switch'
+ * 			 alsa control.
+ * @kcontrol: mixer control
+ * @ucontrol: control element information
+ *
+ * This function basically passes the arguments on to the generic
+ * snd_soc_put_volsw() function and saves the mute information in
+ * our private data structure. This is because we want to prevent
+ * cs4265_dai_mute() neglecting the user's decision to manually
+ * mute the codec's output.
+ *
+ * Returns 0 for success.
+ */
+static int cs4265_soc_put_mute(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	struct cs4265_private *cs4265 = codec->private_data;
+
+	cs4265->manual_mute = !ucontrol->value.integer.value[0] ? CS4265_DACCTL_MUTE : 0;
+
+	return snd_soc_put_volsw(kcontrol, ucontrol);
+}
+
+/* A list of non-DAPM controls that the CS4265 supports */
+static const struct snd_kcontrol_new cs4265_snd_controls[] = {
+	SOC_SINGLE_EXT("Master Playback Switch", CS4265_DACCTL, 2, 1, 1,
+		snd_soc_get_volsw, cs4265_soc_put_mute),
+	SOC_DOUBLE_R("Master Playback Volume",
+		CS4265_VOLA, CS4265_VOLB, 0, 0xFF, 1),
+	SOC_SINGLE("Master Capture Switch", CS4265_ADCCTL, 2, 1, 1),
+	SOC_DOUBLE_S_R("Master Capture Volume", 6,
+		CS4265_GAIN_A, CS4265_GAIN_B, 0, -24, 24),
+	SOC_SINGLE("Capture Select (0: Mic, 1: Line) Switch", CS4265_AICTL, 0, 1, 0),
+	SOC_SINGLE("De-emphasis filter", CS4265_DACCTL, 1, 1, 0),
+	SOC_SINGLE("Digital Sidetone Switch", CS4265_SIGSEL, 1, 1, 0),
+	SOC_SINGLE("Soft Ramp Switch", CS4265_DACCTL2, 7, 1, 0),
+	SOC_SINGLE("Zero Cross Switch", CS4265_DACCTL2, 6, 1, 0),
+};
+
+/*
+ * cs4265_codec - global variable to store codec for the ASoC probe function
+ *
+ * If struct i2c_driver had a private_data field, we wouldn't need to use
+ * cs4265_codec.  This is the only way to pass the codec structure from
+ * cs4265_i2c_probe() to cs4265_probe().  Unfortunately, there is no good
+ * way to synchronize these two functions.  cs4265_i2c_probe() can be called
+ * multiple times before cs4265_probe() is called even once.  So for now, we
+ * also only allow cs4265_i2c_probe() to be run once.  That means that we do
+ * not support more than one cs4265 device in the system, at least for now.
+ */
+static struct snd_soc_codec *cs4265_codec;
+
+static struct snd_soc_dai_ops cs4265_dai_ops = {
+	.hw_params	= cs4265_hw_params,
+	.set_sysclk	= cs4265_set_dai_sysclk,
+	.set_fmt	= cs4265_set_dai_fmt,
+	.digital_mute	= cs4265_dai_mute,
+};
+
+struct snd_soc_dai cs4265_dai = {
+	.name = "cs4265",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = 0,
+		.formats = CS4265_FORMATS,
+	},
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = 0,
+		.formats = CS4265_FORMATS,
+	},
+	.ops = &cs4265_dai_ops,
+};
+EXPORT_SYMBOL_GPL(cs4265_dai);
+
+/**
+ * cs4265_probe - ASoC probe function
+ * @pdev: platform device
+ *
+ * This function is called when ASoC has all the pieces it needs to
+ * instantiate a sound driver.
+ */
+static int cs4265_probe(struct platform_device *pdev)
+{
+	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
+	struct snd_soc_codec *codec = cs4265_codec;
+	int ret;
+	unsigned int reg;
+
+	/* Connect the codec to the socdev.  snd_soc_new_pcms() needs this. */
+	socdev->card->codec = codec;
+
+	/* Register PCMs */
+	ret = snd_soc_new_pcms(socdev, SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1);
+	if (ret < 0) {
+		dev_err(codec->dev, "failed to create pcms\n");
+		return ret;
+	}
+
+	/* Add the non-DAPM controls */
+	ret = snd_soc_add_controls(codec, cs4265_snd_controls,
+				ARRAY_SIZE(cs4265_snd_controls));
+	if (ret < 0) {
+		dev_err(codec->dev, "failed to add controls\n");
+		goto error_free_pcms;
+	}
+
+	/* Clear Power Down bit */
+	reg = snd_soc_read(codec, CS4265_PWRCTL);
+	reg &= ~CS4265_PWRCTL_PDN;
+	snd_soc_write(codec, CS4265_PWRCTL, reg);
+
+	return 0;
+
+error_free_pcms:
+	snd_soc_free_pcms(socdev);
+
+	return ret;
+}
+
+/**
+ * cs4265_remove - ASoC remove function
+ * @pdev: platform device
+ *
+ * This function is the counterpart to cs4265_probe().
+ */
+static int cs4265_remove(struct platform_device *pdev)
+{
+	struct snd_soc_device *socdev = platform_get_drvdata(pdev);
+
+	snd_soc_free_pcms(socdev);
+
+	return 0;
+};
+
+/**
+ * cs4265_i2c_probe - initialize the I2C interface of the CS4265
+ * @i2c_client: the I2C client object
+ * @id: the I2C device ID (ignored)
+ *
+ * This function is called whenever the I2C subsystem finds a device that
+ * matches the device ID given via a prior call to i2c_add_driver().
+ */
+static int cs4265_i2c_probe(struct i2c_client *i2c_client,
+	const struct i2c_device_id *id)
+{
+	struct snd_soc_codec *codec;
+	struct cs4265_private *cs4265;
+	unsigned int reg;
+	int ret;
+
+	/* For now, we only support one cs4265 device in the system.  See the
+	 * comment for cs4265_codec.
+	 */
+	if (cs4265_codec) {
+		dev_err(&i2c_client->dev, "ignoring CS4265 at addr %X\n",
+		       i2c_client->addr);
+		dev_err(&i2c_client->dev, "only one per board allowed\n");
+		/* Should we return something other than ENODEV here? */
+		return -ENODEV;
+	}
+
+	/* Verify that we have a CS4265 */
+
+	ret = i2c_smbus_read_byte_data(i2c_client, CS4265_CHIPID);
+	if (ret < 0) {
+		dev_err(&i2c_client->dev, "failed to read i2c at addr %X\n",
+		       i2c_client->addr);
+		return ret;
+	}
+	/* The top four bits of the chip ID should be 1101. */
+	if ((ret & 0xF0) != 0xD0) {
+		dev_err(&i2c_client->dev, "device at addr %X is not a CS4265\n",
+		       i2c_client->addr);
+		return -ENODEV;
+	}
+
+	dev_info(&i2c_client->dev, "found device at i2c address %X\n",
+		i2c_client->addr);
+	dev_info(&i2c_client->dev, "hardware revision %X\n", ret & 0xF);
+
+	/* Allocate enough space for the snd_soc_codec structure
+	   and our private data together. */
+	cs4265 = kzalloc(sizeof(struct cs4265_private), GFP_KERNEL);
+	if (!cs4265) {
+		dev_err(&i2c_client->dev, "could not allocate codec\n");
+		return -ENOMEM;
+	}
+
+	/* Set S/PDIF channel data */
+	cs4265->channel_status[0] |= IEC958_AES0_CON_NOT_COPYRIGHT;
+
+	codec = &cs4265->codec;
+
+	mutex_init(&codec->mutex);
+	INIT_LIST_HEAD(&codec->dapm_widgets);
+	INIT_LIST_HEAD(&codec->dapm_paths);
+
+	codec->dev = &i2c_client->dev;
+	codec->name = "CS4265";
+	codec->owner = THIS_MODULE;
+	codec->dai = &cs4265_dai;
+	codec->num_dai = 1;
+	codec->private_data = cs4265;
+	codec->control_data = i2c_client;
+	codec->read = cs4265_read_reg_cache;
+	codec->write = cs4265_i2c_write;
+	codec->reg_cache = cs4265->reg_cache;
+	codec->reg_cache_size = CS4265_NUMREGS;
+
+	/* The I2C interface is set up, so pre-fill our register cache */
+
+	ret = cs4265_fill_cache(codec);
+	if (ret < 0) {
+		dev_err(&i2c_client->dev, "failed to fill register cache\n");
+		goto error_free_codec;
+	}
+
+	/* Disable automatic volume control.  The hardware enables, and it
+	 * causes volume change commands to be delayed, sometimes until after
+	 * playback has started.  An application (e.g. alsactl) can
+	 * re-enabled it by using the controls.
+	 */
+
+	reg = cs4265_read_reg_cache(codec, CS4265_DACCTL2);
+	reg &= ~(CS4265_DACCTL2_SOFT | CS4265_DACCTL2_ZERO);
+	ret = cs4265_i2c_write(codec, CS4265_DACCTL2, reg);
+	if (ret < 0) {
+		dev_err(&i2c_client->dev, "i2c write failed\n");
+		return ret;
+	}
+
+	/* Disable S/PDIF transmitter. Will be enabled when HW params
+	 * are installed.
+	 */
+	reg = cs4265_read_reg_cache(codec, CS4265_TRCTL2);
+	reg |= CS4265_TRCTL2_OFF;
+	ret = cs4265_i2c_write(codec, CS4265_TRCTL2, reg);
+	if (ret < 0) {
+		dev_err(&i2c_client->dev, "i2c write failed\n");
+		return ret;
+	}
+
+	/* Initialize the DAI. Normally, we'd prefer to have a kmalloc'd DAI
+	 * structure for each CS4265 device, but the machine driver needs to
+	 * have a pointer to the DAI structure, so for now it must be a global
+	 * variable.
+	 */
+	cs4265_dai.dev = &i2c_client->dev;
+
+	/* Register the DAI.  If all the other ASoC driver have already
+	 * registered, then this will call our probe function, so
+	 * cs4265_codec needs to be ready.
+	 */
+	cs4265_codec = codec;
+	ret = snd_soc_register_dai(&cs4265_dai);
+	if (ret < 0) {
+		dev_err(&i2c_client->dev, "failed to register DAI\n");
+		goto error_free_codec;
+	}
+
+	i2c_set_clientdata(i2c_client, cs4265);
+
+	return 0;
+
+error_free_codec:
+	kfree(cs4265);
+	cs4265_codec = NULL;
+	cs4265_dai.dev = NULL;
+
+	return ret;
+}
+
+/**
+ * cs4265_i2c_remove - remove an I2C device
+ * @i2c_client: the I2C client object
+ *
+ * This function is the counterpart to cs4265_i2c_probe().
+ */
+static int cs4265_i2c_remove(struct i2c_client *i2c_client)
+{
+	struct cs4265_private *cs4265 = i2c_get_clientdata(i2c_client);
+
+	kfree(cs4265);
+	cs4265_codec = NULL;
+	cs4265_dai.dev = NULL;
+
+	return 0;
+}
+
+/*
+ * cs4265_id - I2C device IDs supported by this driver
+ */
+static struct i2c_device_id cs4265_id[] = {
+	{"cs4265", 0},
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, cs4265_id);
+
+#ifdef CONFIG_PM
+
+/* This suspend/resume implementation can handle both - a simple standby
+ * where the codec remains powered, and a full suspend, where the voltage
+ * domain the codec is connected to is teared down and/or any other hardware
+ * reset condition is asserted.
+ *
+ * The codec's own power saving features are enabled in the suspend callback,
+ * and all registers are written back to the hardware when resuming.
+ */
+
+static int cs4265_soc_suspend(struct platform_device *pdev, pm_message_t mesg)
+{
+	struct snd_soc_codec *codec = cs4265_codec;
+	int reg = snd_soc_read(codec, CS4265_PWRCTL) | CS4265_PWRCTL_PDN_ALL;
+
+	return snd_soc_write(codec, CS4265_PWRCTL, reg);
+}
+
+static int cs4265_soc_resume(struct platform_device *pdev)
+{
+	struct snd_soc_codec *codec = cs4265_codec;
+	struct i2c_client *i2c_client = codec->control_data;
+	int reg;
+
+	/* In case the device was put to hard reset during sleep, we need to
+	 * wait 500ns here before any I2C communication. */
+	ndelay(500);
+
+	/* first restore the entire register cache ... */
+	for (reg = CS4265_FIRSTREG; reg <= CS4265_LASTREG; reg++) {
+		u8 val = snd_soc_read(codec, reg);
+
+		if (i2c_smbus_write_byte_data(i2c_client, reg, val)) {
+			dev_err(codec->dev, "i2c write failed\n");
+			return -EIO;
+		}
+	}
+
+	/* ... then disable the power-down bits */
+	reg = snd_soc_read(codec, CS4265_PWRCTL);
+	reg &= ~CS4265_PWRCTL_PDN_ALL;
+
+	return snd_soc_write(codec, CS4265_PWRCTL, reg);
+}
+#else
+#define cs4265_soc_suspend	NULL
+#define cs4265_soc_resume	NULL
+#endif /* CONFIG_PM */
+
+/*
+ * cs4265_i2c_driver - I2C device identification
+ *
+ * This structure tells the I2C subsystem how to identify and support a
+ * given I2C device type.
+ */
+static struct i2c_driver cs4265_i2c_driver = {
+	.driver = {
+		.name = "cs4265",
+		.owner = THIS_MODULE,
+	},
+	.id_table = cs4265_id,
+	.probe = cs4265_i2c_probe,
+	.remove = cs4265_i2c_remove,
+};
+
+/*
+ * ASoC codec device structure
+ *
+ * Assign this variable to the codec_dev field of the machine driver's
+ * snd_soc_device structure.
+ */
+struct snd_soc_codec_device soc_codec_device_cs4265 = {
+	.probe = 	cs4265_probe,
+	.remove = 	cs4265_remove,
+	.suspend =	cs4265_soc_suspend,
+	.resume =	cs4265_soc_resume,
+};
+EXPORT_SYMBOL_GPL(soc_codec_device_cs4265);
+
+static int __init cs4265_init(void)
+{
+	pr_info("Cirrus Logic CS4265 ALSA SoC Codec Driver\n");
+
+	return i2c_add_driver(&cs4265_i2c_driver);
+}
+module_init(cs4265_init);
+
+static void __exit cs4265_exit(void)
+{
+	i2c_del_driver(&cs4265_i2c_driver);
+}
+module_exit(cs4265_exit);
+
+MODULE_AUTHOR("Tim Jaacks <timjaacks@garz-fricke.de>");
+MODULE_DESCRIPTION("Cirrus Logic CS4265 ALSA SoC Codec Driver");
+MODULE_LICENSE("GPL");
Index: linux-2.6.33/sound/soc/codecs/cs4265.h
===================================================================
--- /dev/null
+++ linux-2.6.33/sound/soc/codecs/cs4265.h
@@ -0,0 +1,23 @@
+/*
+ * CS4265 ALSA SoC (ASoC) codec driver
+ *
+ * Author: Tim Jaacks <tim.jaacks@garz-fricke.com>
+ */
+
+#ifndef _CS4265_H
+#define _CS4265_H
+
+/*
+ * The ASoC codec DAI structure for the CS4265.  Assign this structure to
+ * the .codec_dai field of your machine driver's snd_soc_dai_link structure.
+ */
+extern struct snd_soc_dai cs4265_dai;
+
+/*
+ * The ASoC codec device structure for the CS4265.  Assign this structure
+ * to the .codec_dev field of your machine driver's snd_soc_device
+ * structure.
+ */
+extern struct snd_soc_codec_device soc_codec_device_cs4265;
+
+#endif
Index: linux-2.6.33/sound/soc/codecs/Kconfig
===================================================================
--- linux-2.6.33.orig/sound/soc/codecs/Kconfig
+++ linux-2.6.33/sound/soc/codecs/Kconfig
@@ -21,6 +21,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_AK4535 if I2C
 	select SND_SOC_AK4642 if I2C
 	select SND_SOC_AK4671 if I2C
+	select SND_SOC_CS4265 if I2C
 	select SND_SOC_CS4270 if I2C
 	select SND_SOC_MAX9877 if I2C
 	select SND_SOC_PCM3008
@@ -108,6 +109,10 @@ config SND_SOC_AK4642
 config SND_SOC_AK4671
 	tristate
 
+# Cirrus Logic CS4265 Codec
+config SND_SOC_CS4265
+	tristate
+
 # Cirrus Logic CS4270 Codec
 config SND_SOC_CS4270
 	tristate
Index: linux-2.6.33/sound/soc/codecs/Makefile
===================================================================
--- linux-2.6.33.orig/sound/soc/codecs/Makefile
+++ linux-2.6.33/sound/soc/codecs/Makefile
@@ -8,6 +8,7 @@ snd-soc-ak4104-objs := ak4104.o
 snd-soc-ak4535-objs := ak4535.o
 snd-soc-ak4642-objs := ak4642.o
 snd-soc-ak4671-objs := ak4671.o
+snd-soc-cs4265-objs := cs4265.o
 snd-soc-cs4270-objs := cs4270.o
 snd-soc-cx20442-objs := cx20442.o
 snd-soc-l3-objs := l3.o
@@ -64,6 +65,7 @@ obj-$(CONFIG_SND_SOC_AK4104)	+= snd-soc-
 obj-$(CONFIG_SND_SOC_AK4535)	+= snd-soc-ak4535.o
 obj-$(CONFIG_SND_SOC_AK4642)	+= snd-soc-ak4642.o
 obj-$(CONFIG_SND_SOC_AK4671)	+= snd-soc-ak4671.o
+obj-$(CONFIG_SND_SOC_CS4265)	+= snd-soc-cs4265.o
 obj-$(CONFIG_SND_SOC_CS4270)	+= snd-soc-cs4270.o
 obj-$(CONFIG_SND_SOC_CX20442)	+= snd-soc-cx20442.o
 obj-$(CONFIG_SND_SOC_L3)	+= snd-soc-l3.o
Index: linux-2.6.33/include/sound/soc.h
===================================================================
--- linux-2.6.33.orig/include/sound/soc.h
+++ linux-2.6.33/include/sound/soc.h
@@ -80,6 +80,13 @@
 	.private_value = (unsigned long)&(struct soc_mixer_control) \
 		{.reg = reg_left, .rreg = reg_right, .shift = xshift, \
 		.max = xmax, .invert = xinvert} }
+#define SOC_DOUBLE_S_R(xname, xbits, reg_left, reg_right, xshift, xmin, xmax) \
+{	.iface  = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
+	.info   = snd_soc_info_volsw_s_2r, .get = snd_soc_get_volsw_s_2r, \
+	.put    = snd_soc_put_volsw_s_2r, \
+	.private_value = (unsigned long)&(struct soc_mixer_control) \
+		{.reg = reg_left, .rreg = reg_right, .shift = xshift, \
+		.min = xmin, .max = xmax, .bits = xbits} }
 #define SOC_DOUBLE_S8_TLV(xname, xreg, xmin, xmax, tlv_array) \
 {	.iface  = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
 	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
@@ -300,6 +307,12 @@ int snd_soc_get_volsw_s8(struct snd_kcon
 	struct snd_ctl_elem_value *ucontrol);
 int snd_soc_put_volsw_s8(struct snd_kcontrol *kcontrol,
 	struct snd_ctl_elem_value *ucontrol);
+int snd_soc_info_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_info *uinfo);
+int snd_soc_get_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol);
+int snd_soc_put_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol);
 
 /**
  * struct snd_soc_jack_pin - Describes a pin to update based on jack detection
@@ -527,7 +540,7 @@ struct snd_soc_pcm_runtime {
 /* mixer control */
 struct soc_mixer_control {
 	int min, max;
-	unsigned int reg, rreg, shift, rshift, invert;
+	unsigned int reg, rreg, shift, rshift, invert, bits;
 };
 
 /* enumerated kcontrol */
Index: linux-2.6.33/sound/soc/soc-core.c
===================================================================
--- linux-2.6.33.orig/sound/soc/soc-core.c
+++ linux-2.6.33/sound/soc/soc-core.c
@@ -2147,6 +2147,114 @@ int snd_soc_put_volsw_s8(struct snd_kcon
 EXPORT_SYMBOL_GPL(snd_soc_put_volsw_s8);
 
 /**
+ * snd_soc_info_volsw_s_2r - signed mixer info callback
+ * @kcontrol: mixer control
+ * @uinfo: control element information
+ *
+ * Callback to provide information about a double signed mixer control
+ * that spans 2 codec registers.
+ *
+ * Returns 0 for success.
+ */
+int snd_soc_info_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_info *uinfo)
+{
+	struct soc_mixer_control *mc =
+		(struct soc_mixer_control *)kcontrol->private_value;
+	int max = mc->max;
+	int min = mc->min;
+
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 2;
+	uinfo->value.integer.min = min;
+	uinfo->value.integer.max = max;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snd_soc_info_volsw_s_2r);
+
+/**
+ * snd_soc_get_volsw_s_2r - signed mixer get callback
+ * @kcontrol: mixer control
+ * @ucontrol: control element information
+ *
+ * Callback to get the value of a double mixer control that spans 2 registers.
+ *
+ * Returns 0 for success.
+ */
+int snd_soc_get_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct soc_mixer_control *mc =
+		(struct soc_mixer_control *)kcontrol->private_value;
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	unsigned int reg1 = mc->reg;
+	unsigned int reg2 = mc->rreg;
+	unsigned int shift = mc->shift;
+	int bits = mc->bits;
+	int val1, val2;
+
+	val1 = (snd_soc_read(codec, reg1) >> shift) & ((1<<bits)-1);;
+	val2 = (snd_soc_read(codec, reg2) >> shift) & ((1<<bits)-1);;
+
+	ucontrol->value.integer.value[0] =
+		((signed char)(val1 << (8-bits))) >> (8-bits);
+	ucontrol->value.integer.value[1] =
+		((signed char)(val2 << (8-bits))) >> (8-bits);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(snd_soc_get_volsw_s_2r);
+
+/**
+ * snd_soc_put_volsw_s_2r - signed mixer put callback
+ * @kcontrol: mixer control
+ * @ucontrol: control element information
+ *
+ * Callback to set the value of a double mixer control that spans 2 registers.
+ *
+ * Returns 0 for success.
+ */
+int snd_soc_put_volsw_s_2r(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct soc_mixer_control *mc =
+		(struct soc_mixer_control *)kcontrol->private_value;
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	unsigned int reg1 = mc->reg;
+	unsigned int reg2 = mc->rreg;
+	unsigned int shift = mc->shift;
+	int min = mc->min;
+	int max = mc->max;
+	int bits = mc->bits;
+	unsigned int mask = ((1<<bits)-1) << shift;
+	int val1 = ucontrol->value.integer.value[0];
+	int val2 = ucontrol->value.integer.value[1];
+	unsigned int uval1, uval2;
+	int err;
+
+	if (val1 < min) {
+		val1 = min;
+	} else if (val1 > max) {
+		val1 = max;
+	}
+	if (val2 < min) {
+		val2 = min;
+	} else if (val2 > max) {
+		val2 = max;
+	}
+
+	uval1 = (val1 << (sizeof(int)*8-bits)) >> (sizeof(int)*8-bits);
+	uval2 = (val2 << (sizeof(int)*8-bits)) >> (sizeof(int)*8-bits);
+
+	err = snd_soc_update_bits_locked(codec, reg1, mask, uval1 << shift);
+	if (err < 0)
+		return err;
+
+	err = snd_soc_update_bits_locked(codec, reg2, mask, uval2 << shift);
+	return err;
+}
+EXPORT_SYMBOL_GPL(snd_soc_put_volsw_s_2r);
+
+/**
  * snd_soc_dai_set_sysclk - configure DAI system or master clock.
  * @dai: DAI
  * @clk_id: DAI specific clock ID
