From de555a772e58d74f8e2f2b964d72d13f7a3561db Mon Sep 17 00:00:00 2001
From: Robert Schwebel <r.schwebel@pengutronix.de>
Date: Mon, 22 Feb 2010 21:25:10 +0100
Subject: [PATCH 47/59] guf_neso: add xml configuration parser code

This patch adds the xml parser code for the NESO board.

Not intended for mainline yet.

Signed-off-by: Robert Schwebel <r.schwebel@pengutronix.de>
---
 include/linux/guf_xml_config.h |  160 +++++++++++++++++++
 lib/guf_xml_config.c           |  337 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 497 insertions(+), 0 deletions(-)
 create mode 100644 include/linux/guf_xml_config.h
 create mode 100644 lib/guf_xml_config.c

Index: linux-2.6.33/include/linux/guf_xml_config.h
===================================================================
--- /dev/null
+++ linux-2.6.33/include/linux/guf_xml_config.h
@@ -0,0 +1,176 @@
+/*
+ * guf_xml_config.h - Garz+Fricke Configuration Parser
+ *
+ * Copyright (C) 2009 Garz+Fricke
+ * Copyright (C) 2010 Robert Schwebel <kernel@pengutronix.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+ * MA 02110-1301 USA
+ */
+
+#ifndef GUF_XML_CONFIG_H
+#define GUF_XML_CONFIG_H
+
+#include <linux/ezxml.h>
+#include <linux/socket.h>
+#include <linux/types.h>
+
+/*
+ * Display types:
+ *
+ * TEST: only used to test XML display configuration data
+ * SDC : synchronous display controller
+ * ADC : asynchronous display controller (currently not supported)
+ */
+#define DISPLAY_TYPE_TEST 0
+#define DISPLAY_TYPE_SDC 1
+#define DISPLAY_TYPE_ADC 2
+
+/* kind of display device (currently on DEVICE is supported) */
+#define MODE_ID_DEVICE 0
+#define MODE_ID_NTSC 1
+#define MODE_ID_PAL 2
+#define MODE_ID_NONE 3
+
+/* pixel format for Display Interface (DI) (YUV422 is currently not supported) */
+#define FORMAT_PIXEL_RGB666 0
+#define FORMAT_PIXEL_RGB565 1
+#define FORMAT_PIXEL_RGB24 2
+#define FORMAT_PIXEL_YUV422 3
+
+/* allowed values for the <rotation> tag */
+#define ROTATION_0 0
+#define ROTATION_90 90
+#define ROTATION_180 180
+#define ROTATION_270 270
+
+
+
+
+/* general configuration information */
+typedef struct
+{
+	const char *name;	/* name of display configuration */
+	uint32_t vidmem_size;	/* size of the reserved video memory */
+	uint16_t xres;		/* horizontal resolution */
+	uint16_t yres;		/* vertical resolution */
+	uint8_t refresh;	/* vertical refresh rate of the display */
+	uint8_t type;		/* type of the display configuration (test, sdc, adc) */
+	const char* original_dc; /* the display controller the display configuration was originally made for */
+	uint32_t pix_clk;	/* optional fixed pixel clock */
+} guf_xml_data_display_t;
+
+/* display-mode descriptor */
+typedef struct
+{
+	uint8_t	id;		/* kind of connected display (Device, NTSC, PAL) */
+	uint8_t	custom_panel;	/* Custom or hard-coded settings */
+	uint8_t	panel_type;	/* Hard-coded display configuration */
+} guf_xml_data_mode_t;
+
+/* display-format descriptor */
+typedef struct
+{
+	uint8_t	depth;		/* bit-depth of the graphics mode */
+	uint8_t	video_depth;	/* pixel depth for video plane */
+	uint8_t	pixelformat;	/* pixel-format of the display */
+	uint8_t	egpeformat;	/* pixel format for Windows-CE (for compatibility) */
+} guf_xml_data_format_t;
+
+/* orientation descriptor */
+typedef struct
+{
+	uint16_t angle;		/* angle of rotation (0, 90, 180, or 270) */
+} guf_xml_data_rotation_t;
+
+/* brightness level of the backlight */
+typedef struct
+{
+	uint8_t level_ac;	/* level on AC-power */
+	uint8_t level_battery;	/* level on battery power */
+	uint16_t *lut;		/* level look-up table */
+} guf_xml_data_backlight_t;
+
+/* descriptor for HSYNC, VSYNC signals */
+typedef struct
+{
+	uint16_t width;		/* width of synchronization signal */
+	uint16_t start_width;	/* synchronization start */
+	uint16_t end_width;	/* synchronization end */
+	uint8_t polarity;	/* polarity of the signal */
+} guf_xml_data_sync_t;
+
+/* descriptor for the display clock signal */
+typedef struct
+{
+	uint8_t	idle_enable;	/* enable clock during VSYNC */
+	uint8_t	select_enable;	/* disable clock when no data output */
+	uint8_t	polarity;	/* polarity of clock signal */
+} guf_xml_data_clock_t;
+
+/* descriptor for misc.-stuff */
+typedef struct
+{
+	uint8_t	mask_enable;	/* mask data output */
+	uint8_t	polarity;	/* polarity of data signals */
+	uint8_t	oe_polarity;	/* polarity of output-enable signals */
+} guf_xml_data_data_t;
+
+/* power-sequence desriptor (all times in milliseconds) */
+typedef struct
+{
+	int16_t	poweron_to_signalon;		/* time from LCD-on to signal on */
+	int16_t	poweron_to_backlighton;		/* time from LCD-on to backlight on */
+	int16_t	backlightoff_before_poweroff;	/* req. time to turn-off backlight before LCD-off */
+	int16_t	signaloff_before_poweroff;	/* req. time to turn-off signal before LCD-off */
+	int16_t	poweroff_to_poweron;		/* req. time display must remain off before powering it on again */
+} guf_xml_data_powerseq_t;
+
+/* touch type */
+typedef enum
+{
+	TOUCH_NONE = -1,
+	TOUCH_UCB1400 = 0,
+	TOUCH_IMX_ADC,
+	TOUCH_DA9052,
+	TOUCH_PINNACLE,
+	TOUCH_EDT_FT5X06,
+} guf_xml_data_touch_t;
+
+/* root descriptor of the display configuration */
+typedef struct
+{
+	struct sockaddr mac_addr;
+	guf_xml_data_display_t display;
+	guf_xml_data_mode_t mode;
+	guf_xml_data_format_t format;
+	guf_xml_data_rotation_t rotation;
+	guf_xml_data_backlight_t backlight;
+	guf_xml_data_sync_t hsync;
+	guf_xml_data_sync_t vsync;
+	guf_xml_data_clock_t clock;
+	guf_xml_data_data_t data;
+	guf_xml_data_powerseq_t powerseq;
+	guf_xml_data_touch_t touch;
+} guf_xml_data_private_t;
+
+extern struct ezxml* xml_find_setting(struct ezxml *xml_variable, const char* setting);
+extern struct ezxml* guf_get_config(char* string);
+extern void guf_free_config(struct ezxml *xml_cfg);
+extern int get_machine_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t *config);
+extern int get_display_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t *config);
+extern int get_touch_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t *config);
+
+#endif
Index: linux-2.6.33/lib/guf_xml_config.c
===================================================================
--- /dev/null
+++ linux-2.6.33/lib/guf_xml_config.c
@@ -0,0 +1,405 @@
+/*
+ * ezxml - xml parser from eCos
+ *
+ * Copyright (C) 2004-2006 Aaron Voisine <aaron@voisine.org>
+ * Copyright (C) 2005 eCosCentric Ltd
+ * Copyright (C) 2010 Robert Schwebel <kernel@pengutronix.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+ * MA 02110-1301 USA
+ */
+
+#include <linux/guf_xml_config.h>
+#include <linux/ezxml.h>
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+#include <linux/ctype.h>
+
+/* touch names: these strings must mach the order of the
+   defined types in guf_xml_data_touch_t */
+char *guf_xml_data_touch_names[] = 
+{
+	"UCB1400",			// TOUCH_UCB1400
+	"iMX ADC",			// TOUCH_IMX_ADC
+	"DA9052",			// TOUCH_DA9052
+	"Cirque Pinnacle",	// TOUCH_PINNACLE
+	"EDT FT5x06",		// TOUCH_EDT_FT5X06
+};
+
+struct ezxml*
+xml_find_setting(struct ezxml *xml_variable, const char *setting)
+{
+	struct ezxml *xml_setting;
+
+	if (!xml_variable || !setting)
+		return NULL;
+
+	xml_setting = ezxml_child(xml_variable, "setting");
+	if (!xml_setting)
+		return NULL;
+
+	for (; xml_setting; xml_setting = ezxml_next(xml_setting)) {
+		if (ezxml_attr(xml_setting, "key")) {
+			if (!strcmp(ezxml_attr(xml_setting, "key"), setting))
+				return xml_setting;
+		}
+	}
+
+	return NULL;
+}
+
+struct ezxml*
+guf_get_config(char *string)
+{
+	struct ezxml *xml_img = NULL;
+	struct ezxml *xml_cfg = NULL;
+
+	if (!string)
+		return NULL;
+
+	if (!memcmp(string, "<?xml", 5)) {
+		xml_img = ezxml_parse_str(string, strlen(string));
+		if (!xml_img)
+			goto out_error;
+
+		xml_cfg = ezxml_child(xml_img, "variables");
+		if (!xml_cfg)
+			goto out_free;
+	}
+
+	return xml_cfg;
+
+ out_free:
+	ezxml_free(xml_img);
+
+ out_error:
+	return NULL;
+}
+
+void
+guf_free_config(struct ezxml *xml_cfg)
+{
+	if (xml_cfg && xml_cfg->parent)
+		ezxml_free(xml_cfg->parent);
+}
+
+/* Parse GuF XML from NAND */
+
+int
+get_machine_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t * config)
+{
+	char *attr, *opt = NULL;
+	struct ezxml *xml_parent = NULL;
+	int temp = 0, i = 0;
+
+	/* read the mac address */
+	xml_parent = xml_find_setting(xml_cfg, "eth0_esa_data");
+	if (xml_parent) {
+		attr = vmalloc(strlen(ezxml_attr(xml_parent, "value")));
+		strcpy(attr, ezxml_attr(xml_parent, "value"));
+		while (attr) {
+			opt = strsep(&attr, ":");
+			temp = simple_strtoul(opt, NULL, 16);
+			config->mac_addr.sa_data[i] = (unsigned char) temp;
+			i++;
+		}
+		vfree(attr);
+	} else {
+		printk("%s: No <eth0_esa_data>tag found!\n", __func__);
+		goto out;
+	}
+
+	return 0;
+
+ out:
+	return 1;
+}
+
+int
+get_display_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t * config)
+{
+	char *attr;
+	struct ezxml *xml_parent = NULL;
+	struct ezxml *xml_child = NULL;
+
+	xml_parent = ezxml_child(xml_cfg, "display");
+	if (!xml_parent) {
+		printk("%s: No display configuration found!\n", __func__);
+		goto out;
+	}
+
+	/* parse <display>-tag */
+	config->display.name = ezxml_attr(xml_parent, "name");
+	config->display.xres =
+	    simple_strtoul(ezxml_attr(xml_parent, "xres"), NULL, 0);
+	config->display.yres =
+	    simple_strtoul(ezxml_attr(xml_parent, "yres"), NULL, 0);
+	attr = (char *) ezxml_attr(xml_parent, "type");
+	if (!strcmp(attr, "SDC")) {
+		config->display.type = DISPLAY_TYPE_SDC;
+		config->display.vidmem_size =
+			simple_strtoul(ezxml_attr(xml_parent, "vidmem"), NULL, 0);
+		config->display.refresh =
+			simple_strtoul(ezxml_attr(xml_parent, "refresh"), NULL, 0);
+	} else if (!strcmp(attr, "ADC")) {
+		config->display.type = DISPLAY_TYPE_ADC;
+	} else {
+		printk("%s: Wrong display configuration: type=%s\n",
+		       __func__, attr);
+		goto out;
+	}
+	config->display.original_dc = ezxml_attr(xml_parent, "originalDC");
+	config->display.pix_clk = 0;
+	attr = (char *) ezxml_attr(xml_parent, "pix_clk");
+	if (attr != NULL)
+		config->display.pix_clk = simple_strtoul(attr, NULL, 0);
+
+	/* parse <mode>-tag */
+	xml_child = ezxml_child(xml_parent, "mode");
+	if (!xml_child) {
+		printk("%s: Wrong display configuration: No <mode> tag!\n",
+		       __func__);
+		goto out;
+	}
+	config->mode.custom_panel =
+	    simple_strtoul(ezxml_attr(xml_child, "custom_panel"), NULL, 0);
+	config->mode.panel_type =
+	    simple_strtoul(ezxml_attr(xml_child, "type"), NULL, 0);
+	attr = (char *) ezxml_attr(xml_child, "id");
+	if (!strcmp(attr, "Device")) {
+		config->mode.id = MODE_ID_DEVICE;
+	} else if (!strcmp(attr, "NTSC")) {
+		config->mode.id = MODE_ID_NTSC;
+	} else if (!strcmp(attr, "PAL")) {
+		config->mode.id = MODE_ID_PAL;
+	} else if (!strcmp(attr, "None")) {
+		config->mode.id = MODE_ID_NONE;
+	} else {
+		printk("%s: Wrong display configuration: mode=%s\n",
+		       __func__, attr);
+		goto out;
+	}
+
+	/* parse <format>-tag */
+	xml_child = ezxml_child(xml_parent, "format");
+	if (!xml_child) {
+		printk("%s: Wrong display configuration: No <format> tag!\n",
+		       __func__);
+		goto out;
+	}
+	config->format.depth =
+	    simple_strtoul(ezxml_attr(xml_child, "depth"), NULL, 0);
+	config->format.video_depth =
+	    simple_strtoul(ezxml_attr(xml_child, "video_depth"), NULL, 0);
+	config->format.egpeformat =
+	    simple_strtoul(ezxml_attr(xml_child, "EGPEFormat"), NULL, 0);
+	attr = (char *) ezxml_attr(xml_child, "format");
+	if (!strcmp(attr, "RGB666")) {
+		config->format.pixelformat = FORMAT_PIXEL_RGB666;
+	} else if (!strcmp(attr, "RGB565")) {
+		config->format.pixelformat = FORMAT_PIXEL_RGB565;
+	} else if (!strcmp(attr, "RGB24")) {
+		config->format.pixelformat = FORMAT_PIXEL_RGB24;
+	} else if (!strcmp(attr, "YUV422")) {
+		config->format.pixelformat = FORMAT_PIXEL_YUV422;
+	} else {
+		printk("%s: Wrong display configuration: format=%s\n",
+		       __func__, attr);
+		goto out;
+	}
+	/* parse <rotation>-tag */
+	xml_child = ezxml_child(xml_parent, "rotation");
+	if (!xml_child) {
+		printk("%s: Wrong display configuration: No <rotation> tag!\n",
+		       __func__);
+		goto out;
+	}
+	attr = (char *) ezxml_attr(xml_child, "value");
+	if (!strcmp(attr, "0")) {
+		config->rotation.angle = ROTATION_0;
+	} else if (!strcmp(attr, "90")) {
+		config->rotation.angle = ROTATION_90;
+	} else if (!strcmp(attr, "180")) {
+		config->rotation.angle = ROTATION_180;
+	} else if (!strcmp(attr, "270")) {
+		config->rotation.angle = ROTATION_270;
+	} else {
+		printk("%s: Wrong display configuration: rotation=%s\n",
+		       __func__, attr);
+		goto out;
+	}
+
+	/* special SDC settings */
+	if (config->display.type == DISPLAY_TYPE_SDC)
+	{
+		/* parse <backlight>-tag */
+		xml_child = ezxml_child(xml_parent, "backlight");
+		if (!xml_child) {
+			printk("%s: Wrong display configuration: No <backlight> tag!\n",
+				   __func__);
+			goto out;
+		}
+		config->backlight.level_ac =
+			simple_strtoul(ezxml_attr(xml_child, "level_ac"), NULL, 0);
+		config->backlight.level_battery =
+			simple_strtoul(ezxml_attr(xml_child, "level_battery"), NULL, 0);
+		config->backlight.lut = NULL;
+		attr = (char *) ezxml_attr(xml_child, "lut");
+		if (attr) {
+			config->backlight.lut =
+				(uint16_t *) vmalloc(256 * sizeof (uint16_t));
+			if (!config->backlight.lut) {
+				printk("%s: Wrong display configuration: Unable "
+					   "to allocate backlight LUT!\n", __func__);
+			} else {
+				int i;
+				for (i = 0; (i < 256) && (*attr); i++) {
+					config->backlight.lut[i] =
+						simple_strtoul(attr, &attr, 0);
+					while (!isdigit(*attr) && *attr)
+						attr++;
+				}
+				if (i != 256)
+					printk
+						("%s: Wrong display configuration: Backlight"
+						 " LUT incomplete!\n", __func__);
+			}
+		}
+
+		/* parse <hsync>-tag */
+		xml_child = ezxml_child(xml_parent, "hsync");
+		if (!xml_child) {
+			printk("%s: Wrong display configuration: No <hsync> tag!\n",
+				   __func__);
+			goto out;
+		}
+		config->hsync.width =
+			simple_strtoul(ezxml_attr(xml_child, "width"), NULL, 0);
+		config->hsync.start_width =
+			simple_strtoul(ezxml_attr(xml_child, "start_width"), NULL, 0);
+		config->hsync.end_width =
+			simple_strtoul(ezxml_attr(xml_child, "end_width"), NULL, 0);
+		config->hsync.polarity =
+			simple_strtoul(ezxml_attr(xml_child, "polarity"), NULL, 0);
+
+		/* parse <vsync>-tag */
+		xml_child = ezxml_child(xml_parent, "vsync");
+		if (!xml_child) {
+			printk("%s: Wrong display configuration: No <vsync> tag!\n",
+				   __func__);
+			goto out;
+		}
+		config->vsync.width =
+			simple_strtoul(ezxml_attr(xml_child, "width"), NULL, 0);
+		config->vsync.start_width =
+			simple_strtoul(ezxml_attr(xml_child, "start_width"), NULL, 0);
+		config->vsync.end_width =
+			simple_strtoul(ezxml_attr(xml_child, "end_width"), NULL, 0);
+		config->vsync.polarity =
+			simple_strtoul(ezxml_attr(xml_child, "polarity"), NULL, 0);
+
+		/* parse <clock>-tag */
+		xml_child = ezxml_child(xml_parent, "clock");
+		if (!xml_child) {
+			printk("%s: Wrong display configuration: No <clock> tag!\n",
+				   __func__);
+			goto out;
+		}
+		config->clock.idle_enable =
+			simple_strtoul(ezxml_attr(xml_child, "idle_enable"), NULL, 0);
+		config->clock.select_enable =
+			simple_strtoul(ezxml_attr(xml_child, "select_enable"), NULL, 0);
+		config->clock.polarity =
+			simple_strtoul(ezxml_attr(xml_child, "polarity"), NULL, 0);
+
+		/* parse <data>-tag */
+		xml_child = ezxml_child(xml_parent, "data");
+		if (!xml_child) {
+			printk("%s: Wrong display configuration: No <data> tag!\n",
+				   __func__);
+			goto out;
+		}
+		config->data.mask_enable =
+			simple_strtoul(ezxml_attr(xml_child, "mask_enable"), NULL, 0);
+		config->data.polarity =
+			simple_strtoul(ezxml_attr(xml_child, "polarity"), NULL, 0);
+		config->data.oe_polarity =
+			simple_strtoul(ezxml_attr(xml_child, "oe_polarity"), NULL, 0);
+
+		/* parse <power_sequence>-tag */
+		xml_child = ezxml_child(xml_parent, "power_sequence");
+		if (!xml_child) {
+			printk
+				("%s: Wrong display configuration: No <power_sequence> tag!\n",
+				 __func__);
+			goto out;
+		}
+		config->powerseq.poweron_to_signalon =
+			simple_strtol(ezxml_attr(xml_child, "PowerOnToSignalOn"), NULL, 0);
+		config->powerseq.poweron_to_backlighton =
+			simple_strtol(ezxml_attr(xml_child, "PowerOnToBacklightOn"), NULL,
+				  0);
+		config->powerseq.backlightoff_before_poweroff =
+			simple_strtol(ezxml_attr(xml_child, "BacklightOffBeforePowerOff"), NULL, 0);
+		config->powerseq.signaloff_before_poweroff =
+			simple_strtol(ezxml_attr(xml_child, "SignalOffBeforePowerOff"),
+				  NULL, 0);
+		config->powerseq.poweroff_to_poweron =
+			simple_strtol(ezxml_attr(xml_child, "PowerOffToPowerOn"), NULL, 0);
+	}
+
+	printk("%s: Using display configuration %s\n",
+	       __func__, config->display.name);
+	return 0;
+
+ out:
+	return 1;
+}
+
+int
+get_touch_configuration(struct ezxml *xml_cfg, guf_xml_data_private_t * config)
+{
+	int i;
+	char *attr;
+	struct ezxml *xml_parent = NULL;
+
+	config->touch = TOUCH_NONE;
+
+	xml_parent = ezxml_child(xml_cfg, "touch");
+	if (!xml_parent) {
+		printk("%s: No touch configuration found!\n", __func__);
+		goto out;
+	}
+
+	/* parse <touch>-tag */
+	attr = (char *) ezxml_attr(xml_parent, "name");
+	for (i=0; i<ARRAY_SIZE(guf_xml_data_touch_names); i++)
+	{
+		if (!strcmp(attr, guf_xml_data_touch_names[i]))
+			config->touch = i;
+	}
+	if (config->touch == TOUCH_NONE)
+	{
+		printk("%s: Touch configuration \"%s\" found but not supported\n",
+				__func__, attr);
+		goto out;
+	}
+
+	printk("%s: Using touch configuration %s\n",
+			__func__, guf_xml_data_touch_names[config->touch]);
+
+ out:
+	return 0;
+}
