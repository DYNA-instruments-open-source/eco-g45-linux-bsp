Index: linux-2.6.33/arch/arm/mach-mx3/devices.c
===================================================================
--- linux-2.6.33.orig/arch/arm/mach-mx3/devices.c
+++ linux-2.6.33/arch/arm/mach-mx3/devices.c
@@ -399,6 +399,10 @@ static struct resource otg_resources[] =
 		.start	= MXC_INT_USB3,
 		.end	= MXC_INT_USB3,
 		.flags	= IORESOURCE_IRQ,
+	}, {
+		.start	= MX35_OTG_BASE_ADDR + 0x600,
+		.end	= MX35_OTG_BASE_ADDR + 0x60f,
+		.flags	= IORESOURCE_MEM,
 	},
 };
 
Index: linux-2.6.33/drivers/usb/gadget/fsl_usb2_udc.h
===================================================================
--- linux-2.6.33.orig/drivers/usb/gadget/fsl_usb2_udc.h
+++ linux-2.6.33/drivers/usb/gadget/fsl_usb2_udc.h
@@ -83,6 +83,14 @@ struct usb_dr_host {
 	u32 endptctrl[6];	/* Endpoint Control Registers */
 };
 
+ /* USB control registers for both OTG and host */
+struct usb_dr_oh {
+	u32 ctrl;
+	u32 otgmirror;
+	u32 phyctrl;
+	u32 phyctrltest;
+};
+
  /* non-EHCI USB system interface registers (Big Endian) */
 struct usb_sys_interface {
 	u32 snoop1;
@@ -308,6 +316,18 @@ struct usb_sys_interface {
 #define  EPCTRL_TX_EP_TYPE_SHIFT              18
 #define  EPCTRL_RX_EP_TYPE_SHIFT              2
 
+/* UTMI phy control */
+#define  USB_UTMI_PHY_CTRL_VEND_STATUS		 0x000000FF
+#define  USB_UTMI_PHY_CTRL_VEND_DATA		 0x0000FF00
+#define  USB_UTMI_PHY_CTRL_VEND_ADDR		 0x000F0000
+#define  USB_UTMI_PHY_CTRL_VEND_LOAD		 0x00100000
+#define  USB_UTMI_PHY_CTRL_LSFE				 0x00400000
+#define  USB_UTMI_PHY_CTRL_EVDO				 0x00800000
+#define  USB_UTMI_PHY_CTRL_USBEN			 0x01000000
+#define  USB_UTMI_PHY_CTRL_RESET			 0x02000000
+#define  USB_UTMI_PHY_CTRL_SUSP				 0x04000000
+#define  USB_UTMI_PHY_CTRL_CLK_VLD			 0x08000000
+
 /* SNOOPn Register Bit Masks */
 #define  SNOOP_ADDRESS_MASK                   0xFFFFF000
 #define  SNOOP_SIZE_ZERO                      0x00	/* snooping disable */
@@ -473,6 +493,7 @@ struct fsl_udc {
 	unsigned vbus_active:1;
 	unsigned stopped:1;
 	unsigned remote_wakeup:1;
+	unsigned external_resistor:1;
 
 	struct ep_queue_head *ep_qh;	/* Endpoints Queue-Head */
 	struct fsl_req *status_req;	/* ep0 status request */
Index: linux-2.6.33/drivers/usb/gadget/fsl_udc_core.c
===================================================================
--- linux-2.6.33.orig/drivers/usb/gadget/fsl_udc_core.c
+++ linux-2.6.33/drivers/usb/gadget/fsl_udc_core.c
@@ -39,6 +39,7 @@
 #include <linux/fsl_devices.h>
 #include <linux/dmapool.h>
 #include <linux/delay.h>
+#include <linux/gfplatforms.h>
 
 #include <asm/byteorder.h>
 #include <asm/io.h>
@@ -46,6 +47,8 @@
 #include <asm/unaligned.h>
 #include <asm/dma.h>
 
+#include <mach/gfeeprom.h>
+
 #include "fsl_usb2_udc.h"
 
 #define	DRIVER_DESC	"Freescale High-Speed USB SOC Device Controller driver"
@@ -58,6 +61,7 @@ static const char driver_name[] = "fsl-u
 static const char driver_desc[] = DRIVER_DESC;
 
 static struct usb_dr_device *dr_regs;
+static struct usb_dr_oh *oh_regs;
 #ifndef CONFIG_ARCH_MXC
 static struct usb_sys_interface *usb_sys_regs;
 #endif
@@ -224,6 +228,13 @@ static int dr_controller_setup(struct fs
 		cpu_relax();
 	}
 
+	if (udc->external_resistor)
+	{
+		tmp = fsl_readl(&oh_regs->phyctrl);
+		tmp |= USB_UTMI_PHY_CTRL_EVDO;
+		fsl_writel(tmp, &oh_regs->phyctrl);
+	}
+
 	/* Set the controller as device mode */
 	tmp = fsl_readl(&dr_regs->usbmode);
 	tmp |= USB_MODE_CTRL_MODE_DEVICE;
@@ -2154,6 +2165,9 @@ static void fsl_udc_release(struct devic
 static int __init struct_udc_setup(struct fsl_udc *udc,
 		struct platform_device *pdev)
 {
+#if defined CONFIG_EEPROM_GARZ_FRICKE
+	struct gfv_hw_version_data hw_data;
+#endif
 	struct fsl_usb2_platform_data *pdata;
 	size_t size;
 
@@ -2166,6 +2180,27 @@ static int __init struct_udc_setup(struc
 		return -1;
 	}
 
+	udc->external_resistor = true;
+#if defined CONFIG_EEPROM_GARZ_FRICKE
+	if (gf_get_platform_hw_version(&hw_data))
+	{
+		if (!strcmp(hw_data.component, GF_PLATFORM_CUPID) &&
+			!strcmp(hw_data.major, GF_HW_REV_1_0_MAJOR) &&
+			(!strcmp(hw_data.minor, GF_HW_REV_1_0_MINOR) ||
+			!strcmp(hw_data.minor, GF_HW_REV_1_1_MINOR)))
+		{
+			printk(KERN_INFO "USB Device: Detected %s HW V%s.%s, using internal resistor\n",
+						hw_data.component, hw_data.major, hw_data.minor);
+			udc->external_resistor = false;
+		}
+		else
+			printk(KERN_INFO "USB Device: Detected %s HW V%s.%s, using external resistor\n",
+						hw_data.component, hw_data.major, hw_data.minor);
+	}
+	else
+		printk(KERN_INFO "USB Device: Could not detect HW platform from EEPROM, using external resistor\n");
+#endif
+
 	/* initialized QHs, take care of alignment */
 	size = udc->max_ep * sizeof(struct ep_queue_head);
 	if (size < QH_ALIGNMENT)
@@ -2241,7 +2276,7 @@ static int __init struct_ep_setup(struct
  */
 static int __init fsl_udc_probe(struct platform_device *pdev)
 {
-	struct resource *res;
+	struct resource *res1, *res2;
 	int ret = -ENODEV;
 	unsigned int i;
 	u32 dccparams;
@@ -2260,23 +2295,42 @@ static int __init fsl_udc_probe(struct p
 	spin_lock_init(&udc_controller->lock);
 	udc_controller->stopped = 1;
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res) {
+	res1 = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res1) {
 		ret = -ENXIO;
 		goto err_kfree;
 	}
 
-	if (!request_mem_region(res->start, res->end - res->start + 1,
+	if (!request_mem_region(res1->start, res1->end - res1->start + 1,
 				driver_name)) {
 		ERR("request mem region for %s failed\n", pdev->name);
 		ret = -EBUSY;
 		goto err_kfree;
 	}
 
-	dr_regs = ioremap(res->start, resource_size(res));
+	dr_regs = ioremap(res1->start, resource_size(res1));
 	if (!dr_regs) {
 		ret = -ENOMEM;
-		goto err_release_mem_region;
+		goto err_release_mem_region1;
+	}
+
+	res2 = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	if (!res2) {
+		ret = -ENXIO;
+		goto err_kfree;
+	}
+
+	if (!request_mem_region(res2->start, res2->end - res2->start + 1,
+				driver_name)) {
+		ERR("request mem region for %s failed\n", pdev->name);
+		ret = -EBUSY;
+		goto err_kfree;
+	}
+
+	oh_regs = ioremap(res2->start, resource_size(res2));
+	if (!oh_regs) {
+		ret = -ENOMEM;
+		goto err_release_mem_region2;
 	}
 
 #ifndef CONFIG_ARCH_MXC
@@ -2384,8 +2438,10 @@ err_iounmap:
 	fsl_udc_clk_release();
 err_iounmap_noclk:
 	iounmap(dr_regs);
-err_release_mem_region:
-	release_mem_region(res->start, res->end - res->start + 1);
+err_release_mem_region2:
+	release_mem_region(res2->start, res2->end - res2->start + 1);
+err_release_mem_region1:
+	release_mem_region(res1->start, res1->end - res1->start + 1);
 err_kfree:
 	kfree(udc_controller);
 	udc_controller = NULL;
@@ -2397,7 +2453,8 @@ err_kfree:
  */
 static int __exit fsl_udc_remove(struct platform_device *pdev)
 {
-	struct resource *res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	struct resource *res1 = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	struct resource *res2 = platform_get_resource(pdev, IORESOURCE_MEM, 1);
 
 	DECLARE_COMPLETION(done);
 
@@ -2418,7 +2475,8 @@ static int __exit fsl_udc_remove(struct
 	dma_pool_destroy(udc_controller->td_pool);
 	free_irq(udc_controller->irq, udc_controller);
 	iounmap(dr_regs);
-	release_mem_region(res->start, res->end - res->start + 1);
+	release_mem_region(res1->start, res1->end - res1->start + 1);
+	release_mem_region(res2->start, res2->end - res2->start + 1);
 
 	device_unregister(&udc_controller->gadget.dev);
 	/* free udc --wait for the release() finished */
Index: linux-2.6.33/arch/arm/mach-mx25/devices.c
===================================================================
--- linux-2.6.33.orig/arch/arm/mach-mx25/devices.c
+++ linux-2.6.33/arch/arm/mach-mx25/devices.c
@@ -131,6 +131,10 @@ static struct resource mxc_otg_resources
 		.start = MX25_INT_USBOTG,
 		.end = MX25_INT_USBOTG,
 		.flags = IORESOURCE_IRQ,
+	}, {
+		.start = MX25_OTG_BASE_ADDR + 0x600,
+		.end = MX25_OTG_BASE_ADDR + 0x60f,
+		.flags = IORESOURCE_MEM,
 	},
 };
 
