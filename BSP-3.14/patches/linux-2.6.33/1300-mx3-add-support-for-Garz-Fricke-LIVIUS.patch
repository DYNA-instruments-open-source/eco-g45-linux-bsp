Index: linux-2.6.33/arch/arm/mach-mx3/Kconfig
===================================================================
--- linux-2.6.33.orig/arch/arm/mach-mx3/Kconfig
+++ linux-2.6.33/arch/arm/mach-mx3/Kconfig
@@ -120,4 +120,12 @@ config MACH_GUF_CUPID
 	  Include support for Cupid platform. This includes specific
 	  configurations for the board and its peripherals.
 
+config MACH_GUF_LIVIUS
+	bool "Support Garz & Fricke Livius platform"
+	select ARCH_MX35
+	select SMSC_PHY
+	help
+	  Include support for Livius platform. This includes specific
+	  configurations for the board and its peripherals.
+
 endif
Index: linux-2.6.33/arch/arm/mach-mx3/Makefile
===================================================================
--- linux-2.6.33.orig/arch/arm/mach-mx3/Makefile
+++ linux-2.6.33/arch/arm/mach-mx3/Makefile
@@ -25,3 +25,4 @@ obj-$(CONFIG_MACH_ARMADILLO5X0) += mach-
 obj-$(CONFIG_MACH_MX35_3DS)	+= mach-mx35pdk.o
 obj-$(CONFIG_MACH_KZM_ARM11_01)	+= mach-kzm_arm11_01.o
 obj-$(CONFIG_MACH_GUF_CUPID)	+= mach-guf_cupid.o
+obj-$(CONFIG_MACH_GUF_LIVIUS)	+= mach-guf_livius.o
Index: linux-2.6.33/arch/arm/mach-mx3/mach-guf_livius.c
===================================================================
--- /dev/null
+++ linux-2.6.33/arch/arm/mach-mx3/mach-guf_livius.c
@@ -0,0 +1,442 @@
+/*
+ * Copyright 2010 Garz & Fricke GmbH All Rights Reserved.
+ *
+ * Author: Tim Jaacks <tim.jaacks@garz-fricke.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301 USA
+ */
+
+#include <linux/delay.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/memory.h>
+#include <linux/gpio.h>
+#include <linux/fsl_devices.h>
+#include <linux/mtd/mtd.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/i2c.h>
+#include <linux/i2c/at24.h>
+#include <linux/fsl_devices.h>
+
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/time.h>
+#include <asm/mach/map.h>
+
+#include <mach/hardware.h>
+#include <mach/common.h>
+#include <mach/imx-uart.h>
+#include <mach/iomux-mx35.h>
+#include <mach/mxc_nand.h>
+#include <mach/i2c.h>
+#include <mach/gfeeprom.h>
+#include <mach/mxc_ehci.h>
+#include <mach/esdhc.h>
+
+#include <linux/ezxml.h>
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+#include <linux/guf_xml_config.h>
+#include <linux/guf_board_common.h>
+
+#include "devices.h"
+
+#define MINIMUM_REDBOOT_VERSION "1.16r2757"
+
+static guf_xml_data_private_t config;
+
+
+/******************************************************************************/
+/* GPIO DEFINES                                                               */
+/******************************************************************************/
+/* UART */
+#define UART_PWR_EN (0 * 32 + 19)
+
+/* USB */
+#define USBH_PWR	(1 * 32 + 26)
+
+/* GPIOs */
+#define DIG_IN1		(0 * 32 + 0)
+#define DIG_IN2		(0 * 32 + 1)
+#define DIG_IN3		(0 * 32 + 2)
+#define DIG_IN4		(0 * 32 + 3)
+#define DIG_OUT1	(0 * 32 + 4)
+#define DIG_OUT2	(0 * 32 + 5)
+#define DIG_OUT3	(1 * 32 + 3)
+#define DIG_OUT4	(1 * 32 + 15)
+
+
+/******************************************************************************/
+/* PIN MULTIPLEXING                                                           */
+/******************************************************************************/
+static struct pad_desc guf_livius_pads[] = {
+	/* UART1 */
+	MX35_PAD_CTS1__UART1_CTS,
+	MX35_PAD_RTS1__UART1_RTS,
+	MX35_PAD_TXD1__UART1_TXD_MUX,
+	MX35_PAD_RXD1__UART1_RXD_MUX,
+	MX35_PAD_CSPI1_SS1__GPIO1_19,
+
+	/* FEC */
+	MX35_PAD_FEC_TX_CLK__FEC_TX_CLK,
+	MX35_PAD_FEC_RX_CLK__FEC_RX_CLK,
+	MX35_PAD_FEC_RX_DV__FEC_RX_DV,
+	MX35_PAD_FEC_COL__FEC_COL,
+	MX35_PAD_FEC_RDATA0__FEC_RDATA_0,
+	MX35_PAD_FEC_TDATA0__FEC_TDATA_0,
+	MX35_PAD_FEC_TX_EN__FEC_TX_EN,
+	MX35_PAD_FEC_MDC__FEC_MDC,
+	MX35_PAD_FEC_MDIO__FEC_MDIO,
+	MX35_PAD_FEC_TX_ERR__FEC_TX_ERR,
+	MX35_PAD_FEC_RX_ERR__FEC_RX_ERR,
+	MX35_PAD_FEC_CRS__FEC_CRS,
+	MX35_PAD_FEC_RDATA1__FEC_RDATA_1,
+	MX35_PAD_FEC_TDATA1__FEC_TDATA_1,
+	MX35_PAD_FEC_RDATA2__FEC_RDATA_2,
+	MX35_PAD_FEC_TDATA2__FEC_TDATA_2,
+	MX35_PAD_FEC_RDATA3__FEC_RDATA_3,
+	MX35_PAD_FEC_TDATA3__FEC_TDATA_3,
+
+	/* I2C1 */
+	MX35_PAD_I2C1_CLK__I2C1_SCL,
+	MX35_PAD_I2C1_DAT__I2C1_SDA,
+
+	/* USB Host */
+	MX35_PAD_I2C2_CLK__GPIO2_26,		/* USB Host PWR */
+	MX35_PAD_I2C2_DAT__GPIO2_27,		/* USB Host Overcurrent */
+
+	/* USB OTG */
+	MX35_PAD_USBOTG_PWR__USB_TOP_USBOTG_PWR,
+	MX35_PAD_USBOTG_OC__USB_TOP_USBOTG_OC,
+
+	/* ESDHC1 */
+	MX35_PAD_SD1_CMD__ESDHC1_CMD,
+	MX35_PAD_SD1_CLK__ESDHC1_CLK,
+	MX35_PAD_SD1_DATA0__ESDHC1_DAT0,
+	MX35_PAD_SD1_DATA1__ESDHC1_DAT1,
+	MX35_PAD_SD1_DATA2__ESDHC1_DAT2,
+	MX35_PAD_SD1_DATA3__ESDHC1_DAT3,
+};
+
+
+/******************************************************************************/
+/* SERIAL                                                                     */
+/******************************************************************************/
+static struct imxuart_platform_data guf_livius_uart_pdata = {
+	.flags = IMXUART_HAVE_RTSCTS,
+};
+
+/******************************************************************************/
+/* USB                                                                        */
+/******************************************************************************/
+static int guf_livius_usbh1_phy_init(struct platform_device *pdev)
+{
+	int ret = 0;
+
+	ret = gpio_request(USBH_PWR, "USB");
+	if (ret)
+		goto usb_out;
+
+	gpio_direction_output(USBH_PWR, 1);
+	udelay(10);
+	gpio_set_value(USBH_PWR, 0);
+
+usb_out:
+	if (ret)
+		printk(KERN_WARNING "%s failed with %d\n", __func__, ret);
+	return ret;
+}
+
+static struct mxc_usbh_platform_data guf_livius_usbh1_pdata = {
+	.init = guf_livius_usbh1_phy_init,
+	.portsc = MXC_EHCI_MODE_SERIAL,
+	.flags = MXC_EHCI_INTERNAL_PHY | MXC_EHCI_IPPUE_DOWN,
+};
+
+static struct fsl_usb2_platform_data guf_livius_otg_device_pdata = {
+	.operating_mode = FSL_USB2_DR_DEVICE,
+	.phy_mode       = FSL_USB2_PHY_UTMI,
+};
+
+/******************************************************************************/
+/* ETHERNET                                                                   */
+/******************************************************************************/
+static int guf_livius_handle_netdev_event (struct notifier_block *block,
+					 unsigned long event,
+					 void *ptr)
+{
+	struct net_device *dev = ptr;
+	int i;
+
+	if(strcmp(dev->name, "eth0"))
+		goto out;
+
+	if(event == NETDEV_REGISTER && is_valid_ether_addr(config.mac_addr.sa_data)) {
+		for(i = 0; i < 6; i++) {
+			dev->dev_addr[i] = config.mac_addr.sa_data[i];
+		}
+		config.mac_addr.sa_family = dev->type;
+		dev_set_mac_address(dev, &config.mac_addr);
+	}
+out:
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block guf_livius_netdev_event = {
+	.notifier_call = guf_livius_handle_netdev_event,
+};
+
+/******************************************************************************/
+/* I2C / EEPROM / RTC                                                         */
+/******************************************************************************/
+static struct imxi2c_platform_data guf_livius_i2c_pdata = {
+	.bitrate = 100000,
+};
+
+static struct guf_eeprom_memory_accessor gl_eeprom_acc;
+static void guf_livius_eeprom_setup(struct memory_accessor *mem_acc, void *context)
+{
+	gl_eeprom_acc.mem_acc.read = mem_acc->read;
+	gl_eeprom_acc.mem_acc.write = mem_acc->write;
+	gl_eeprom_acc.cont = context;
+}
+
+static struct gfeeprom_platform_data guf_livius_eeprom_pdata = {
+	.byte_len = (1 << 12),
+	.page_size = 0x20,
+	.flags = AT24_FLAG_ADDR16,
+	.bus_id = 0,
+	.context = &(guf_livius_eeprom_pdata.bus_id),
+	.setup = guf_livius_eeprom_setup,
+};
+
+static struct i2c_board_info guf_livius_i2c_devices[] = {
+    {
+		I2C_BOARD_INFO("gfeeprom", GF_GLOBAL_PLATFORM_EEPROM_ADDRESS), /* E0=0, E1=0, E2=0 */
+		.platform_data = &guf_livius_eeprom_pdata,
+	},
+	{
+		I2C_BOARD_INFO("pcf8563", 0x51),
+	}
+};
+
+/******************************************************************************/
+/* Platform Devices                                                           */
+/******************************************************************************/
+static struct platform_device *platform_devices[] = {
+	&mxc_fec_device,
+};
+
+/******************************************************************************/
+/* FLASH                                                                      */
+/******************************************************************************/
+static struct mxc_nand_platform_data guf_livius_nand_pdata = {
+	.width = 1,
+	.hw_ecc = 1,
+};
+
+static struct guf_xml_device_platform_data guf_xml_device_pdata = {
+	.mtd_fis_directory = NULL,
+	.mtd_redundant_fis = NULL,
+};
+
+static int guf_xml_device_registered = 0;
+
+/*
+ * some devices will be configured at runtime by XML data from NAND
+ * So, we must wait for the NAND to occure
+ */
+static void guf_livius_flash_add(struct mtd_info *mtd)
+{
+	char *buf = NULL;
+	size_t retlen;
+	int ret = 0;
+	struct ezxml *xml_cfg = NULL;
+
+	/* First, check RedBoot version */
+	if (strcmp(mtd->name, "RedBoot") == 0)
+	{
+		ret = guf_check_redboot_compatibility(MINIMUM_REDBOOT_VERSION);
+		if (ret == -EINVAL)
+			printk("WARNING: Could not determine required RedBoot version\n");
+		else if (ret != 0) {
+			printk("System halted.\n");
+			while(1);
+		}
+	}
+
+	/* Initialize guf_xml driver */
+	if (strncmp(NAME_FIS_DIRECTORY, mtd->name, LENGTH_NAME_FIS_DIRECTORY) == 0) {
+		printk("guf_xml: found partition %s\n", mtd->name);
+		guf_xml_device_pdata.mtd_fis_directory = mtd;
+	}
+
+	if (strncmp(NAME_REDUNDANT_FIS, mtd->name, LENGTH_NAME_REDUNDANT_FIS) == 0) {
+		printk("guf_xml: found partition %s\n", mtd->name);
+		guf_xml_device_pdata.mtd_redundant_fis = mtd;
+	}
+
+	if (guf_xml_device_pdata.mtd_fis_directory && guf_xml_device_pdata.mtd_redundant_fis && !guf_xml_device_registered) {
+		guf_xml_device.dev.platform_data = &guf_xml_device_pdata;
+		platform_device_register(&guf_xml_device);
+		guf_xml_device_registered = 1;
+	}
+
+	/* Read XML configuration */
+	if (strcmp(mtd->name, "Redundant FIS (ACTIVE)") == 0 ||
+	    strcmp(mtd->name, "FIS directory (ACTIVE)") == 0) {
+		buf = vmalloc(mtd->size);
+
+		mtd->read(mtd, 0, mtd->size, &retlen, (void*) buf);
+		if (ret || (retlen != mtd->size)) {
+			printk("Error reading config partition\n");
+			goto error;
+		}
+		xml_cfg = guf_get_config(buf);
+		if (xml_cfg == 0)
+			goto error;
+
+		if (get_machine_configuration(xml_cfg, &config) == 0)
+		{
+			/* Now register a netdev_notifier to set the mac address */
+			if (is_valid_ether_addr(config.mac_addr.sa_data))
+				register_netdevice_notifier(&guf_livius_netdev_event);
+			/* register the remaining devices */
+			platform_add_devices(platform_devices, ARRAY_SIZE(platform_devices));
+		}
+		else
+			goto error;
+
+		guf_free_config(xml_cfg);
+		vfree(buf);
+	}
+	return;
+
+error:
+	printk("Machine configuration data is missing in flash memory. System halted.\n");
+	while(1);
+}
+
+static void guf_livius_flash_remove(struct mtd_info *mtd)
+{
+	/* nothing to do here */
+}
+
+static struct mtd_notifier guf_livius_flash_notifier = {
+	.add = guf_livius_flash_add,
+	.remove = guf_livius_flash_remove,
+};
+
+/******************************************************************************/
+/* Digital I/O                                                                */
+/******************************************************************************/
+/* These are the pin names that will appear under /sys/class/gpio/ */
+const char* mxc_gpio_names[96] = {
+	[DIG_IN1]	= "dig_in1",
+	[DIG_IN2]	= "dig_in2",
+	[DIG_IN3]	= "dig_in3",
+	[DIG_IN4]	= "dig_in4",
+	[DIG_OUT1]	= "dig_out1",
+	[DIG_OUT2]	= "dig_out2",
+	[DIG_OUT3]	= "dig_out3",
+	[DIG_OUT4]	= "dig_out4",
+};
+
+static void guf_livius_configure_dio(void)
+{
+	/* Request, configure and register GPIOs */
+	gpio_request(DIG_IN1, "GPIO");
+	gpio_request(DIG_IN2, "GPIO");
+	gpio_request(DIG_IN3, "GPIO");
+	gpio_request(DIG_IN4, "GPIO");
+	gpio_request(DIG_OUT1, "GPIO");
+	gpio_request(DIG_OUT2, "GPIO");
+	gpio_request(DIG_OUT3, "GPIO");
+	gpio_request(DIG_OUT4, "GPIO");
+	gpio_direction_input(DIG_IN1);
+	gpio_direction_input(DIG_IN2);
+	gpio_direction_input(DIG_IN3);
+	gpio_direction_input(DIG_IN4);
+	gpio_direction_output(DIG_OUT1, 1);
+	gpio_direction_output(DIG_OUT2, 1);
+	gpio_direction_output(DIG_OUT3, 1);
+	gpio_direction_output(DIG_OUT4, 1);
+	gpio_sysfs_set_active_low(DIG_IN1, 1);
+	gpio_sysfs_set_active_low(DIG_IN2, 1);
+	gpio_sysfs_set_active_low(DIG_IN3, 1);
+	gpio_sysfs_set_active_low(DIG_IN4, 1);
+	gpio_sysfs_set_active_low(DIG_OUT1, 1);
+	gpio_sysfs_set_active_low(DIG_OUT2, 1);
+	gpio_sysfs_set_active_low(DIG_OUT3, 1);
+	gpio_sysfs_set_active_low(DIG_OUT4, 1);
+	gpio_export(DIG_IN1, 0);
+	gpio_export(DIG_IN2, 0);
+	gpio_export(DIG_IN3, 0);
+	gpio_export(DIG_IN4, 0);
+	gpio_export(DIG_OUT1, 0);
+	gpio_export(DIG_OUT2, 0);
+	gpio_export(DIG_OUT3, 0);
+	gpio_export(DIG_OUT4, 0);
+}
+
+/******************************************************************************/
+/* Board Initialization                                                       */
+/******************************************************************************/
+static void __init guf_livius_board_init(void)
+{
+	mxc_iomux_v3_setup_multiple_pads(guf_livius_pads, ARRAY_SIZE(guf_livius_pads));
+
+	gpio_request(UART_PWR_EN, "UART");
+	gpio_direction_output(UART_PWR_EN, 1);
+	mxc_register_device(&mxc_uart_device0, &guf_livius_uart_pdata);
+	mxc_register_device(&mxc_nand_device, &guf_livius_nand_pdata);
+
+	guf_livius_eeprom_pdata.context = &(guf_livius_eeprom_pdata.bus_id);
+	i2c_register_board_info(0, guf_livius_i2c_devices, ARRAY_SIZE(guf_livius_i2c_devices));
+	mxc_register_device(&mxc_i2c_device0, &guf_livius_i2c_pdata);
+	mxc_register_device(&mxc_usbh1, &guf_livius_usbh1_pdata);
+	mxc_register_device(&mxc_otg_udc_device, &guf_livius_otg_device_pdata);
+	mxc_register_device(&mxc_sdhc_device0, NULL);
+
+	guf_livius_configure_dio();
+
+	register_mtd_user(&guf_livius_flash_notifier);
+}
+
+static void __init guf_livius_timer_init(void)
+{
+	mx35_clocks_init();
+}
+
+struct sys_timer guf_livius_timer = {
+	.init	= guf_livius_timer_init,
+};
+
+MACHINE_START(GUF_CUPID, "Garz & Fricke LIVIUS")
+	/* Maintainer: Garz & Fricke GmbH */
+	.phys_io		= MX35_AIPS1_BASE_ADDR,
+	.io_pg_offst	= ((MX35_AIPS1_BASE_ADDR_VIRT) >> 18) & 0xfffc,
+#if defined CONFIG_MOVE_ATAG_LIST_FOR_GUF_REDBOOT
+	.boot_params    = MX3x_PHYS_OFFSET + 0x10000,
+#else
+	.boot_params    = MX3x_PHYS_OFFSET + 0x100,
+#endif
+	.map_io         = mx35_map_io,
+	.init_irq       = mx35_init_irq,
+	.init_machine   = guf_livius_board_init,
+	.timer          = &guf_livius_timer,
+MACHINE_END
