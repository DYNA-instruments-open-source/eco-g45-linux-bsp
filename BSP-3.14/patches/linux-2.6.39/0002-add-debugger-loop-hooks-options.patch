Index: linux-2.6.39/arch/arm/boot/compressed/head.S
===================================================================
--- linux-2.6.39.orig/arch/arm/boot/compressed/head.S
+++ linux-2.6.39/arch/arm/boot/compressed/head.S
@@ -119,6 +119,10 @@
 		.align
 		.arm				@ Always enter in ARM state
 start:
+#if CONFIG_DEBUG_STARTUP_HOOK
+1:
+	b	1b
+#endif
 		.type	start,#function
 		.rept	7
 		mov	r0, r0
@@ -339,6 +343,10 @@ not_relocated:	mov	r0, #0
 		mov	r0, #0			@ must be zero
 		mov	r1, r7			@ restore architecture number
 		mov	r2, r8			@ restore atags pointer
+#ifdef CONFIG_DEBUG_AFTER_MMU_AND_RELOCATION_HOOK
+1:
+		b	1b
+#endif
 		mov	pc, r4			@ call kernel
 
 		.align	2
Index: linux-2.6.39/lib/Kconfig.debug
===================================================================
--- linux-2.6.39.orig/lib/Kconfig.debug
+++ linux-2.6.39/lib/Kconfig.debug
@@ -679,6 +679,27 @@ config DEBUG_BUGVERBOSE
 	  of the BUG call as well as the EIP and oops trace.  This aids
 	  debugging but costs about 70-100K of memory.
 
+config DEBUG_STARTUP_HOOK
+	bool "Insert a debugger loop hook at start label of the kernel"
+	depends on ARM
+	help
+	  If you say Y here an assembler loop hook (endless loop) is
+	  insereted at the start label to attach with a debugger.
+	  After attaching with the debugger and stopping the execution
+	  the code can be controlled from the beginning with the debugger
+	  by setting the PC behind the endless loop.
+
+config DEBUG_AFTER_MMU_AND_RELOCATION_HOOK
+	bool "Insert a debugger loop hook at after relocation of the kernel"
+	depends on ARM
+	help
+	  If you say Y here an assembler loop hook (endless loop) is
+	  insereted at the end of the kernel relocation (MMU is already enabled)
+	  to attach with a debugger.
+	  After attaching with the debugger and stopping the execution
+	  the code can be controlled from the beginning with the debugger
+	  by setting the PC behind the endless loop.
+
 config DEBUG_INFO
 	bool "Compile the kernel with debug info"
 	depends on DEBUG_KERNEL
