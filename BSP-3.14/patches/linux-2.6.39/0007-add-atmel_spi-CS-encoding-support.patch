Index: linux-2.6.39/drivers/spi/atmel_spi.c
===================================================================
--- linux-2.6.39.orig/drivers/spi/atmel_spi.c
+++ linux-2.6.39/drivers/spi/atmel_spi.c
@@ -50,12 +50,8 @@ struct atmel_spi {
 
 	void			*buffer;
 	dma_addr_t		buffer_dma;
-};
 
-/* Controller-specific per-slave state */
-struct atmel_spi_device {
-	unsigned int		npcs_pin;
-	u32			csr;
+	struct atmel_spi_data	*board_data;
 };
 
 #define BUFFER_SIZE		PAGE_SIZE
@@ -105,25 +101,34 @@ static bool atmel_spi_is_v2(void)
 
 static void cs_activate(struct atmel_spi *as, struct spi_device *spi)
 {
-	struct atmel_spi_device *asd = spi->controller_state;
+	u32 csr;
 	unsigned active = spi->mode & SPI_CS_HIGH;
 	u32 mr;
+	int i;
+	unsigned cs_decoding = as->board_data->flags & ATMEL_SPI_CS_DEC;
 
 	if (atmel_spi_is_v2()) {
+		csr = (u32)spi->controller_state;
 		/*
 		 * Always use CSR0. This ensures that the clock
 		 * switches to the correct idle polarity before we
 		 * toggle the CS.
 		 */
-		spi_writel(as, CSR0, asd->csr);
+		spi_writel(as, CSR0, csr);
 		spi_writel(as, MR, SPI_BF(PCS, 0x0e) | SPI_BIT(MODFDIS)
 				| SPI_BIT(MSTR));
 		mr = spi_readl(as, MR);
-		gpio_set_value(asd->npcs_pin, active);
+		if (cs_decoding) {
+			for (i = 0; i < as->board_data->num_cs_pin; i++) {
+				unsigned gpio = as->board_data->cs_pins[i].gpio;
+				unsigned val = 1  & (spi->chip_select>>i);
+				gpio_set_value(gpio, val);
+			}
+		} else
+			gpio_set_value(as->board_data->cs_pins[spi->chip_select].gpio,
+						   active);
 	} else {
 		u32 cpol = (spi->mode & SPI_CPOL) ? SPI_BIT(CPOL) : 0;
-		int i;
-		u32 csr;
 
 		/* Make sure clock polarity is correct */
 		for (i = 0; i < spi->master->num_chipselect; i++) {
@@ -136,36 +141,43 @@ static void cs_activate(struct atmel_spi
 		mr = spi_readl(as, MR);
 		mr = SPI_BFINS(PCS, ~(1 << spi->chip_select), mr);
 		if (spi->chip_select != 0)
-			gpio_set_value(asd->npcs_pin, active);
+			gpio_set_value(as->board_data->cs_pins[spi->chip_select].gpio, active);
 		spi_writel(as, MR, mr);
 	}
 
 	dev_dbg(&spi->dev, "activate %u%s, mr %08x\n",
-			asd->npcs_pin, active ? " (high)" : "",
+			spi->chip_select, active ? " (high)" : "",
 			mr);
 }
 
 static void cs_deactivate(struct atmel_spi *as, struct spi_device *spi)
 {
-	struct atmel_spi_device *asd = spi->controller_state;
 	unsigned active = spi->mode & SPI_CS_HIGH;
 	u32 mr;
+	unsigned cs_decoding = as->board_data->flags & ATMEL_SPI_CS_DEC;
+	int i;
 
 	/* only deactivate *this* device; sometimes transfers to
 	 * another device may be active when this routine is called.
 	 */
 	mr = spi_readl(as, MR);
-	if (~SPI_BFEXT(PCS, mr) & (1 << spi->chip_select)) {
+	if ((!cs_decoding && (~SPI_BFEXT(PCS, mr) & (1 << spi->chip_select))) ||
+	    (cs_decoding && (~SPI_BFEXT(PCS, mr) & spi->chip_select))) {
 		mr = SPI_BFINS(PCS, 0xf, mr);
 		spi_writel(as, MR, mr);
 	}
 
 	dev_dbg(&spi->dev, "DEactivate %u%s, mr %08x\n",
-			asd->npcs_pin, active ? " (low)" : "",
+			spi->chip_select, active ? " (low)" : "",
 			mr);
 
-	if (atmel_spi_is_v2() || spi->chip_select != 0)
-		gpio_set_value(asd->npcs_pin, !active);
+	if (atmel_spi_is_v2() || spi->chip_select != 0) {
+		if (cs_decoding) {
+			for (i = 0; i < as->board_data->num_cs_pin; i++)
+				gpio_set_value(as->board_data->cs_pins[i].gpio, 1);
+		} else
+			gpio_set_value(as->board_data->cs_pins[spi->chip_select].gpio, !active);
+	}
 }
 
 static inline int atmel_spi_xfer_is_last(struct spi_message *msg,
@@ -538,14 +550,14 @@ atmel_spi_interrupt(int irq, void *dev_i
 static int atmel_spi_setup(struct spi_device *spi)
 {
 	struct atmel_spi	*as;
-	struct atmel_spi_device	*asd;
-	u32			scbr, csr;
+	u32					scbr, csr;
 	unsigned int		bits = spi->bits_per_word;
 	unsigned long		bus_hz;
-	unsigned int		npcs_pin;
-	int			ret;
+	int					ret;
+	unsigned			cs_decoding;
 
 	as = spi_master_get_devdata(spi->master);
+	cs_decoding = as->board_data->flags & ATMEL_SPI_CS_DEC;
 
 	if (as->stopping)
 		return -ESHUTDOWN;
@@ -572,6 +584,15 @@ static int atmel_spi_setup(struct spi_de
 		return -EINVAL;
 	}
 
+	if (cs_decoding && (spi->mode & SPI_CS_HIGH)) {
+		dev_dbg(&spi->dev, "setup: can't be active-high while using CS decoding\n");
+		return -EINVAL;
+	}
+	if (cs_decoding && !atmel_spi_is_v2()) {
+		dev_dbg(&spi->dev, "setup: CS decoding not supported on this controller\n");
+		return -EINVAL;
+	}
+
 	/* v1 chips start out at half the peripheral bus speed. */
 	bus_hz = clk_get_rate(as->clk);
 	if (!atmel_spi_is_v2())
@@ -614,22 +635,15 @@ static int atmel_spi_setup(struct spi_de
 	csr |= SPI_BF(DLYBCT, 0);
 
 	/* chipselect must have been muxed as GPIO (e.g. in board setup) */
-	npcs_pin = (unsigned int)spi->controller_data;
-	asd = spi->controller_state;
-	if (!asd) {
-		asd = kzalloc(sizeof(struct atmel_spi_device), GFP_KERNEL);
-		if (!asd)
-			return -ENOMEM;
-
-		ret = gpio_request(npcs_pin, dev_name(&spi->dev));
-		if (ret) {
-			kfree(asd);
-			return ret;
+	if (!spi->controller_state) {
+		/* Request the GPIO only if not using CS decoding */
+		if (!cs_decoding) {
+			u32 gpio = as->board_data->cs_pins[spi->chip_select].gpio;
+			ret = gpio_request(gpio, dev_name(&spi->dev));
+			if (ret)
+				return ret;
+			gpio_direction_output(gpio, !(spi->mode & SPI_CS_HIGH));
 		}
-
-		asd->npcs_pin = npcs_pin;
-		spi->controller_state = asd;
-		gpio_direction_output(npcs_pin, !(spi->mode & SPI_CS_HIGH));
 	} else {
 		unsigned long		flags;
 
@@ -640,7 +654,7 @@ static int atmel_spi_setup(struct spi_de
 		spin_unlock_irqrestore(&as->lock, flags);
 	}
 
-	asd->csr = csr;
+	spi->controller_state = (void *)csr;
 
 	dev_dbg(&spi->dev,
 		"setup: %lu Hz bpw %u mode 0x%x -> csr%d %08x\n",
@@ -658,8 +672,8 @@ static int atmel_spi_transfer(struct spi
 	struct spi_transfer	*xfer;
 	unsigned long		flags;
 	struct device		*controller = spi->master->dev.parent;
-	u8			bits;
-	struct atmel_spi_device	*asd;
+	u8					bits;
+	u32					csr = (u32)spi->controller_state;
 
 	as = spi_master_get_devdata(spi->master);
 
@@ -679,8 +693,7 @@ static int atmel_spi_transfer(struct spi
 		}
 
 		if (xfer->bits_per_word) {
-			asd = spi->controller_state;
-			bits = (asd->csr >> 4) & 0xf;
+			bits = (csr >> 4) & 0xf;
 			if (bits != xfer->bits_per_word - 8) {
 				dev_dbg(&spi->dev, "you can't yet change "
 					 "bits_per_word in transfers\n");
@@ -733,11 +746,9 @@ static int atmel_spi_transfer(struct spi
 static void atmel_spi_cleanup(struct spi_device *spi)
 {
 	struct atmel_spi	*as = spi_master_get_devdata(spi->master);
-	struct atmel_spi_device	*asd = spi->controller_state;
-	unsigned		gpio = (unsigned) spi->controller_data;
 	unsigned long		flags;
 
-	if (!asd)
+	if (!spi->controller_state)
 		return;
 
 	spin_lock_irqsave(&as->lock, flags);
@@ -748,20 +759,20 @@ static void atmel_spi_cleanup(struct spi
 	spin_unlock_irqrestore(&as->lock, flags);
 
 	spi->controller_state = NULL;
-	gpio_free(gpio);
-	kfree(asd);
 }
 
 /*-------------------------------------------------------------------------*/
 
 static int __init atmel_spi_probe(struct platform_device *pdev)
 {
-	struct resource		*regs;
-	int			irq;
-	struct clk		*clk;
-	int			ret;
-	struct spi_master	*master;
-	struct atmel_spi	*as;
+	struct resource			*regs;
+	int						irq;
+	struct clk				*clk;
+	int						ret;
+	struct spi_master		*master;
+	struct atmel_spi		*as;
+	struct atmel_spi_data	*board_data;
+	int						i;
 
 	regs = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs)
@@ -784,8 +795,19 @@ static int __init atmel_spi_probe(struct
 	/* the spi->mode bits understood by this driver: */
 	master->mode_bits = SPI_CPOL | SPI_CPHA | SPI_CS_HIGH;
 
+	/* Get board specific data */
+	ret = -EINVAL;
+	board_data = platform_get_drvdata(pdev);
+	if (!board_data)
+		goto out_free;
+
 	master->bus_num = pdev->id;
-	master->num_chipselect = 4;
+	if (board_data->flags & ATMEL_SPI_CS_DEC) {
+		master->num_chipselect = (0x01 << board_data->num_cs_pin) - 1;
+		dev_dbg(&pdev->dev, "Chip select decoding enabled (%d:%d)\n",
+			board_data->num_cs_pin, 0x01 << board_data->num_cs_pin);
+	} else
+		master->num_chipselect = board_data->num_cs_pin;
 	master->setup = atmel_spi_setup;
 	master->transfer = atmel_spi_transfer;
 	master->cleanup = atmel_spi_cleanup;
@@ -793,6 +815,23 @@ static int __init atmel_spi_probe(struct
 
 	as = spi_master_get_devdata(master);
 
+	/* Keep revelant board info in our structure */
+	as->board_data = board_data;
+
+	/* Request and init the CS pins here only when using CS
+	 * decoding. When not using CS decoding this is done on a per
+	 * SPI device basis (see atmel_spi_setup()).
+	*/
+	if (board_data->flags & ATMEL_SPI_CS_DEC) {
+		ret = gpio_request_array(board_data->cs_pins,
+					 board_data->num_cs_pin);
+		if (ret != 0)
+			goto out_free;
+		/* CS decoding is always active low */
+		for (i = 0; i < board_data->num_cs_pin; i++)
+			gpio_direction_output(board_data->cs_pins[i].gpio, 1);
+	}
+
 	/*
 	 * Scratch buffer is used for throwaway rx and tx data.
 	 * It's coherent to minimize dcache pollution.
@@ -800,7 +839,7 @@ static int __init atmel_spi_probe(struct
 	as->buffer = dma_alloc_coherent(&pdev->dev, BUFFER_SIZE,
 					&as->buffer_dma, GFP_KERNEL);
 	if (!as->buffer)
-		goto out_free;
+		goto out_free_pins;
 
 	spin_lock_init(&as->lock);
 	INIT_LIST_HEAD(&as->queue);
@@ -823,6 +862,8 @@ static int __init atmel_spi_probe(struct
 	spi_writel(as, MR, SPI_BIT(MSTR) | SPI_BIT(MODFDIS));
 	spi_writel(as, PTCR, SPI_BIT(RXTDIS) | SPI_BIT(TXTDIS));
 	spi_writel(as, CR, SPI_BIT(SPIEN));
+	if (as->board_data->flags & ATMEL_SPI_CS_DEC)
+		spi_writel(as, MR, SPI_BIT(PCSDEC));
 
 	/* go! */
 	dev_info(&pdev->dev, "Atmel SPI Controller at 0x%08lx (irq %d)\n",
@@ -844,6 +885,9 @@ out_unmap_regs:
 out_free_buffer:
 	dma_free_coherent(&pdev->dev, BUFFER_SIZE, as->buffer,
 			as->buffer_dma);
+out_free_pins:
+	if (board_data->flags & ATMEL_SPI_CS_DEC)
+		gpio_free_array(board_data->cs_pins, board_data->num_cs_pin);
 out_free:
 	clk_put(clk);
 	spi_master_put(master);
@@ -876,6 +920,10 @@ static int __exit atmel_spi_remove(struc
 	dma_free_coherent(&pdev->dev, BUFFER_SIZE, as->buffer,
 			as->buffer_dma);
 
+	if (as->board_data->flags & ATMEL_SPI_CS_DEC)
+		gpio_free_array(as->board_data->cs_pins,
+				as->board_data->num_cs_pin);
+
 	clk_disable(as->clk);
 	clk_put(as->clk);
 	free_irq(as->irq, master);
Index: linux-2.6.39/arch/arm/mach-at91/include/mach/board.h
===================================================================
--- linux-2.6.39.orig/arch/arm/mach-at91/include/mach/board.h
+++ linux-2.6.39/arch/arm/mach-at91/include/mach/board.h
@@ -125,7 +125,16 @@ extern void __init at91_add_device_i2c(s
 #endif
 
  /* SPI */
-extern void __init at91_add_device_spi(struct spi_board_info *devices, int nr_devices);
+struct atmel_spi_data {
+	unsigned	bus_num;
+	unsigned	num_cs_pin;
+	struct gpio	*cs_pins;
+	unsigned	flags;
+#define ATMEL_SPI_CS_DEC	0x01	/* The CS pins are decoded to
+					   (2^num_cs_pin)-1 logical CS
+					   lines */
+};
+extern void __init at91_add_device_spi(struct atmel_spi_data *data);
 
  /* Serial */
 #define ATMEL_UART_CTS	0x01
Index: linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
===================================================================
--- linux-2.6.39.orig/arch/arm/mach-at91/at91sam9g45_devices.c
+++ linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
@@ -724,7 +724,12 @@ static struct platform_device at91sam9g4
 	.num_resources	= ARRAY_SIZE(spi0_resources),
 };
 
-static const unsigned spi0_standard_cs[4] = { AT91_PIN_PB3, AT91_PIN_PB18, AT91_PIN_PB19, AT91_PIN_PD27 };
+static struct gpio spi0_standard_cs_pins[] = {
+	{ .gpio = AT91_PIN_PB3  },
+	{ .gpio = AT91_PIN_PB18 },
+	{ .gpio = AT91_PIN_PB19 },
+	{ .gpio = AT91_PIN_PD27 },
+};
 
 static struct resource spi1_resources[] = {
 	[0] = {
@@ -750,56 +755,47 @@ static struct platform_device at91sam9g4
 	.num_resources	= ARRAY_SIZE(spi1_resources),
 };
 
-static const unsigned spi1_standard_cs[4] = { AT91_PIN_PB17, AT91_PIN_PD28, AT91_PIN_PD18, AT91_PIN_PD19 };
+static struct gpio spi1_standard_cs_pins[] = {
+	{ .gpio = AT91_PIN_PB17 },
+	{ .gpio = AT91_PIN_PD28 },
+	{ .gpio = AT91_PIN_PD18 },
+	{ .gpio = AT91_PIN_PD19 },
+};
 
-void __init at91_add_device_spi(struct spi_board_info *devices, int nr_devices)
+void __init at91_add_device_spi(struct atmel_spi_data *data)
 {
 	int i;
-	unsigned long cs_pin;
-	short enable_spi0 = 0;
-	short enable_spi1 = 0;
-
-	/* Choose SPI chip-selects */
-	for (i = 0; i < nr_devices; i++) {
-		if (devices[i].controller_data)
-			cs_pin = (unsigned long) devices[i].controller_data;
-		else if (devices[i].bus_num == 0)
-			cs_pin = spi0_standard_cs[devices[i].chip_select];
-		else
-			cs_pin = spi1_standard_cs[devices[i].chip_select];
-
-		if (devices[i].bus_num == 0)
-			enable_spi0 = 1;
-		else
-			enable_spi1 = 1;
 
-		/* enable chip-select pin */
-		at91_set_gpio_output(cs_pin, 1);
-
-		/* pass chip-select pin to driver */
-		devices[i].controller_data = (void *) cs_pin;
-	}
+	if (data->bus_num == 0) {
+		/* enable chip-select pins */
+		if (!data->cs_pins)
+			data->cs_pins = spi0_standard_cs_pins;
+		for (i = 0; i < data->num_cs_pin; i++)
+			at91_set_gpio_output(data->cs_pins[i].gpio, 1);
 
-	spi_register_board_info(devices, nr_devices);
-
-	/* Configure SPI bus(es) */
-	if (enable_spi0) {
 		at91_set_A_periph(AT91_PIN_PB0, 0);	/* SPI0_MISO */
 		at91_set_A_periph(AT91_PIN_PB1, 0);	/* SPI0_MOSI */
 		at91_set_A_periph(AT91_PIN_PB2, 0);	/* SPI0_SPCK */
 
+		platform_set_drvdata(&at91sam9g45_spi0_device, data);
 		platform_device_register(&at91sam9g45_spi0_device);
-	}
-	if (enable_spi1) {
+	} else if (data->bus_num == 1) {
+		/* enable chip-select pins */
+		if (!data->cs_pins)
+			data->cs_pins = spi1_standard_cs_pins;
+		for (i = 0; i < data->num_cs_pin; i++)
+			at91_set_gpio_output(data->cs_pins[i].gpio, 1);
+
 		at91_set_A_periph(AT91_PIN_PB14, 0);	/* SPI1_MISO */
 		at91_set_A_periph(AT91_PIN_PB15, 0);	/* SPI1_MOSI */
 		at91_set_A_periph(AT91_PIN_PB16, 0);	/* SPI1_SPCK */
 
+		platform_set_drvdata(&at91sam9g45_spi1_device, data);
 		platform_device_register(&at91sam9g45_spi1_device);
 	}
 }
 #else
-void __init at91_add_device_spi(struct spi_board_info *devices, int nr_devices) {}
+void __init at91_add_device_spi(struct atmel_spi_data *data) {}
 #endif
 
 
