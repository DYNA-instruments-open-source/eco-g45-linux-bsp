Index: linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
===================================================================
--- linux-2.6.39.orig/arch/arm/mach-at91/at91sam9g45_devices.c
+++ linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
@@ -870,7 +870,12 @@ static struct resource lcdc_resources[]
 		.end	= AT91SAM9G45_LCDC_BASE + SZ_4K - 1,
 		.flags	= IORESOURCE_MEM,
 	},
-	[1] = {
+	[1] = { /* placeholder for static video memory */
+		.start	= 0,
+		.end	= 0,
+		.flags	= IORESOURCE_UNSET,
+	},
+	[2] = {
 		.start	= AT91SAM9G45_ID_LCDC,
 		.end	= AT91SAM9G45_ID_LCDC,
 		.flags	= IORESOURCE_IRQ,
@@ -889,6 +894,32 @@ static struct platform_device at91_lcdc_
 	.num_resources	= ARRAY_SIZE(lcdc_resources),
 };
 
+static int __init at91_fixed_screen(char *options)
+{
+	uint32_t fixed_screen_address;
+	uint32_t fixed_screen_size;
+	int display_enabled;
+
+	if (sscanf(options, "%d,%x,%x", &display_enabled, &fixed_screen_address, &fixed_screen_size) != 3) {
+		pr_err("AT91SAM9G45 platform: wrong vidmem parameter syntax. Ignoring.\n");
+		fixed_screen_address = 0U;	/* to be sure */
+		return 0;
+	}
+	/* nothing shown yet? e.g. no splash screen */
+	if (display_enabled == 0) {
+		/* do not use any hard coded framebuffer address in this case */
+		fixed_screen_address = 0U;
+	} else {
+		pr_info("AT91SAM9G45 platform: Using fixed framebuffer memory at %x\n",
+			fixed_screen_address);
+		lcdc_resources[1].start = fixed_screen_address;
+		lcdc_resources[1].end = fixed_screen_address + fixed_screen_size - 1;
+		lcdc_resources[1].flags	= IORESOURCE_MEM;
+	}
+	return 0;
+}
+__setup("vidmem=", at91_fixed_screen);
+
 void __init at91_add_device_lcdc(struct atmel_lcdfb_info *data)
 {
 	if (!data)
Index: linux-2.6.39/drivers/video/atmel_lcdfb.c
===================================================================
--- linux-2.6.39.orig/drivers/video/atmel_lcdfb.c
+++ linux-2.6.39/drivers/video/atmel_lcdfb.c
@@ -18,12 +18,14 @@
 #include <linux/delay.h>
 #include <linux/backlight.h>
 #include <linux/gfp.h>
+#include <linux/delay.h>
 
 #include <mach/board.h>
 #include <mach/cpu.h>
 #include <mach/gpio.h>
 
 #include <video/atmel_lcdc.h>
+#include <linux/backlight.h>
 
 #define lcdc_readl(sinfo, reg)		__raw_readl((sinfo)->mmio+(reg))
 #define lcdc_writel(sinfo, reg, val)	__raw_writel((val), (sinfo)->mmio+(reg))
@@ -501,8 +503,6 @@ static int atmel_lcdfb_set_par(struct fb
 		 info->var.xres, info->var.yres,
 		 info->var.xres_virtual, info->var.yres_virtual);
 
-	atmel_lcdfb_stop_nowait(sinfo);
-
 	if (info->var.bits_per_pixel == 1)
 		info->fix.visual = FB_VISUAL_MONO01;
 	else if (info->var.bits_per_pixel <= 8)
@@ -513,104 +513,108 @@ static int atmel_lcdfb_set_par(struct fb
 	bits_per_line = info->var.xres_virtual * info->var.bits_per_pixel;
 	info->fix.line_length = DIV_ROUND_UP(bits_per_line, 8);
 
-	/* Re-initialize the DMA engine... */
-	dev_dbg(info->device, "  * update DMA engine\n");
-	atmel_lcdfb_update_dma(info, &info->var);
-
-	/* ...set frame size and burst length = 8 words (?) */
-	value = (info->var.yres * info->var.xres * info->var.bits_per_pixel) / 32;
-	value |= ((ATMEL_LCDC_DMA_BURST_LEN - 1) << ATMEL_LCDC_BLENGTH_OFFSET);
-	lcdc_writel(sinfo, ATMEL_LCDC_DMAFRMCFG, value);
-
-	/* Now, the LCDC core... */
-
-	/* Set pixel clock */
-	if (cpu_is_at91sam9g45() && !cpu_is_at91sam9g45es())
-		pix_factor = 1;
+	if(!sinfo->pre_initialized) {
+		atmel_lcdfb_stop_nowait(sinfo);
 
-	clk_value_khz = clk_get_rate(sinfo->lcdc_clk) / 1000;
+		/* Re-initialize the DMA engine... */
+		dev_dbg(info->device, "  * update DMA engine\n");
+		atmel_lcdfb_update_dma(info, &info->var);
 
-	value = DIV_ROUND_UP(clk_value_khz, PICOS2KHZ(info->var.pixclock));
+		/* ...set frame size and burst length = 8 words (?) */
+		value = (info->var.yres * info->var.xres * info->var.bits_per_pixel) / 32;
+		value |= ((ATMEL_LCDC_DMA_BURST_LEN - 1) << ATMEL_LCDC_BLENGTH_OFFSET);
+		lcdc_writel(sinfo, ATMEL_LCDC_DMAFRMCFG, value);
 
-	if (value < pix_factor) {
-		dev_notice(info->device, "Bypassing pixel clock divider\n");
-		lcdc_writel(sinfo, ATMEL_LCDC_LCDCON1, ATMEL_LCDC_BYPASS);
-	} else {
-		value = (value / pix_factor) - 1;
-		dev_dbg(info->device, "  * programming CLKVAL = 0x%08lx\n",
-				value);
-		lcdc_writel(sinfo, ATMEL_LCDC_LCDCON1,
-				value << ATMEL_LCDC_CLKVAL_OFFSET);
-		info->var.pixclock =
-			KHZ2PICOS(clk_value_khz / (pix_factor * (value + 1)));
-		dev_dbg(info->device, "  updated pixclk:     %lu KHz\n",
-					PICOS2KHZ(info->var.pixclock));
-	}
+		/* Now, the LCDC core... */
 
+		/* Set pixel clock */
+		if (cpu_is_at91sam9g45() && !cpu_is_at91sam9g45es())
+			pix_factor = 1;
 
-	/* Initialize control register 2 */
-	value = sinfo->default_lcdcon2;
-
-	if (!(info->var.sync & FB_SYNC_HOR_HIGH_ACT))
-		value |= ATMEL_LCDC_INVLINE_INVERTED;
-	if (!(info->var.sync & FB_SYNC_VERT_HIGH_ACT))
-		value |= ATMEL_LCDC_INVFRAME_INVERTED;
-
-	switch (info->var.bits_per_pixel) {
-		case 1:	value |= ATMEL_LCDC_PIXELSIZE_1; break;
-		case 2: value |= ATMEL_LCDC_PIXELSIZE_2; break;
-		case 4: value |= ATMEL_LCDC_PIXELSIZE_4; break;
-		case 8: value |= ATMEL_LCDC_PIXELSIZE_8; break;
-		case 15: /* fall through */
-		case 16: value |= ATMEL_LCDC_PIXELSIZE_16; break;
-		case 24: value |= ATMEL_LCDC_PIXELSIZE_24; break;
-		case 32: value |= ATMEL_LCDC_PIXELSIZE_32; break;
-		default: BUG(); break;
-	}
-	dev_dbg(info->device, "  * LCDCON2 = %08lx\n", value);
-	lcdc_writel(sinfo, ATMEL_LCDC_LCDCON2, value);
-
-	/* Vertical timing */
-	value = (info->var.vsync_len - 1) << ATMEL_LCDC_VPW_OFFSET;
-	value |= info->var.upper_margin << ATMEL_LCDC_VBP_OFFSET;
-	value |= info->var.lower_margin;
-	dev_dbg(info->device, "  * LCDTIM1 = %08lx\n", value);
-	lcdc_writel(sinfo, ATMEL_LCDC_TIM1, value);
-
-	/* Horizontal timing */
-	value = (info->var.right_margin - 1) << ATMEL_LCDC_HFP_OFFSET;
-	value |= (info->var.hsync_len - 1) << ATMEL_LCDC_HPW_OFFSET;
-	value |= (info->var.left_margin - 1);
-	dev_dbg(info->device, "  * LCDTIM2 = %08lx\n", value);
-	lcdc_writel(sinfo, ATMEL_LCDC_TIM2, value);
+		clk_value_khz = clk_get_rate(sinfo->lcdc_clk) / 1000;
 
-	/* Horizontal value (aka line size) */
-	hozval_linesz = compute_hozval(info->var.xres,
-					lcdc_readl(sinfo, ATMEL_LCDC_LCDCON2));
+		value = DIV_ROUND_UP(clk_value_khz, PICOS2KHZ(info->var.pixclock));
 
-	/* Display size */
-	value = (hozval_linesz - 1) << ATMEL_LCDC_HOZVAL_OFFSET;
-	value |= info->var.yres - 1;
-	dev_dbg(info->device, "  * LCDFRMCFG = %08lx\n", value);
-	lcdc_writel(sinfo, ATMEL_LCDC_LCDFRMCFG, value);
-
-	/* FIFO Threshold: Use formula from data sheet */
-	value = ATMEL_LCDC_FIFO_SIZE - (2 * ATMEL_LCDC_DMA_BURST_LEN + 3);
-	lcdc_writel(sinfo, ATMEL_LCDC_FIFO, value);
-
-	/* Toggle LCD_MODE every frame */
-	lcdc_writel(sinfo, ATMEL_LCDC_MVAL, 0);
-
-	/* Disable all interrupts */
-	lcdc_writel(sinfo, ATMEL_LCDC_IDR, ~0UL);
-	/* Enable FIFO & DMA errors */
-	lcdc_writel(sinfo, ATMEL_LCDC_IER, ATMEL_LCDC_UFLWI | ATMEL_LCDC_OWRI | ATMEL_LCDC_MERI);
+		if (value < pix_factor) {
+			dev_notice(info->device, "Bypassing pixel clock divider\n");
+			lcdc_writel(sinfo, ATMEL_LCDC_LCDCON1, ATMEL_LCDC_BYPASS);
+		} else {
+			value = (value / pix_factor) - 1;
+			dev_dbg(info->device, "  * programming CLKVAL = 0x%08lx\n",
+					value);
+			lcdc_writel(sinfo, ATMEL_LCDC_LCDCON1,
+					value << ATMEL_LCDC_CLKVAL_OFFSET);
+			info->var.pixclock =
+				KHZ2PICOS(clk_value_khz / (pix_factor * (value + 1)));
+			dev_dbg(info->device, "  updated pixclk:     %lu KHz\n",
+						PICOS2KHZ(info->var.pixclock));
+		}
 
-	/* ...wait for DMA engine to become idle... */
-	while (lcdc_readl(sinfo, ATMEL_LCDC_DMACON) & ATMEL_LCDC_DMABUSY)
-		msleep(10);
 
-	atmel_lcdfb_start(sinfo);
+		/* Initialize control register 2 */
+		value = sinfo->default_lcdcon2;
+
+		if (!(info->var.sync & FB_SYNC_HOR_HIGH_ACT))
+			value |= ATMEL_LCDC_INVLINE_INVERTED;
+		if (!(info->var.sync & FB_SYNC_VERT_HIGH_ACT))
+			value |= ATMEL_LCDC_INVFRAME_INVERTED;
+
+		switch (info->var.bits_per_pixel) {
+			case 1:	value |= ATMEL_LCDC_PIXELSIZE_1; break;
+			case 2: value |= ATMEL_LCDC_PIXELSIZE_2; break;
+			case 4: value |= ATMEL_LCDC_PIXELSIZE_4; break;
+			case 8: value |= ATMEL_LCDC_PIXELSIZE_8; break;
+			case 15: /* fall through */
+			case 16: value |= ATMEL_LCDC_PIXELSIZE_16; break;
+			case 24: value |= ATMEL_LCDC_PIXELSIZE_24; break;
+			case 32: value |= ATMEL_LCDC_PIXELSIZE_32; break;
+			default: BUG(); break;
+		}
+		dev_dbg(info->device, "  * LCDCON2 = %08lx\n", value);
+		lcdc_writel(sinfo, ATMEL_LCDC_LCDCON2, value);
+
+		/* Vertical timing */
+		value = (info->var.vsync_len - 1) << ATMEL_LCDC_VPW_OFFSET;
+		value |= info->var.upper_margin << ATMEL_LCDC_VBP_OFFSET;
+		value |= info->var.lower_margin;
+		dev_dbg(info->device, "  * LCDTIM1 = %08lx\n", value);
+		lcdc_writel(sinfo, ATMEL_LCDC_TIM1, value);
+
+		/* Horizontal timing */
+		value = (info->var.right_margin - 1) << ATMEL_LCDC_HFP_OFFSET;
+		value |= (info->var.hsync_len - 1) << ATMEL_LCDC_HPW_OFFSET;
+		value |= (info->var.left_margin - 1);
+		dev_dbg(info->device, "  * LCDTIM2 = %08lx\n", value);
+		lcdc_writel(sinfo, ATMEL_LCDC_TIM2, value);
+
+		/* Horizontal value (aka line size) */
+		hozval_linesz = compute_hozval(info->var.xres,
+					lcdc_readl(sinfo, ATMEL_LCDC_LCDCON2));
+
+		/* Display size */
+		value = (hozval_linesz - 1) << ATMEL_LCDC_HOZVAL_OFFSET;
+		value |= info->var.yres - 1;
+		dev_dbg(info->device, "  * LCDFRMCFG = %08lx\n", value);
+		lcdc_writel(sinfo, ATMEL_LCDC_LCDFRMCFG, value);
+
+		/* FIFO Threshold: Use formula from data sheet */
+		value = ATMEL_LCDC_FIFO_SIZE - (2 * ATMEL_LCDC_DMA_BURST_LEN + 3);
+		lcdc_writel(sinfo, ATMEL_LCDC_FIFO, value);
+
+		/* Toggle LCD_MODE every frame */
+		lcdc_writel(sinfo, ATMEL_LCDC_MVAL, 0);
+
+		/* Disable all interrupts */
+		lcdc_writel(sinfo, ATMEL_LCDC_IDR, ~0UL);
+		/* Enable FIFO & DMA errors */
+		lcdc_writel(sinfo, ATMEL_LCDC_IER, ATMEL_LCDC_UFLWI | ATMEL_LCDC_OWRI | ATMEL_LCDC_MERI);
+
+		/* ...wait for DMA engine to become idle... */
+		while (lcdc_readl(sinfo, ATMEL_LCDC_DMACON) & ATMEL_LCDC_DMABUSY)
+			msleep(10);
+
+		atmel_lcdfb_start(sinfo);
+	}
 
 	dev_dbg(info->device, "  * DONE\n");
 
@@ -723,11 +727,17 @@ static int atmel_lcdfb_blank(int blank_m
 	case FB_BLANK_UNBLANK:
 	case FB_BLANK_NORMAL:
 		atmel_lcdfb_start(sinfo);
+		mdelay(sinfo->signal_on_to_backlight_on);
+		if(sinfo->backlight_dev)
+			backlight_set_power(sinfo->backlight_dev, FB_BLANK_UNBLANK);
 		break;
 	case FB_BLANK_VSYNC_SUSPEND:
 	case FB_BLANK_HSYNC_SUSPEND:
 		break;
 	case FB_BLANK_POWERDOWN:
+		if(sinfo->backlight_dev)
+			backlight_set_power(sinfo->backlight_dev, FB_BLANK_POWERDOWN);
+		mdelay(sinfo->backlight_off_to_signal_off);
 		atmel_lcdfb_stop(sinfo);
 		break;
 	default:
@@ -847,6 +857,9 @@ static int __init atmel_lcdfb_probe(stru
 		sinfo->lcdcon_is_backlight = pdata_sinfo->lcdcon_is_backlight;
 		sinfo->lcdcon_pol_negative = pdata_sinfo->lcdcon_pol_negative;
 		sinfo->lcd_wiring_mode = pdata_sinfo->lcd_wiring_mode;
+		sinfo->backlight_dev = pdata_sinfo->backlight_dev;
+		sinfo->signal_on_to_backlight_on = pdata_sinfo->signal_on_to_backlight_on;
+		sinfo->backlight_off_to_signal_off = pdata_sinfo->backlight_off_to_signal_off;
 	} else {
 		dev_err(dev, "cannot get default configuration\n");
 		goto free_info;
@@ -921,6 +934,7 @@ static int __init atmel_lcdfb_probe(stru
 		 * Don't clear the framebuffer -- someone may have set
 		 * up a splash image.
 		 */
+		 sinfo->pre_initialized = 1;
 	} else {
 		/* alocate memory buffer */
 		ret = atmel_lcdfb_alloc_video_memory(sinfo);
@@ -928,6 +942,7 @@ static int __init atmel_lcdfb_probe(stru
 			dev_err(dev, "cannot allocate framebuffer: %d\n", ret);
 			goto stop_clk;
 		}
+		 sinfo->pre_initialized = 0;
 	}
 
 	/* LCDC registers */
Index: linux-2.6.39/include/video/atmel_lcdc.h
===================================================================
--- linux-2.6.39.orig/include/video/atmel_lcdc.h
+++ linux-2.6.39/include/video/atmel_lcdc.h
@@ -62,6 +62,10 @@ struct atmel_lcdfb_info {
 	void (*atmel_lcdfb_power_control)(int on);
 	struct fb_monspecs	*default_monspecs;
 	u32			pseudo_palette[16];
+	u32			pre_initialized;
+	struct device *backlight_dev;
+	u32			signal_on_to_backlight_on;
+	u32			backlight_off_to_signal_off;
 };
 
 #define ATMEL_LCDC_DMABADDR1	0x00
