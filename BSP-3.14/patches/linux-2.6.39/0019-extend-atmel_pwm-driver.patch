Index: linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
===================================================================
--- linux-2.6.39.orig/arch/arm/mach-at91/at91sam9g45_devices.c
+++ linux-2.6.39/arch/arm/mach-at91/at91sam9g45_devices.c
@@ -855,116 +855,6 @@ void __init at91_add_device_ac97(struct
 void __init at91_add_device_ac97(struct ac97c_platform_data *data) {}
 #endif
 
-
-/* --------------------------------------------------------------------
- *  LCD Controller
- * -------------------------------------------------------------------- */
-
-#if defined(CONFIG_FB_ATMEL) || defined(CONFIG_FB_ATMEL_MODULE)
-static u64 lcdc_dmamask = DMA_BIT_MASK(32);
-static struct atmel_lcdfb_info lcdc_data;
-
-static struct resource lcdc_resources[] = {
-	[0] = {
-		.start	= AT91SAM9G45_LCDC_BASE,
-		.end	= AT91SAM9G45_LCDC_BASE + SZ_4K - 1,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = { /* placeholder for static video memory */
-		.start	= 0,
-		.end	= 0,
-		.flags	= IORESOURCE_UNSET,
-	},
-	[2] = {
-		.start	= AT91SAM9G45_ID_LCDC,
-		.end	= AT91SAM9G45_ID_LCDC,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
-
-static struct platform_device at91_lcdc_device = {
-	.name		= "atmel_lcdfb",
-	.id		= 0,
-	.dev		= {
-				.dma_mask		= &lcdc_dmamask,
-				.coherent_dma_mask	= DMA_BIT_MASK(32),
-				.platform_data		= &lcdc_data,
-	},
-	.resource	= lcdc_resources,
-	.num_resources	= ARRAY_SIZE(lcdc_resources),
-};
-
-static int __init at91_fixed_screen(char *options)
-{
-	uint32_t fixed_screen_address;
-	uint32_t fixed_screen_size;
-	int display_enabled;
-
-	if (sscanf(options, "%d,%x,%x", &display_enabled, &fixed_screen_address, &fixed_screen_size) != 3) {
-		pr_err("AT91SAM9G45 platform: wrong vidmem parameter syntax. Ignoring.\n");
-		fixed_screen_address = 0U;	/* to be sure */
-		return 0;
-	}
-	/* nothing shown yet? e.g. no splash screen */
-	if (display_enabled == 0) {
-		/* do not use any hard coded framebuffer address in this case */
-		fixed_screen_address = 0U;
-	} else {
-		pr_info("AT91SAM9G45 platform: Using fixed framebuffer memory at %x\n",
-			fixed_screen_address);
-		lcdc_resources[1].start = fixed_screen_address;
-		lcdc_resources[1].end = fixed_screen_address + fixed_screen_size - 1;
-		lcdc_resources[1].flags	= IORESOURCE_MEM;
-	}
-	return 0;
-}
-__setup("vidmem=", at91_fixed_screen);
-
-void __init at91_add_device_lcdc(struct atmel_lcdfb_info *data)
-{
-	if (!data)
-		return;
-
-	at91_set_A_periph(AT91_PIN_PE0, 0);	/* LCDDPWR */
-
-	at91_set_A_periph(AT91_PIN_PE2, 0);	/* LCDCC */
-	at91_set_A_periph(AT91_PIN_PE3, 0);	/* LCDVSYNC */
-	at91_set_A_periph(AT91_PIN_PE4, 0);	/* LCDHSYNC */
-	at91_set_A_periph(AT91_PIN_PE5, 0);	/* LCDDOTCK */
-	at91_set_A_periph(AT91_PIN_PE6, 0);	/* LCDDEN */
-	at91_set_A_periph(AT91_PIN_PE7, 0);	/* LCDD0 */
-	at91_set_A_periph(AT91_PIN_PE8, 0);	/* LCDD1 */
-	at91_set_A_periph(AT91_PIN_PE9, 0);	/* LCDD2 */
-	at91_set_A_periph(AT91_PIN_PE10, 0);	/* LCDD3 */
-	at91_set_A_periph(AT91_PIN_PE11, 0);	/* LCDD4 */
-	at91_set_A_periph(AT91_PIN_PE12, 0);	/* LCDD5 */
-	at91_set_A_periph(AT91_PIN_PE13, 0);	/* LCDD6 */
-	at91_set_A_periph(AT91_PIN_PE14, 0);	/* LCDD7 */
-	at91_set_A_periph(AT91_PIN_PE15, 0);	/* LCDD8 */
-	at91_set_A_periph(AT91_PIN_PE16, 0);	/* LCDD9 */
-	at91_set_A_periph(AT91_PIN_PE17, 0);	/* LCDD10 */
-	at91_set_A_periph(AT91_PIN_PE18, 0);	/* LCDD11 */
-	at91_set_A_periph(AT91_PIN_PE19, 0);	/* LCDD12 */
-	at91_set_A_periph(AT91_PIN_PE20, 0);	/* LCDD13 */
-	at91_set_A_periph(AT91_PIN_PE21, 0);	/* LCDD14 */
-	at91_set_A_periph(AT91_PIN_PE22, 0);	/* LCDD15 */
-	at91_set_A_periph(AT91_PIN_PE23, 0);	/* LCDD16 */
-	at91_set_A_periph(AT91_PIN_PE24, 0);	/* LCDD17 */
-	at91_set_A_periph(AT91_PIN_PE25, 0);	/* LCDD18 */
-	at91_set_A_periph(AT91_PIN_PE26, 0);	/* LCDD19 */
-	at91_set_A_periph(AT91_PIN_PE27, 0);	/* LCDD20 */
-	at91_set_A_periph(AT91_PIN_PE28, 0);	/* LCDD21 */
-	at91_set_A_periph(AT91_PIN_PE29, 0);	/* LCDD22 */
-	at91_set_A_periph(AT91_PIN_PE30, 0);	/* LCDD23 */
-
-	lcdc_data = *data;
-	platform_device_register(&at91_lcdc_device);
-}
-#else
-void __init at91_add_device_lcdc(struct atmel_lcdfb_info *data) {}
-#endif
-
-
 /* --------------------------------------------------------------------
  *  Timer/Counter block
  * -------------------------------------------------------------------- */
@@ -1170,7 +1060,7 @@ static void __init at91_add_device_watch
  * --------------------------------------------------------------------*/
 
 #if defined(CONFIG_ATMEL_PWM) || defined(CONFIG_ATMEL_PWM_MODULE)
-static u32 pwm_mask;
+static struct atmel_pwm_platform_data pwm_data;
 
 static struct resource pwm_resources[] = {
 	[0] = {
@@ -1189,54 +1079,68 @@ static struct platform_device at91sam9g4
 	.name	= "atmel_pwm",
 	.id	= -1,
 	.dev	= {
-		.platform_data		= &pwm_mask,
+		.platform_data		= &pwm_data,
 	},
 	.resource	= pwm_resources,
 	.num_resources	= ARRAY_SIZE(pwm_resources),
 };
 
-void __init at91_add_device_pwm(u32 mask)
+void __init at91_add_device_pwm(struct atmel_pwm_platform_data *data)
 {
-	if (mask & (1 << AT91_PWM0))
+	if(!data) {
+		return;
+	}
+
+	if (data->pwm_mask & (1 << AT91_PWM0))
 		at91_set_B_periph(AT91_PIN_PD24, 1);	/* enable PWM0 */
 
-	if (mask & (1 << AT91_PWM1))
+	if (data->pwm_mask & (1 << AT91_PWM1))
 		at91_set_B_periph(AT91_PIN_PD31, 1);	/* enable PWM1 */
 
-	if (mask & (1 << AT91_PWM2))
-		at91_set_B_periph(AT91_PIN_PD26, 1);	/* enable PWM2 */
+	if (data->pwm_mask & (1 << AT91_PWM2))
+		at91_set_A_periph(AT91_PIN_PE31, 1);	/* enable PWM2 */
 
-	if (mask & (1 << AT91_PWM3))
+	if (data->pwm_mask & (1 << AT91_PWM3))
 		at91_set_B_periph(AT91_PIN_PD0, 1);	/* enable PWM3 */
 
-	if (mask & (1 << AT91_PWM1_ALT))
-		at91_set_B_periph(AT91_PIN_PD25, 1);	/* enable PWM1 alt. Pin */
-
-	if (mask & (1 << AT91_PWM2_ALT))
-		at91_set_A_periph(AT91_PIN_PE31, 1);	/* enable PWM2 alt. Pin*/
-
-	if (mask & (1 << AT91_PWM3_ALT))
-		at91_set_B_periph(AT91_PIN_PA25, 1);	/* enable PWM3 alt. Pin*/
-
-	pwm_mask = mask;
+	pwm_data = *data;
 
 	platform_device_register(&at91sam9g45_pwm0_device);
 }
 #else
-void __init at91_add_device_pwm(u32 mask) {}
+void __init at91_add_device_pwm(struct atmel_pwm_platform_data *data) {}
 #endif
 
 /* --------------------------------------------------------------------
- *  PWM Backlight
+ *  LCD Controller / PWM Backlight
  * -------------------------------------------------------------------- */
 
+static struct resource lcdc_resources[] = {
+	[0] = {
+		.start	= AT91SAM9G45_LCDC_BASE,
+		.end	= AT91SAM9G45_LCDC_BASE + SZ_4K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = { /* placeholder for static video memory */
+		.start	= 0,
+		.end	= 0,
+		.flags	= IORESOURCE_UNSET,
+	},
+	[2] = {
+		.start	= AT91SAM9G45_ID_LCDC,
+		.end	= AT91SAM9G45_ID_LCDC,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
 #if defined(CONFIG_BACKLIGHT_ATMEL_PWM) || defined(BACKLIGHT_ATMEL_PWM_MODULE)
 static struct atmel_pwm_bl_platform_data pwm_bl_data;
 struct platform_device at91_pwm_bl_device = {
 	.name           = "atmel-pwm-bl",
 	.id             = 0,
 	.dev            = {
-	.platform_data = &pwm_bl_data,
+		.parent = &at91sam9g45_pwm0_device.dev,
+		.platform_data = &pwm_bl_data,
 	},
 };
 
@@ -1246,12 +1150,103 @@ void __init at91_add_device_pwm_bl(struc
 		return;
 
 	pwm_bl_data = *data;
+	if(lcdc_resources[1].flags == IORESOURCE_UNSET)
+		pwm_bl_data.pre_initialized = 0;
+	else
+		pwm_bl_data.pre_initialized = 1;
 	platform_device_register(&at91_pwm_bl_device);
 }
 #else
 void __init at91_add_device_pwm_bl(struct atmel_pwm_bl_platform_data *data) {}
 #endif
 
+#if defined(CONFIG_FB_ATMEL) || defined(CONFIG_FB_ATMEL_MODULE)
+static u64 lcdc_dmamask = DMA_BIT_MASK(32);
+static struct atmel_lcdfb_info lcdc_data;
+
+static struct platform_device at91_lcdc_device = {
+	.name		= "atmel_lcdfb",
+	.id		= 0,
+	.dev		= {
+				.dma_mask		= &lcdc_dmamask,
+				.coherent_dma_mask	= DMA_BIT_MASK(32),
+				.platform_data		= &lcdc_data,
+	},
+	.resource	= lcdc_resources,
+	.num_resources	= ARRAY_SIZE(lcdc_resources),
+};
+
+static int __init at91_fixed_screen(char *options)
+{
+	uint32_t fixed_screen_address;
+	uint32_t fixed_screen_size;
+	int display_enabled;
+
+	if (sscanf(options, "%d,%x,%x", &display_enabled, &fixed_screen_address, &fixed_screen_size) != 3) {
+		pr_err("AT91SAM9G45 platform: wrong vidmem parameter syntax. Ignoring.\n");
+		fixed_screen_address = 0U;	/* to be sure */
+		return 0;
+	}
+	/* nothing shown yet? e.g. no splash screen */
+	if (display_enabled == 0) {
+		/* do not use any hard coded framebuffer address in this case */
+		fixed_screen_address = 0U;
+	} else {
+		pr_info("AT91SAM9G45 platform: Using fixed framebuffer memory at %x\n",
+			fixed_screen_address);
+		lcdc_resources[1].start = fixed_screen_address;
+		lcdc_resources[1].end = fixed_screen_address + fixed_screen_size - 1;
+		lcdc_resources[1].flags	= IORESOURCE_MEM;
+	}
+	return 0;
+}
+__setup("vidmem=", at91_fixed_screen);
+
+void __init at91_add_device_lcdc(struct atmel_lcdfb_info *data)
+{
+	if (!data)
+		return;
+
+	at91_set_A_periph(AT91_PIN_PE0, 0);	/* LCDDPWR */
+
+	//at91_set_A_periph(AT91_PIN_PE2, 0);	/* LCDCC */
+	at91_set_A_periph(AT91_PIN_PE3, 0);	/* LCDVSYNC */
+	at91_set_A_periph(AT91_PIN_PE4, 0);	/* LCDHSYNC */
+	at91_set_A_periph(AT91_PIN_PE5, 0);	/* LCDDOTCK */
+	at91_set_A_periph(AT91_PIN_PE6, 0);	/* LCDDEN */
+	at91_set_A_periph(AT91_PIN_PE7, 0);	/* LCDD0 */
+	at91_set_A_periph(AT91_PIN_PE8, 0);	/* LCDD1 */
+	at91_set_A_periph(AT91_PIN_PE9, 0);	/* LCDD2 */
+	at91_set_A_periph(AT91_PIN_PE10, 0);	/* LCDD3 */
+	at91_set_A_periph(AT91_PIN_PE11, 0);	/* LCDD4 */
+	at91_set_A_periph(AT91_PIN_PE12, 0);	/* LCDD5 */
+	at91_set_A_periph(AT91_PIN_PE13, 0);	/* LCDD6 */
+	at91_set_A_periph(AT91_PIN_PE14, 0);	/* LCDD7 */
+	at91_set_A_periph(AT91_PIN_PE15, 0);	/* LCDD8 */
+	at91_set_A_periph(AT91_PIN_PE16, 0);	/* LCDD9 */
+	at91_set_A_periph(AT91_PIN_PE17, 0);	/* LCDD10 */
+	at91_set_A_periph(AT91_PIN_PE18, 0);	/* LCDD11 */
+	at91_set_A_periph(AT91_PIN_PE19, 0);	/* LCDD12 */
+	at91_set_A_periph(AT91_PIN_PE20, 0);	/* LCDD13 */
+	at91_set_A_periph(AT91_PIN_PE21, 0);	/* LCDD14 */
+	at91_set_A_periph(AT91_PIN_PE22, 0);	/* LCDD15 */
+	at91_set_A_periph(AT91_PIN_PE23, 0);	/* LCDD16 */
+	at91_set_A_periph(AT91_PIN_PE24, 0);	/* LCDD17 */
+	at91_set_A_periph(AT91_PIN_PE25, 0);	/* LCDD18 */
+	at91_set_A_periph(AT91_PIN_PE26, 0);	/* LCDD19 */
+	at91_set_A_periph(AT91_PIN_PE27, 0);	/* LCDD20 */
+	at91_set_A_periph(AT91_PIN_PE28, 0);	/* LCDD21 */
+	at91_set_A_periph(AT91_PIN_PE29, 0);	/* LCDD22 */
+	at91_set_A_periph(AT91_PIN_PE30, 0);	/* LCDD23 */
+
+	lcdc_data = *data;
+	lcdc_data.backlight_dev = &at91_pwm_bl_device.dev;
+	platform_device_register(&at91_lcdc_device);
+}
+#else
+void __init at91_add_device_lcdc(struct atmel_lcdfb_info *data) {}
+#endif
+
 /* --------------------------------------------------------------------
  *  SSC -- Synchronous Serial Controller
  * -------------------------------------------------------------------- */
Index: linux-2.6.39/arch/arm/mach-at91/include/mach/board.h
===================================================================
--- linux-2.6.39.orig/arch/arm/mach-at91/include/mach/board.h
+++ linux-2.6.39/arch/arm/mach-at91/include/mach/board.h
@@ -38,6 +38,7 @@
 #include <linux/spi/spi.h>
 #include <linux/usb/atmel_usba_udc.h>
 #include <linux/atmel-mci.h>
+#include <linux/atmel_pwm.h>
 #include <linux/atmel-pwm-bl.h>
 
 #include <sound/atmel-ac97c.h>
@@ -169,12 +170,8 @@ extern void __init at91_add_device_seria
 #define AT91_PWM1		1
 #define AT91_PWM2		2
 #define AT91_PWM3		3
-#define AT91_PWM0_ALT	4
-#define AT91_PWM1_ALT	5
-#define AT91_PWM2_ALT	6
-#define AT91_PWM3_ALT	7
 
-extern void __init at91_add_device_pwm(u32 mask);
+extern void __init at91_add_device_pwm(struct atmel_pwm_platform_data *data);
 
 /*
  * PWM Backlight
Index: linux-2.6.39/include/linux/atmel_pwm.h
===================================================================
--- linux-2.6.39.orig/include/linux/atmel_pwm.h
+++ linux-2.6.39/include/linux/atmel_pwm.h
@@ -22,13 +22,19 @@
  * mechanism, either polling until they change or getting implicitly
  * notified through a once-per-period interrupt handler.
  */
+#include <linux/io.h>
+
+struct atmel_pwm_platform_data {
+	u32 pwm_mask;
+};
+
 struct pwm_channel {
 	void __iomem	*regs;
 	unsigned	index;
 	unsigned long	mck;
 };
 
-extern int pwm_channel_alloc(int index, struct pwm_channel *ch);
+extern int pwm_channel_alloc(int index, struct pwm_channel *ch, unsigned int enable);
 extern int pwm_channel_free(struct pwm_channel *ch);
 
 extern int pwm_clk_alloc(unsigned prescale, unsigned div);
Index: linux-2.6.39/drivers/misc/atmel_pwm.c
===================================================================
--- linux-2.6.39.orig/drivers/misc/atmel_pwm.c
+++ linux-2.6.39/drivers/misc/atmel_pwm.c
@@ -6,7 +6,7 @@
 #include <linux/interrupt.h>
 #include <linux/platform_device.h>
 #include <linux/atmel_pwm.h>
-
+#include <mach/board.h>
 
 /*
  * This is a simple driver for the PWM controller found in various newer
@@ -81,11 +81,12 @@ static void pwm_dumpregs(struct pwm_chan
  * pwm_channel_alloc - allocate an unused PWM channel
  * @index: identifies the channel
  * @ch: structure to be initialized
+ * @enable: enable the channel
  *
  * Drivers allocate PWM channels according to the board's wiring, and
  * matching board-specific setup code.  Returns zero or negative errno.
  */
-int pwm_channel_alloc(int index, struct pwm_channel *ch)
+int pwm_channel_alloc(int index, struct pwm_channel *ch, unsigned int enable)
 {
 	unsigned long	flags;
 	int		status = 0;
@@ -113,8 +114,12 @@ int pwm_channel_alloc(int index, struct
 		pwm->channel[index] = ch;
 		pwm->handler[index] = NULL;
 
-		/* channel and irq are always disabled when we return */
-		pwm_writel(pwm, PWM_DIS, 1 << index);
+		if(enable)
+			pwm_writel(pwm, PWM_ENA, 1 << index);
+		else
+			pwm_writel(pwm, PWM_DIS, 1 << index);
+
+		/* irq is always disabled when we return */
 		pwm_writel(pwm, PWM_IDR, 1 << index);
 	}
 	spin_unlock_irqrestore(&pwm->lock, flags);
@@ -307,17 +312,17 @@ static int __init pwm_probe(struct platf
 {
 	struct resource *r = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	int irq = platform_get_irq(pdev, 0);
-	u32 *mp = pdev->dev.platform_data;
+	struct atmel_pwm_platform_data *pdata = pdev->dev.platform_data;
 	struct pwm *p;
 	int status = -EIO;
 
 	if (pwm)
 		return -EBUSY;
-	if (!r || irq < 0 || !mp || !*mp)
+	if (!r || irq < 0)
 		return -ENODEV;
-	if (*mp & ~((1<<PWM_NCHAN)-1)) {
+	if (pdata->pwm_mask & ~((1<<PWM_NCHAN)-1)) {
 		dev_warn(&pdev->dev, "mask 0x%x ... more than %d channels\n",
-			*mp, PWM_NCHAN);
+			pdata->pwm_mask, PWM_NCHAN);
 		return -EINVAL;
 	}
 
@@ -327,7 +332,7 @@ static int __init pwm_probe(struct platf
 
 	spin_lock_init(&p->lock);
 	p->pdev = pdev;
-	p->mask = *mp;
+	p->mask = pdata->pwm_mask;
 	p->irq = irq;
 	p->base = ioremap(r->start, r->end - r->start + 1);
 	if (!p->base)
@@ -397,7 +402,7 @@ static int __init pwm_init(void)
 {
 	return platform_driver_probe(&atmel_pwm_driver, pwm_probe);
 }
-module_init(pwm_init);
+arch_initcall(pwm_init);
 
 static void __exit pwm_exit(void)
 {
