Index: linux-3.14.2/drivers/char/Kconfig
===================================================================
--- linux-3.14.2.orig/drivers/char/Kconfig
+++ linux-3.14.2/drivers/char/Kconfig
@@ -485,6 +485,15 @@ config NSC_GPIO
 	  pc8736x_gpio drivers.  If those drivers are built as
 	  modules, this one will be too, named nsc_gpio
 
+config GPIO_DEVICE
+	tristate "GPIO device support"
+	depends on GPIOLIB
+	help
+	  Say Y to enable Linux GPIO device support.  This allows control of
+	  GPIO pins using a character device and ioctl().
+	  Note that kernel designers prefer the use of the sysfs GPIO interface.
+	  This char driver is easier to use from code and faster.
+
 config RAW_DRIVER
 	tristate "RAW driver (/dev/raw/rawN)"
 	depends on BLOCK
Index: linux-3.14.2/drivers/char/Makefile
===================================================================
--- linux-3.14.2.orig/drivers/char/Makefile
+++ linux-3.14.2/drivers/char/Makefile
@@ -45,6 +45,7 @@ obj-$(CONFIG_NWFLASH)		+= nwflash.o
 obj-$(CONFIG_SCx200_GPIO)	+= scx200_gpio.o
 obj-$(CONFIG_PC8736x_GPIO)	+= pc8736x_gpio.o
 obj-$(CONFIG_NSC_GPIO)		+= nsc_gpio.o
+obj-$(CONFIG_GPIO_DEVICE)	+= gpio_dev.o
 obj-$(CONFIG_GPIO_TB0219)	+= tb0219.o
 obj-$(CONFIG_TELCLOCK)		+= tlclk.o
 
Index: linux-3.14.2/drivers/char/gpio_dev.c
===================================================================
--- /dev/null
+++ linux-3.14.2/drivers/char/gpio_dev.c
@@ -0,0 +1,233 @@
+/*
+ * character device wrapper for generic gpio layer
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA02111-1307USA
+ *
+ * Feedback, Bugs...  blogic@openwrt.org
+ *
+ * dpg 20100106
+ */
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/atomic.h>
+#include <linux/init.h>
+#include <linux/genhd.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/fs.h>
+#include <linux/gpio_dev.h>
+
+#define DRVNAME		"gpiodev"
+#define DEVNAME		"gpio"
+
+static int dev_major;
+static struct class *gpiodev_class;
+
+typedef struct { u64 segment[512]; } bitfield;
+
+/* third argument of user space ioctl ('arg' here) contains the <pin> */
+static long
+gpio_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+  long retval = 0;
+
+	switch (cmd)
+	{
+	case GPIO_GET:
+	  if (gpio_cansleep(arg))
+	    retval = gpio_get_value_cansleep(arg);
+	  else
+	    retval = gpio_get_value(arg);
+		break;
+	case GPIO_SET:
+    if (gpio_cansleep(arg))
+      gpio_set_value_cansleep(arg, 1);
+    else
+      gpio_set_value(arg, 1);
+		break;
+	case GPIO_CLEAR:
+    if (gpio_cansleep(arg))
+      gpio_set_value_cansleep(arg, 0);
+    else
+      gpio_set_value(arg, 0);
+		break;
+	case GPIO_DIR_IN:
+		retval = gpio_direction_input(arg);
+		break;
+	case GPIO_DIR_OUT:
+		retval = gpio_direction_output(arg, 0);
+		break;
+	case GPIO_DIR_HIGH:
+		retval = gpio_direction_output(arg, 1);
+		break;
+	case GPIO_REQUEST:
+		/* should be first ioctl operation on <pin> */
+		retval = gpio_request(arg, DRVNAME);
+		if (!retval)
+		{
+		  int seg = arg / 64;
+		  int bit = arg % 64;
+		  bitfield* bf = file->private_data;
+		  bf->segment[seg] |= ((u64)1 << bit);
+		}
+		break;
+	case GPIO_FREE:
+		/* should be last ioctl operation on <pin> */
+		/* may be needed first if previous user missed this ioctl */
+		gpio_free(arg);
+    {
+      int seg = arg / 64;
+      int bit = arg % 64;
+      bitfield* bf = file->private_data;
+      bf->segment[seg] &= ~((u64)1 << bit);
+    }
+		break;
+	case GPIO_CAN_SLEEP:
+		retval = gpio_cansleep(arg);
+		break;
+	default:
+		retval = -EINVAL;
+		/* = -ENOTTY; // correct return but ... */
+		break;
+	}
+	return retval;
+}
+
+/* Allow co-incident opens */
+static int
+gpio_open(struct inode *inode, struct file *file)
+{
+	int result = 0;
+	unsigned int dev_minor = MINOR(inode->i_rdev);
+	bitfield* gpioBitfield;
+
+	if (dev_minor != 0)
+	{
+		printk(KERN_ERR DRVNAME ": trying to access unknown minor device -> %d\n", dev_minor);
+		result = -ENODEV;
+		goto out;
+	}
+
+	gpioBitfield = kzalloc(sizeof(*gpioBitfield), GFP_KERNEL);
+	if (!gpioBitfield)
+	{
+	  result = -ENOMEM;
+	  goto out;
+	}
+
+	file->private_data = gpioBitfield;
+
+out:
+	return result;
+}
+
+static int
+gpio_close(struct inode * inode, struct file * file)
+{
+	/* find all tracked <pin>s requested by this fd and gpio_free()
+   * them here
+	 */
+  int pin;
+  bitfield* bf = file->private_data;
+
+  for (pin = 0; pin < 32768; pin++)
+  {
+    int seg = pin / 64;
+    int bit = pin % 64;
+    if (bf->segment[seg] & ((u64)1 << bit))
+    {
+      gpio_free(pin);
+    }
+  }
+
+  kfree(bf);
+
+	return 0;
+}
+
+struct file_operations gpio_fops = {
+	unlocked_ioctl:	gpio_ioctl,
+	open:		gpio_open,
+	release:	gpio_close
+};
+
+static int
+gpio_probe(struct platform_device *dev)
+{
+	int result = 0;
+
+	return result;
+}
+
+static int
+gpio_remove(struct platform_device *dev)
+{
+	return 0;
+}
+
+static struct
+platform_driver gpio_driver = {
+	.probe = gpio_probe,
+	.remove = gpio_remove,
+	.driver = {
+		.name = "GPIODEV",
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init
+gpio_mod_init(void)
+{
+	int ret = platform_driver_register(&gpio_driver);
+	if (ret)
+	{
+	  printk(KERN_INFO DRVNAME ": Error registering platfom driver!\n");
+	  goto out;
+	}
+
+  dev_major = register_chrdev(0, DEVNAME, &gpio_fops);
+  if (!dev_major)
+  {
+    printk(KERN_ERR DRVNAME ": Error whilst opening %s \n", DEVNAME);
+    ret = -ENODEV;
+    goto out;
+  }
+  gpiodev_class = class_create(THIS_MODULE, DRVNAME);
+  device_create(gpiodev_class, NULL, MKDEV(dev_major, 0), 0, DEVNAME);
+  printk(KERN_INFO DRVNAME ": gpio device registered with major %d\n", dev_major);
+out:
+	return ret;
+}
+
+static void __exit
+gpio_mod_exit(void)
+{
+  device_destroy(gpiodev_class, MKDEV(dev_major, 0));
+  class_destroy(gpiodev_class);
+  unregister_chrdev(dev_major, DEVNAME);
+	platform_driver_unregister(&gpio_driver);
+}
+
+module_init (gpio_mod_init);
+module_exit (gpio_mod_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("John Crispin / OpenWrt +");
+MODULE_DESCRIPTION("Character device for for generic gpio api");
Index: linux-3.14.2/include/uapi/linux/gpio_dev.h
===================================================================
--- /dev/null
+++ linux-3.14.2/include/uapi/linux/gpio_dev.h
@@ -0,0 +1,42 @@
+#ifndef _GPIO_DEV_H__
+#define _GPIO_DEV_H__
+
+/*********************************************************************
+ *
+ * This Linux kernel header is expanded from the original driver
+ * (gpio_dev) by John Crispin. It provides an ioctl based interface to
+ * GPIO pins via the /dev/gpio char device and gpiolib within the kernel.
+ * The third argument to each ioctl is the GPIO pin number.
+ *
+ * This driver has been tested with lk 2.6.31 and works. The original
+ * driver fails quietly with this version. The protocol is now a bit
+ * different: the ioctl(fd, GPIO_REQUEST, <pin>) should be called
+ * after the open("/dev/gpio", O_RDWR) to determine if the <pin> is
+ * already in use. If the ioctl is successful (i.e. returns 0 for not
+ * in use) then the <pin> is claimed by this driver and
+ * ioctl(fd, GPIO_FREE, <pin>) should be called prior to close(fd) .
+ *
+ * See <kernel_source>/Documentation/gpio.txt
+ * Note that kernel designers prefer the use of the sysfs gpio interface.
+ * This char driver is easier to use from code and faster.
+ ********************************************************************/
+
+/* This header can be included in both the user and kernel spaces */
+/* The _IO macro is defined in sys/ioctl.h */
+
+#define IOC_GPIODEV_MAGIC  'B'
+
+#define GPIO_GET        _IO(IOC_GPIODEV_MAGIC, 10)
+#define GPIO_SET        _IO(IOC_GPIODEV_MAGIC, 11)
+#define GPIO_CLEAR      _IO(IOC_GPIODEV_MAGIC, 12)
+#define GPIO_DIR_IN     _IO(IOC_GPIODEV_MAGIC, 13)
+#define GPIO_DIR_OUT    _IO(IOC_GPIODEV_MAGIC, 14)
+        /* Sets the direction out and clears the <pin> (low) */
+
+#define GPIO_DIR_HIGH   _IO(IOC_GPIODEV_MAGIC, 15)
+        /* Sets the direction out and sets the <pin> (high) */
+#define GPIO_REQUEST    _IO(IOC_GPIODEV_MAGIC, 16)
+#define GPIO_FREE       _IO(IOC_GPIODEV_MAGIC, 17)
+#define GPIO_CAN_SLEEP  _IO(IOC_GPIODEV_MAGIC, 18)
+
+#endif
Index: linux-3.14.2/include/uapi/linux/Kbuild
===================================================================
--- linux-3.14.2.orig/include/uapi/linux/Kbuild
+++ linux-3.14.2/include/uapi/linux/Kbuild
@@ -132,6 +132,7 @@ header-y += gen_stats.h
 header-y += genetlink.h
 header-y += gfs2_ondisk.h
 header-y += gigaset_dev.h
+header-y += gpio_dev.h
 header-y += hdlc.h
 header-y += hdlcdrv.h
 header-y += hdreg.h
