Index: tslib-1.0/src/ts_open.c
===================================================================
--- tslib-1.0.orig/src/ts_open.c	2011-09-12 17:16:33.169543159 +0200
+++ tslib-1.0/src/ts_open.c	2011-09-12 17:47:45.129542387 +0200
@@ -13,6 +13,8 @@
 #include "config.h"
 #include <stdlib.h>
 #include <string.h>
+#include <pthread.h>
+#include <stdio.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
@@ -26,11 +28,147 @@
 
 extern struct tslib_module_info __ts_raw;
 
+#define TS_MAX_BUFFER_STRING_LEN	256
+
+#define TS_STORE_FIRMWARE_BUFFER_SIZE 5
+#define TS_STORE_FIRMWARE_SLEEP_TIME 250
+static char input_name_buffer[TS_MAX_BUFFER_STRING_LEN];
+static char sysfs_cal_attr_string[TS_MAX_BUFFER_STRING_LEN];
+static char calibate_data[TS_SYSFS_DEVICE_CALIBRATE_DATA_LENGTH];
+static pthread_t firmware_thread = 0;
+static const char* CALIBRATION_FILE_CFG_HEADER[12] = {
+	"This is a touch configuration file for the pinnacle capacitive touch controller via I2C bus.\n",
+	"address: a: 0x[UINT16] (write length: [BYTE] write data: 0x[BYTE] 0x[BYTE] 0x[BYTE] 0x[BYTE]) (read length: [BYTE] read verification: 0x[BYTE] 0x[BYTE] 0x[BYTE] 0x[BYTE]) (read verification: 0x[BYTE] 0x[BYTE] 0x[BYTE] 0x[BYTE]) enable read verification: [0 | 1] sleep time in ms after one line: [UINT32] wait for interrupt mask: [BYTE]\n",
+	"!!! 1 line free for the parser\n",
+	"\n",
+	"a: 0x0000 (wl: 0 w: 0x00 0x00 0x00 0x00) (rl: 1 r: 0x07 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 1 s: 0 i:0x0\n",
+	"a: 0x0001 (wl: 0 w: 0x00 0x00 0x00 0x00) (rl: 1 r: 0x3A 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 1 s: 0 i:0x0\n",
+	"a: 0x001F (wl: 0 w: 0x00 0x00 0x00 0x00) (rl: 1 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 1 s: 0 i:0x0\n",
+	"a: 0x0048 (wl: 0 w: 0x00 0x00 0x00 0x00) (rl: 4 r: 0x00 0x40 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 1 s: 0 i:0x0\n",
+	"a: 0x00EE (wl: 1 w: 0x0B 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	"a: 0x000A (wl: 1 w: 0x02 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	"a: 0x0003 (wl: 1 w: 0x08 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	NULL
+};
+static const char* CALIBRATION_FILE_CFG_FOOTER[4] = {
+	"a: 0x0003 (wl: 1 w: 0x00 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	"a: 0x0007 (wl: 1 w: 0x1A 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	"a: 0x0004 (wl: 1 w: 0x23 0x00 0x00 0x00) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n",
+	NULL
+};
+static const char CFG_FILE_FORMAT_OUTPUT[] = "a: 0x%04x (wl: %d w: 0x%02x 0x%02x 0x%02x 0x%02x) (rl: 0 r: 0x00 0x00 0x00 0x00) (v: 0xFF 0xFF 0xFF 0xFF) ev: 0 s: 0 i:0x0\n";
+
+static void *hw_store_firmware( void *ptr )
+{
+	char buffer[TS_STORE_FIRMWARE_BUFFER_SIZE];
+	int sysfs_device_fd = *(int*)ptr;
+	ssize_t char_read;
+	int thread_finished = 0;
+	FILE* output = NULL;
+	int counter;
+
+	while(thread_finished == 0) {
+		char_read = read(sysfs_device_fd, buffer, TS_STORE_FIRMWARE_BUFFER_SIZE);
+		if (char_read == -1) {
+			ts_error("Failed reading calibrated attribute. Terminating thread.\n");
+			return NULL;
+		}
+
+		if (buffer[0] == '1') {
+			close(sysfs_device_fd);
+			sysfs_device_fd = open(input_name_buffer, O_RDONLY);
+			if (sysfs_device_fd == -1) {
+				ts_error("Failed reading calibrated data attribute. Terminating thread.\n");
+				return NULL;
+			}
+			char_read = read(sysfs_device_fd, calibate_data, TS_SYSFS_DEVICE_CALIBRATE_DATA_LENGTH);
+			if (char_read == -1) {
+				ts_error("Failed reading the complete calibrated data. Terminating thread.\n");
+				close(sysfs_device_fd);
+				return NULL;
+			}
+			close(sysfs_device_fd);
+			output = fopen(TS_HW_FIRMWARE_PATH TS_HW_FIRMWARE_FILE_NAME, "w");
+			if (output == NULL) {
+				ts_error("Failed creating firmware file '%s'. Terminating thread.\n", TS_HW_FIRMWARE_PATH TS_HW_FIRMWARE_FILE_NAME);
+				return NULL;
+			}
+			for (counter = 0; CALIBRATION_FILE_CFG_HEADER[counter]; counter++) {
+				if (fputs(CALIBRATION_FILE_CFG_HEADER[counter], output) < 0) {
+					ts_error("Failed writing header into firmware config file. Terminating thread.\n");
+					fclose(output);
+					return NULL;
+				}
+			}
+			for (counter = 0; counter < (char_read >> 2); counter++) {
+				if (fprintf(output, CFG_FILE_FORMAT_OUTPUT, TS_PINNACLE_CAL_REG_START + (counter<<2),
+							4, calibate_data[(counter<<2)], calibate_data[(counter<<2)+1],
+							calibate_data[(counter<<2)+2], calibate_data[(counter<<2)+3]) < 0) {
+					ts_error("Failed writing calibration data into firmware config file. Terminating thread.\n");
+					fclose(output);
+					return NULL;
+				}
+			}
+			switch (char_read & 0x3) {
+				case 1:
+					if (fprintf(output, CFG_FILE_FORMAT_OUTPUT, TS_PINNACLE_CAL_REG_START + (counter<<2),
+								1, calibate_data[(counter<<2)], 0, 0, 0) < 0) {
+						ts_error("Failed writing calibration data into firmware config file. Terminating thread.\n");
+						fclose(output);
+						return NULL;
+					}
+					break;
+
+				case 2:
+					if (fprintf(output, CFG_FILE_FORMAT_OUTPUT, TS_PINNACLE_CAL_REG_START + (counter<<2),
+								2, calibate_data[(counter<<2)], calibate_data[(counter<<2)+1], 0 , 0) < 0) {
+						ts_error("Failed writing calibration data into firmware config file. Terminating thread.\n");
+						fclose(output);
+						return NULL;
+					}
+					break;
+
+				case 3:
+					if (fprintf(output, CFG_FILE_FORMAT_OUTPUT, TS_PINNACLE_CAL_REG_START + (counter<<2),
+								3, calibate_data[(counter<<2)], calibate_data[(counter<<2)+1], calibate_data[(counter<<2)+2], 0) < 0) {
+						ts_error("Failed writing calibration data into firmware config file. Terminating thread.\n");
+						fclose(output);
+						return NULL;
+					}
+					break;
+			}
+			for (counter = 0; CALIBRATION_FILE_CFG_FOOTER[counter]; counter++) {
+				if (fputs(CALIBRATION_FILE_CFG_FOOTER[counter], output) < 0) {
+					ts_error("Failed writing footer into firmware config file. Terminating thread.\n");
+					fclose(output);
+					return NULL;
+				}
+			}
+			fclose(output);
+			thread_finished = 1;
+		} else {
+			ts_error("Calibrated attribute signals calibration is still pending. Sleeping for %dms.\n", TS_STORE_FIRMWARE_SLEEP_TIME);
+			close(sysfs_device_fd);
+			sleep(TS_STORE_FIRMWARE_SLEEP_TIME);
+			sysfs_device_fd = open(sysfs_cal_attr_string, O_RDONLY);
+			if (sysfs_device_fd == -1) {
+				ts_error("Failed reopening firmware config file. Terminating thread.\n");
+				return NULL;
+			}
+		}
+	}
+
+	return NULL;
+}
+
 struct tsdev *ts_open(const char *name, int nonblock)
 {
 	struct tsdev *ts;
 	int flags = O_RDONLY;
 	char *flag_str;
+	int firmware_fd, sysfs_device_fd;
+	char* buffer = NULL;
+	char* input_name = NULL;
 
 	flag_str = getenv("TSLIB_TSDEVICEFLAGS");
 	if (flag_str) {
@@ -45,15 +183,54 @@
 	if (nonblock)
 		flags |= O_NONBLOCK;
 
+
 	ts = malloc(sizeof(struct tsdev));
-	if (ts) {
-		memset(ts, 0, sizeof(struct tsdev));
+	if (!ts) {
+		return ts;
+	}
+	memset(ts, 0, sizeof(struct tsdev));
 
-		ts->fd = open(name, flags);
-		if (ts->fd == -1)
-			goto free;
+	ts->fd = open(name, flags);
+	if (ts->fd == -1)
+		goto free;
+
+	// find the input device event name
+	buffer = strchr(name, '/');
+	while (buffer) {
+		input_name = buffer + 1;
+		buffer = strchr(buffer, '/');
 	}
 
+	if (!input_name) {
+		return ts;
+	}
+
+	strcpy(sysfs_cal_attr_string, TS_SYSFS_CLASS_PATH_TO_INPUT);
+	strcat(sysfs_cal_attr_string, input_name);
+	strcat(sysfs_cal_attr_string, TS_SYSFS_CLASS_PATH_FROM_INPUT_TO_DEV);
+	strcpy(input_name_buffer, sysfs_cal_attr_string);
+	strcat(sysfs_cal_attr_string, TS_SYSFS_DEVICE_CALIBRATE_ATTRIB);
+	strcat(input_name_buffer, TS_SYSFS_DEVICE_CALIBRATE_DATA_ATTRIB);
+
+	ts_error(sysfs_cal_attr_string);
+	sysfs_device_fd = open(sysfs_cal_attr_string, O_RDONLY);
+	if (sysfs_device_fd == -1) {
+		ts_error("Driver doesn't support hardware calibration. Skipping test.\n");
+		return ts;
+	}
+
+	firmware_fd = open(TS_HW_FIRMWARE_PATH TS_HW_FIRMWARE_FILE_NAME, O_RDONLY);
+	if (firmware_fd != -1) {
+		ts_error("Hardware calibration file present. Skipping write.\n");
+		close(sysfs_device_fd);
+		close(firmware_fd);
+		return ts;
+	}
+
+	if (pthread_create(&firmware_thread, NULL, hw_store_firmware, &sysfs_device_fd) == 0) {
+		ts_error("Failed creating thread.\n");
+		close(sysfs_device_fd);
+	}
 	return ts;
 
 free:
Index: tslib-1.0/src/tslib-private.h
===================================================================
--- tslib-1.0.orig/src/tslib-private.h	2006-08-24 23:02:55.000000000 +0200
+++ tslib-1.0/src/tslib-private.h	2011-09-12 17:16:33.389543158 +0200
@@ -32,6 +32,15 @@
 int ts_load_module_raw(struct tsdev *dev, const char *module, const char *params);
 int ts_error(const char *fmt, ...);
 
+#define TS_HW_FIRMWARE_PATH	"/lib/firmware/"
+#define TS_HW_FIRMWARE_FILE_NAME "pinnacle_ts_cal.fw"
+#define TS_SYSFS_CLASS_PATH_TO_INPUT "/sys/class/input/"
+#define TS_SYSFS_CLASS_PATH_FROM_INPUT_TO_DEV "/device/device/"
+#define TS_SYSFS_DEVICE_CALIBRATE_ATTRIB "calibrated"
+#define TS_SYSFS_DEVICE_CALIBRATE_DATA_ATTRIB "cal_data"
+#define TS_SYSFS_DEVICE_CALIBRATE_DATA_LENGTH 92 * 2
+#define TS_PINNACLE_CAL_REG_START 0x1df
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
Index: tslib-1.0/src/Makefile.am
===================================================================
--- tslib-1.0.orig/src/Makefile.am	2011-09-12 17:55:08.679542204 +0200
+++ tslib-1.0/src/Makefile.am	2011-09-12 17:55:14.369795000 +0200
@@ -21,4 +21,4 @@
 		   ts_read.c ts_read_raw.c
 libts_la_LDFLAGS = -version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE) \
 		   -release $(LT_RELEASE) -export-dynamic
-libts_la_LIBADD  = -ldl
+libts_la_LIBADD  = -ldl -lpthread
