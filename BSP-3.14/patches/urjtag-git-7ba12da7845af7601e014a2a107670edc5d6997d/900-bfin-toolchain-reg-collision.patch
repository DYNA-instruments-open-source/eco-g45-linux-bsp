--- a/include/urjtag/bfin.h
+++ b/include/urjtag/bfin.h
@@ -37,19 +37,19 @@
 
 enum core_regnum
 {
-    REG_R0 = T_REG_R, REG_R1, REG_R2, REG_R3, REG_R4, REG_R5, REG_R6, REG_R7,
-    REG_P0 = T_REG_P, REG_P1, REG_P2, REG_P3, REG_P4, REG_P5, REG_SP, REG_FP,
-    REG_I0 = T_REG_I, REG_I1, REG_I2, REG_I3,
-    REG_M0 = T_REG_M, REG_M1, REG_M2, REG_M3,
-    REG_B0 = T_REG_B, REG_B1, REG_B2, REG_B3,
-    REG_L0 = T_REG_L, REG_L1, REG_L2, REG_L3,
-    REG_A0x = T_REG_A, REG_A0w, REG_A1x, REG_A1w,
-    REG_ASTAT = 0x46,
-    REG_RETS = 0x47,
-    REG_LC0 = 0x60, REG_LT0, REG_LB0, REG_LC1, REG_LT1, REG_LB1,
-    REG_CYCLES, REG_CYCLES2,
-    REG_USP = 0x70, REG_SEQSTAT, REG_SYSCFG,
-    REG_RETI, REG_RETX, REG_RETN, REG_RETE, REG_EMUDAT,
+    T_REG_R0 = T_REG_R, T_REG_R1, T_REG_R2, T_REG_R3, T_REG_R4, T_REG_R5, T_REG_R6, T_REG_R7,
+    T_REG_P0 = T_REG_P, T_REG_P1, T_REG_P2, T_REG_P3, T_REG_P4, T_REG_P5, T_REG_SP, T_REG_FP,
+    T_REG_I0 = T_REG_I, T_REG_I1, T_REG_I2, T_REG_I3,
+    T_REG_M0 = T_REG_M, T_REG_M1, T_REG_M2, T_REG_M3,
+    T_REG_B0 = T_REG_B, T_REG_B1, T_REG_B2, T_REG_B3,
+    T_REG_L0 = T_REG_L, T_REG_L1, T_REG_L2, T_REG_L3,
+    T_REG_A0x = T_REG_A, T_REG_A0w, T_REG_A1x, T_REG_A1w,
+    T_REG_ASTAT = 0x46,
+    T_REG_RETS = 0x47,
+    T_REG_LC0 = 0x60, T_REG_LT0, T_REG_LB0, T_REG_LC1, T_REG_LT1, T_REG_LB1,
+    T_REG_CYCLES, T_REG_CYCLES2,
+    T_REG_USP = 0x70, T_REG_SEQSTAT, T_REG_SYSCFG,
+    T_REG_RETI, T_REG_RETX, T_REG_RETN, T_REG_RETE, T_REG_EMUDAT,
 };
 
 #define CLASS_MASK                      0xf0
--- a/src/bfin/bfin.c
+++ b/src/bfin/bfin.c
@@ -820,17 +820,17 @@ part_register_get (urj_chain_t *chain, i
     uint32_t r0 = 0;
 
     if (DREG_P (reg) || PREG_P (reg))
-        part_emuir_set (chain, n, gen_move (REG_EMUDAT, reg), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set (chain, n, gen_move (T_REG_EMUDAT, reg), URJ_CHAIN_EXITMODE_IDLE);
     else
     {
-        r0 = part_register_get (chain, n, REG_R0);
+        r0 = part_register_get (chain, n, T_REG_R0);
 
         part_scan_select (chain, n, DBGCTL_SCAN);
         part_dbgctl_bit_set_emuirlpsz_2 (chain, n);
         urj_tap_chain_shift_data_registers_mode (chain, 0, 1, URJ_CHAIN_EXITMODE_UPDATE);
 
-        part_emuir_set_2 (chain, n, gen_move (REG_R0, reg),
-                          gen_move (REG_EMUDAT, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set_2 (chain, n, gen_move (T_REG_R0, reg),
+                          gen_move (T_REG_EMUDAT, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
 
         part_scan_select (chain, n, DBGCTL_SCAN);
         part_dbgctl_bit_clear_emuirlpsz_2 (chain, n);
@@ -843,7 +843,7 @@ part_register_get (urj_chain_t *chain, i
     r = part->active_instruction->data_register->out;
 
     if (!DREG_P (reg) && !PREG_P (reg))
-        part_register_set (chain, n, REG_R0, r0);
+        part_register_set (chain, n, T_REG_R0, r0);
 
     return emudat_value (r);
 }
@@ -856,7 +856,7 @@ part_register_set (urj_chain_t *chain, i
     uint32_t r0 = 0;
 
     if (!DREG_P (reg) && !PREG_P (reg))
-        r0 = part_register_get (chain, n, REG_R0);
+        r0 = part_register_get (chain, n, T_REG_R0);
 
     part_scan_select (chain, n, EMUDAT_SCAN);
 
@@ -868,46 +868,46 @@ part_register_set (urj_chain_t *chain, i
     urj_tap_chain_shift_data_registers_mode (chain, 0, 1, URJ_CHAIN_EXITMODE_UPDATE);
 
     if (DREG_P (reg) || PREG_P (reg))
-        part_emuir_set (chain, n, gen_move (reg, REG_EMUDAT), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set (chain, n, gen_move (reg, T_REG_EMUDAT), URJ_CHAIN_EXITMODE_IDLE);
     else
     {
         part_scan_select (chain, n, DBGCTL_SCAN);
         part_dbgctl_bit_set_emuirlpsz_2 (chain, n);
         urj_tap_chain_shift_data_registers_mode (chain, 0, 1, URJ_CHAIN_EXITMODE_UPDATE);
 
-        part_emuir_set_2 (chain, n, gen_move (REG_R0, REG_EMUDAT),
-                          gen_move (reg, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set_2 (chain, n, gen_move (T_REG_R0, T_REG_EMUDAT),
+                          gen_move (reg, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
 
         part_scan_select (chain, n, DBGCTL_SCAN);
         part_dbgctl_bit_clear_emuirlpsz_2 (chain, n);
         urj_tap_chain_shift_data_registers_mode (chain, 0, 1, URJ_CHAIN_EXITMODE_UPDATE);
 
-        part_register_set (chain, n, REG_R0, r0);
+        part_register_set (chain, n, T_REG_R0, r0);
     }
 }
 
 uint32_t
 part_get_r0 (urj_chain_t *chain, int n)
 {
-    return part_register_get (chain, n, REG_R0);
+    return part_register_get (chain, n, T_REG_R0);
 }
 
 uint32_t
 part_get_p0 (urj_chain_t *chain, int n)
 {
-    return part_register_get (chain, n, REG_P0);
+    return part_register_get (chain, n, T_REG_P0);
 }
 
 void
 part_set_r0 (urj_chain_t *chain, int n, uint32_t value)
 {
-    part_register_set (chain, n, REG_R0, value);
+    part_register_set (chain, n, T_REG_R0, value);
 }
 
 void
 part_set_p0 (urj_chain_t *chain, int n, uint32_t value)
 {
-    part_register_set (chain, n, REG_P0, value);
+    part_register_set (chain, n, T_REG_P0, value);
 }
 
 void
@@ -1001,7 +1001,7 @@ chain_system_reset (urj_chain_t *chain)
     /* Write 0x7 to SWRST to start system reset. */
     part_set_p0 (chain, chain->main_part, SWRST);
     part_set_r0 (chain, chain->main_part, 0x7);
-    part_emuir_set (chain, chain->main_part, gen_store16_offset (REG_P0, 0, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+    part_emuir_set (chain, chain->main_part, gen_store16_offset (T_REG_P0, 0, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
 
     /*
      * Delay at least 10 SCLKs instead of doing an SSYNC insn.
@@ -1014,7 +1014,7 @@ chain_system_reset (urj_chain_t *chain)
 
     /* Write 0x0 to SWRST to stop system reset. */
     part_set_r0 (chain, chain->main_part, 0);
-    part_emuir_set (chain, chain->main_part, gen_store16_offset (REG_P0, 0, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+    part_emuir_set (chain, chain->main_part, gen_store16_offset (T_REG_P0, 0, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
 
     /* Delay at least 1 SCLK; see comment above for more info. */
     usleep (100);
@@ -1064,14 +1064,14 @@ part_emupc_reset (urj_chain_t *chain, in
     urj_part_t *part = chain->parts->parts[n];
     uint32_t p0;
 
-    p0 = part_register_get (chain, n, REG_P0);
+    p0 = part_register_get (chain, n, T_REG_P0);
 
     BFIN_PART_EMUPC (part) = new_pc;
 
-    part_register_set (chain, n, REG_P0, new_pc);
-    part_emuir_set (chain, n, gen_jump_reg (REG_P0), URJ_CHAIN_EXITMODE_IDLE);
+    part_register_set (chain, n, T_REG_P0, new_pc);
+    part_emuir_set (chain, n, gen_jump_reg (T_REG_P0), URJ_CHAIN_EXITMODE_IDLE);
 
-    part_register_set (chain, n, REG_P0, p0);
+    part_register_set (chain, n, T_REG_P0, p0);
 }
 
 uint32_t
@@ -1089,22 +1089,22 @@ part_mmr_read_clobber_r0 (urj_chain_t *c
 
         if (size == 2)
             part_emuir_set_2 (chain, n,
-                              gen_load16z (REG_R0, REG_P0),
-                              gen_move (REG_EMUDAT, REG_R0),
+                              gen_load16z (T_REG_R0, T_REG_P0),
+                              gen_move (T_REG_EMUDAT, T_REG_R0),
                               URJ_CHAIN_EXITMODE_UPDATE);
         else
             part_emuir_set_2 (chain, n,
-                              gen_load32 (REG_R0, REG_P0),
-                              gen_move (REG_EMUDAT, REG_R0),
+                              gen_load32 (T_REG_R0, T_REG_P0),
+                              gen_move (T_REG_EMUDAT, T_REG_R0),
                               URJ_CHAIN_EXITMODE_UPDATE);
     }
     else
     {
         if (size == 2)
-            part_emuir_set (chain, n, gen_load16z_offset (REG_R0, REG_P0, offset), URJ_CHAIN_EXITMODE_IDLE);
+            part_emuir_set (chain, n, gen_load16z_offset (T_REG_R0, T_REG_P0, offset), URJ_CHAIN_EXITMODE_IDLE);
         else
-            part_emuir_set (chain, n, gen_load32_offset (REG_R0, REG_P0, offset), URJ_CHAIN_EXITMODE_IDLE);
-        part_emuir_set (chain, n, gen_move (REG_EMUDAT, REG_R0), URJ_CHAIN_EXITMODE_UPDATE);
+            part_emuir_set (chain, n, gen_load32_offset (T_REG_R0, T_REG_P0, offset), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set (chain, n, gen_move (T_REG_EMUDAT, T_REG_R0), URJ_CHAIN_EXITMODE_UPDATE);
     }
     value = part_emudat_get (chain, n, URJ_CHAIN_EXITMODE_IDLE);
 
@@ -1124,14 +1124,14 @@ part_mmr_read (urj_chain_t *chain, int n
     uint32_t p0, r0;
     uint32_t value;
 
-    p0 = part_register_get (chain, n, REG_P0);
-    r0 = part_register_get (chain, n, REG_R0);
+    p0 = part_register_get (chain, n, T_REG_P0);
+    r0 = part_register_get (chain, n, T_REG_R0);
 
-    part_register_set (chain, n, REG_P0, addr);
+    part_register_set (chain, n, T_REG_P0, addr);
     value = part_mmr_read_clobber_r0 (chain, n, 0, size);
 
-    part_register_set (chain, n, REG_P0, p0);
-    part_register_set (chain, n, REG_R0, r0);
+    part_register_set (chain, n, T_REG_P0, p0);
+    part_register_set (chain, n, T_REG_R0, r0);
 
     return value;
 }
@@ -1151,22 +1151,22 @@ part_mmr_write_clobber_r0 (urj_chain_t *
 
         if (size == 2)
             part_emuir_set_2 (chain, n,
-                              gen_move (REG_R0, REG_EMUDAT),
-                              gen_store16 (REG_P0, REG_R0),
+                              gen_move (T_REG_R0, T_REG_EMUDAT),
+                              gen_store16 (T_REG_P0, T_REG_R0),
                               URJ_CHAIN_EXITMODE_IDLE);
         else
             part_emuir_set_2 (chain, n,
-                              gen_move (REG_R0, REG_EMUDAT),
-                              gen_store32 (REG_P0, REG_R0),
+                              gen_move (T_REG_R0, T_REG_EMUDAT),
+                              gen_store32 (T_REG_P0, T_REG_R0),
                               URJ_CHAIN_EXITMODE_IDLE);
     }
     else
     {
-        part_emuir_set (chain, n, gen_move (REG_R0, REG_EMUDAT), URJ_CHAIN_EXITMODE_IDLE);
+        part_emuir_set (chain, n, gen_move (T_REG_R0, T_REG_EMUDAT), URJ_CHAIN_EXITMODE_IDLE);
         if (size == 2)
-            part_emuir_set (chain, n, gen_store16_offset (REG_P0, offset, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+            part_emuir_set (chain, n, gen_store16_offset (T_REG_P0, offset, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
         else
-            part_emuir_set (chain, n, gen_store32_offset (REG_P0, offset, REG_R0), URJ_CHAIN_EXITMODE_IDLE);
+            part_emuir_set (chain, n, gen_store32_offset (T_REG_P0, offset, T_REG_R0), URJ_CHAIN_EXITMODE_IDLE);
     }
 
     if (offset == 0)
@@ -1182,14 +1182,14 @@ part_mmr_write (urj_chain_t *chain, int
 {
     uint32_t p0, r0;
 
-    p0 = part_register_get (chain, n, REG_P0);
-    r0 = part_register_get (chain, n, REG_R0);
+    p0 = part_register_get (chain, n, T_REG_P0);
+    r0 = part_register_get (chain, n, T_REG_R0);
 
-    part_register_set (chain, n, REG_P0, addr);
+    part_register_set (chain, n, T_REG_P0, addr);
     part_mmr_write_clobber_r0 (chain, n, 0, data, size);
 
-    part_register_set (chain, n, REG_P0, p0);
-    part_register_set (chain, n, REG_R0, r0);
+    part_register_set (chain, n, T_REG_P0, p0);
+    part_register_set (chain, n, T_REG_R0, r0);
 }
 
 struct bfin_part_data bfin_part_data_initializer =
