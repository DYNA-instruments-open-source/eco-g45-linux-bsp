Index: tslib-1.0/configure.ac
===================================================================
--- tslib-1.0.orig/configure.ac
+++ tslib-1.0/configure.ac
@@ -70,6 +70,15 @@ AC_ARG_ENABLE(lowpass,
 AC_MSG_RESULT($lowpass_module)
 AM_CONDITIONAL(ENABLE_LOWPASS_MODULE, test "$lowpass_module" = "yes")
 
+AC_MSG_CHECKING([whether median module is requested])
+AC_ARG_ENABLE(median,
+	AS_HELP_STRING([--enable-median],
+		[Enable building of median filter (default=yes)]),
+	[median_module=$enableval],
+	[median_module=yes])
+AC_MSG_RESULT($median_module)
+AM_CONDITIONAL(ENABLE_MEDIAN_MODULE, test "$median_module" = "yes")
+
 AC_MSG_CHECKING([whether dejitter module is requested]) 
 AC_ARG_ENABLE(dejitter,
 	AS_HELP_STRING([--enable-dejitter],
Index: tslib-1.0/etc/ts.conf
===================================================================
--- tslib-1.0.orig/etc/ts.conf
+++ tslib-1.0/etc/ts.conf
@@ -18,6 +18,9 @@
 
 # Uncomment if you're using an IBM Arctic II
 # module_raw arctic2
+#
+# If your panel is giving spiky signal applying median filter might help.
+# module median depth=5
 
 module pthres pmin=1
 module variance delta=30
Index: tslib-1.0/plugins/Makefile.am
===================================================================
--- tslib-1.0.orig/plugins/Makefile.am
+++ tslib-1.0/plugins/Makefile.am
@@ -109,6 +109,12 @@ else
 TOUCHKIT_MODULE =
 endif
 
+if ENABLE_MEDIAN_MODULE
+MEDIAN_MODULE = median.la
+else
+MEDIAN_MODULE =
+endif
+
 if ENABLE_H2200_LINEAR_MODULE
 H2200_LINEAR_MODULE = linear_h2200.la
 else
@@ -127,6 +133,7 @@ pluginexec_LTLIBRARIES = \
 	$(H3600_MODULE) \
 	$(MK712_MODULE) \
 	$(ARCTIC2_MODULE) \
+	$(MEDIAN_MODULE) \
 	$(DMC_MODULE) \
 	$(H2200_LINEAR_MODULE) \
 	$(INPUT_MODULE) \
@@ -146,6 +153,10 @@ lowpass_la_SOURCES	= lowpass.c
 lowpass_la_LDFLAGS	= -module $(LTVSN)
 lowpass_la_LIBADD	= $(top_builddir)/src/libts.la
 
+median_la_SOURCES	= median.c
+median_la_LDFLAGS	= -module $(LTVSN)
+median_la_LIBADD	= $(top_builddir)/src/libts.la
+
 pthres_la_SOURCES	= pthres.c
 pthres_la_LDFLAGS	= -module $(LTVSN)
 
Index: tslib-1.0/plugins/median.c
===================================================================
--- /dev/null
+++ tslib-1.0/plugins/median.c
@@ -0,0 +1,231 @@
+/*
+ *  tslib/plugins/median.c
+ *
+ *  Copyright (C) 2009 Marel ehf
+ *  Author Kári Davíðsson <karidav <at> marel.com>
+ *
+ * This file is placed under the LGPL.  Please see the file
+ * COPYING for more details.
+ *
+ * $Id: tslib_add_median_filter.patch 1464 2012-06-01 13:49:32Z tim.jaacks $
+ *
+ * Media filter incomming data
+ */
+
+#include <errno.h>
+#include <stdio.h>
+#include <limits.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "config.h"
+#include "tslib.h"
+#include "tslib-filter.h"
+
+#define PREPARESAMPLE( array, context, member ) { int count = context->size; while( count-- ) { array[count] = context->delay[count].member; } }
+//#define DEBUG 1
+
+struct median_context {
+	struct tslib_module_info module;
+    int size;
+    struct ts_sample * delay;
+    int withsamples;
+};
+
+static inline void clear_queue(struct ts_sample * delay, unsigned int size)
+{
+	int i;
+	struct ts_sample max = {
+		.x = INT_MAX,
+		.y = INT_MAX,
+		.pressure = UINT_MAX
+	};
+
+	memset(delay, 0, sizeof(struct ts_sample) * size);
+
+	for (i=0; i<size; i+=2)
+	{
+		delay[i] = max;
+	}
+}
+
+static int comp_int(const void * n1, const void * n2)
+{
+    int * i1 = (int *) n1;
+    int * i2 = (int *) n2;
+
+    return  *i1 < *i2 ? -1 : 1;
+}
+
+static int comp_uint(const void * n1, const void * n2)
+{
+    unsigned int * i1 = (unsigned int *) n1;
+    unsigned int * i2 = (unsigned int *) n2;
+
+    return  *i1 < *i2 ? -1 : 1;
+}
+
+static void printsamples( char * prefix,  int * samples, size_t count )
+{
+#ifdef DEBUG
+    size_t j;
+
+    printf("%s Using %d samples ", prefix, count);
+    for( j = 0; j < count; j++)
+    {
+        printf(" %d", samples[j]);
+    }
+    printf("\n");
+#endif
+}
+
+static void printsample( char * prefix, struct ts_sample * s )
+{
+#ifdef DEBUG
+    printf( "%s using Point at (%d,%d) with pressure %u\n", prefix, s->x, s->y, s->pressure);
+#endif
+}
+
+static int median_read(struct tslib_module_info *inf, struct ts_sample *samp, int nr)
+{
+	struct median_context *c = (struct median_context *)inf;
+    struct ts_sample * s = samp;
+    int ret;
+
+	ret = inf->next->ops->read(inf->next, samp, nr);
+    if( ret > 0 ) {
+        int i;
+
+		for (i = 0; i < ret; i++) {
+            int sorted[c->size];
+            unsigned int usorted[c->size];
+            unsigned int cpress;
+
+            cpress = s->pressure;
+
+            memmove( &c->delay[0], &c->delay[1], (c->size - 1) * sizeof( c->delay[0] ) );
+            c->delay[c->size -1] = *s;
+
+            PREPARESAMPLE( sorted, c, x );
+            printsamples( "X Before", sorted, c->size );
+            qsort( &sorted[0], c->size, sizeof( sorted[0] ), comp_int);
+            s->x = sorted[c->size / 2];
+            printsamples( "X After", sorted, c->size );
+
+            PREPARESAMPLE( sorted, c, y );
+            printsamples( "Y Before", sorted, c->size );
+            qsort( &sorted[0], c->size, sizeof( sorted[0] ), comp_int);
+            s->y = sorted[c->size / 2];
+            printsamples( "Y After", sorted, c->size );
+
+            PREPARESAMPLE( usorted, c, pressure );
+            printsamples( "Pressure Before", usorted, c->size );
+            qsort( &usorted[0], c->size, sizeof( usorted[0] ), comp_uint);
+            s->pressure = usorted[ c->size / 2];
+            printsamples( "Pressure After", usorted, c->size );
+
+            printsample( "", s );
+
+            if( (cpress == 0)  && (c->withsamples != 0) )
+            { /* We have penup */
+                /* Flush the line we now must wait for c->size / 2 samples untill we get valid data again */
+                clear_queue( c->delay, c->size );
+                c->withsamples = 0;
+#ifdef DEBUG
+                printf("Pen Up\n");
+#endif
+                s->pressure = cpress;
+				s++;
+            }
+            else
+			{
+#ifdef DEBUG
+				if( (cpress != 0) && (c->withsamples == 0) )
+				{ /* We have pen down */
+					printf("Pen Down\n");
+				}
+#endif
+                c->withsamples++;
+			}
+
+			if ((c->withsamples >= c->size) ||
+				((c->withsamples > c->size/2) && (c->withsamples%2 == c->size%2)))
+				s++;
+        }
+    }
+
+	return (s-samp);
+}
+
+static int median_fini(struct tslib_module_info *inf)
+{
+    struct median_context * c = ( struct median_context *) inf;
+
+    free( c->delay );
+	free(inf);
+
+	return 0;
+}
+
+static const struct tslib_ops __ts_input_ops = {
+	.read	= median_read,
+	.fini	= median_fini,
+};
+
+static int median_depth(struct tslib_module_info *inf, char *str, void *data __attribute__(( unused )) )
+{
+	struct median_context *m = (struct median_context *)inf;
+	unsigned long v;
+	int err = errno;
+
+	v = strtoul(str, NULL, 0);
+
+	if (v == ULONG_MAX && errno == ERANGE)
+		return -1;
+
+	errno = err;
+    m->delay = malloc( sizeof( struct ts_sample ) * v );
+    m->size = v;
+    clear_queue( m->delay, m->size );
+
+	return 0;
+}
+
+static const struct tslib_vars raw_vars[] =
+{
+	{ "depth", (void *)1, median_depth },
+};
+
+#define NR_VARS (sizeof(raw_vars) / sizeof(raw_vars[0]))
+
+TSAPI struct tslib_module_info *mod_init(struct tsdev *dev __attribute__((unused)), const char *params)
+{
+	struct median_context *c;
+
+	c = malloc(sizeof(struct median_context));
+	if (c == NULL)
+		return NULL;
+
+    memset( c, 0, sizeof( struct median_context ) );
+
+	c->module.ops = &__ts_input_ops;
+
+	if (tslib_parse_vars(&c->module, raw_vars, NR_VARS, params)) {
+		free(c);
+		return NULL;
+	}
+
+    if( c->delay == NULL )
+    {
+        c->delay = malloc( sizeof( struct ts_sample ) * 3 );
+        c->size = 3;
+        clear_queue( c->delay, c->size );
+        printf("Using default size of 3\n");
+    }
+
+	return &(c->module);
+}
+
+#ifndef TSLIB_STATIC_MEDIAN_MODULE
+	TSLIB_MODULE_INIT(mod_init);
+#endif
