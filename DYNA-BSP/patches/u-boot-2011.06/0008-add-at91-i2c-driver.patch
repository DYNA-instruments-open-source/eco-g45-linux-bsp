Index: u-boot-2011.06/drivers/i2c/Makefile
===================================================================
--- u-boot-2011.06.orig/drivers/i2c/Makefile
+++ u-boot-2011.06/drivers/i2c/Makefile
@@ -25,6 +25,7 @@ include $(TOPDIR)/config.mk
 
 LIB	:= $(obj)libi2c.o
 
+COBJS-$(CONFIG_I2C_ATMEL) += atmel_i2c.o
 COBJS-$(CONFIG_BFIN_TWI_I2C) += bfin-twi_i2c.o
 COBJS-$(CONFIG_DRIVER_DAVINCI_I2C) += davinci_i2c.o
 COBJS-$(CONFIG_FSL_I2C) += fsl_i2c.o
Index: u-boot-2011.06/drivers/i2c/atmel_i2c.c
===================================================================
--- /dev/null
+++ u-boot-2011.06/drivers/i2c/atmel_i2c.c
@@ -0,0 +1,228 @@
+/*
+ *  i2c Support for Atmel's AT91RM9200 Two-Wire Interface
+ *
+ *  (c) Rick Bronson
+ *
+ *  Borrowed heavily from original work by:
+ *  Copyright (c) 2000 Philip Edelbrock <phil at stimpy.netroedge.com>
+ *
+ *  Modified to work with u-boot by (C) 2004 Gary Jennejohn garyj at denx.de
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+*/
+#include <common.h>
+
+#if defined(CONFIG_I2C_ATMEL)
+
+#include <i2c.h>
+#include <asm/io.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/at91_twi.h>
+#include <asm/arch/clk.h>
+
+#define TWI_CLOCK		400000		/* Hz. max 400 Kbits/sec */
+
+#define at91_twi_read(reg)		__raw_readl(ATMEL_BASE_TWI0 + (reg))
+#define at91_twi_write(reg, val)	__raw_writel((val), ATMEL_BASE_TWI0 + (reg))
+/* define DEBUG */
+
+/*
+ * Poll the i2c status register until the specified bit is set.
+ * Returns 0 if timed out (100 msec)
+ */
+static short at91_poll_status(unsigned long bit)
+{
+	int loop_cntr = 10000;
+
+	do {
+		udelay(10);
+	} while (!(at91_twi_read(AT91_TWI_SR) & bit) && (--loop_cntr > 0));
+
+	return (loop_cntr > 0);
+}
+
+static int xfer_read(unsigned char *buf, int length)
+{
+	/* Send Start */
+	at91_twi_write(AT91_TWI_CR, AT91_TWI_START);
+
+	/* Read data */
+	while (length--) {
+		if (!length)	/* need to send Stop before reading last byte */
+			at91_twi_write(AT91_TWI_CR, AT91_TWI_STOP);
+		if (!at91_poll_status(AT91_TWI_RXRDY)) {
+			debug("at91_i2c: RXRDY timeout\n");
+			return 1;
+		}
+		*buf++ = (at91_twi_read(AT91_TWI_RHR) & 0xff);
+	}
+
+	return 0;
+}
+
+static int xfer_write(unsigned char *buf, int length)
+{
+	/* Load first byte into transmitter */
+	at91_twi_write(AT91_TWI_THR, *buf++);
+
+	/* Send Start */
+	at91_twi_write(AT91_TWI_CR, AT91_TWI_START);
+
+	do {
+		if (!at91_poll_status(AT91_TWI_TXRDY)) {
+			debug ("at91_i2c: TXRDY timeout\n");
+			return 1;
+		}
+
+		length--;	/* byte was transmitted */
+
+		if (length > 0)		/* more data to send? */
+			at91_twi_write(AT91_TWI_THR, *buf++);
+	} while (length);
+
+	/* Send Stop */
+	at91_twi_write(AT91_TWI_CR, AT91_TWI_STOP);
+
+	return 0;
+}
+
+/*
+ * Generic i2c master transfer entrypoint
+ *
+ * rw == 1 means that this is a read
+ */
+static int at91_xfer(unsigned char chip, unsigned int addr, int alen,
+		     unsigned char *buffer, int len, int rw)
+{
+	int length;
+	int ret = -1;
+	unsigned char *buf;
+
+	/* Set the TWI Master Mode Register */
+	at91_twi_write(AT91_TWI_MMR, (chip << 16) | (alen << 8)
+				    | ((rw == 1) ? AT91_TWI_MREAD : 0));
+
+	/* Set TWI Internal Address Register with first messages data field */
+	if (alen > 0)
+		at91_twi_write(AT91_TWI_IADR, addr);
+
+	length = len;
+	buf = buffer;
+	if (length && buf) {	/* sanity check */
+		if (rw)
+			ret = xfer_read(buf, len);
+		else
+			ret = xfer_write(buf, len);
+	}
+
+	return ret;
+}
+
+int
+i2c_probe(unsigned char chip)
+{
+	unsigned char buffer[1];
+
+	return at91_xfer(chip, 0, 0, buffer, 1, 1);
+}
+
+int
+i2c_read (unsigned char chip, unsigned int addr, int alen,
+	  unsigned char *buffer, int len)
+{
+#ifdef CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW
+	/* we only allow one address byte */
+	if (alen > 1)
+		return 1;
+	/* XXX assume an ATMEL AT24C16 */
+	if (alen == 1) {
+		addr = addr & 0xff;
+	}
+#endif
+	return at91_xfer(chip, addr, alen, buffer, len, 1);
+}
+
+int
+i2c_write(unsigned char chip, unsigned int addr, int alen,
+	  unsigned char *buffer, int len)
+{
+#ifdef CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW
+	int i;
+	unsigned char *buf;
+
+	/* we only allow one address byte */
+	if (alen > 1)
+		return 1;
+	/* XXX assume an ATMEL AT24C16 */
+	if (alen == 1) {
+		buf = buffer;
+		/* do single byte writes */
+		for (i = 0; i < len; i++) {
+			addr = addr & 0xff;
+			if (at91_xfer(chip, addr, alen, buf++, 1, 0))
+				return 1;
+			addr++;
+		}
+		return 0;
+	}
+#endif
+	return at91_xfer(chip, addr, alen, buffer, len, 0);
+}
+
+/*
+ * Main initialization routine
+ */
+void i2c_init(int speed, int slaveaddr)
+{
+	unsigned long cdiv, ckdiv;
+
+	at91_twi_write(AT91_TWI_IDR, 0xffffffff);	/* Disable all interrupts */
+	at91_twi_write(AT91_TWI_CR, AT91_TWI_SWRST);	/* Reset peripheral */
+	at91_twi_write(AT91_TWI_CR, AT91_TWI_MSEN);	/* Set Master mode */
+
+	/* Calcuate clock dividers */
+	cdiv = (get_twi_clk_rate(0) / (2 * TWI_CLOCK)) - 3;
+	cdiv = cdiv + 1;	/* round up */
+	ckdiv = 0;
+	while (cdiv > 255) {
+		ckdiv++;
+		cdiv = cdiv >> 1;
+	}
+
+#ifdef CONFIG_AT91RM9200
+	if (ckdiv > 5) {
+		printf("AT91 I2C: Invalid TWI_CLOCK value!\n");
+		ckdiv = 5;
+	}
+#endif
+
+	at91_twi_write(AT91_TWI_CWGR, (ckdiv << 16) | (cdiv << 8) | cdiv);
+
+	debug ("Found AT91 i2c\n");
+	return;
+}
+
+int i2c_set_bus_speed(unsigned int speed)
+{
+	return -1;
+}
+
+unsigned int i2c_get_bus_speed(void)
+{
+	return CONFIG_SYS_I2C_SPEED;
+}
+
+#endif /* CONFIG_HARD_I2C */
Index: u-boot-2011.06/arch/arm/include/asm/arch-at91/at91_common.h
===================================================================
--- u-boot-2011.06.orig/arch/arm/include/asm/arch-at91/at91_common.h
+++ u-boot-2011.06/arch/arm/include/asm/arch-at91/at91_common.h
@@ -34,6 +34,8 @@ void at91_serial2_hw_init(void);
 void at91_seriald_hw_init(void);
 void at91_spi0_hw_init(unsigned long cs_mask);
 void at91_spi1_hw_init(unsigned long cs_mask);
+void at91_twi0_hw_init(void);
+void at91_twi1_hw_init(void);
 void at91_uhp_hw_init(void);
 
 #endif /* AT91_COMMON_H */
Index: u-boot-2011.06/arch/arm/include/asm/arch-at91/at91_twi.h
===================================================================
--- /dev/null
+++ u-boot-2011.06/arch/arm/include/asm/arch-at91/at91_twi.h
@@ -0,0 +1,67 @@
+/*
+ * arch/arm/mach-at91/include/mach/at91_twi.h
+ *
+ * Copyright (C) 2005 Ivan Kokshaysky
+ * Copyright (C) SAN People
+ *
+ * Two-wire Interface (TWI) registers.
+ * Based on AT91RM9200 datasheet revision E.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef AT91_TWI_H
+#define AT91_TWI_H
+
+#define	AT91_TWI_CR		0x00		/* Control Register */
+#define	AT91_TWI_START		(1 <<  0)	/* Send a Start Condition */
+#define	AT91_TWI_STOP		(1 <<  1)	/* Send a Stop Condition */
+#define	AT91_TWI_MSEN		(1 <<  2)	/* Master Transfer Enable */
+#define	AT91_TWI_MSDIS		(1 <<  3)	/* Master Transfer Disable */
+#define	AT91_TWI_SVEN		(1 <<  4)	/* Slave Transfer Enable [SAM9260 only] */
+#define	AT91_TWI_SVDIS		(1 <<  5)	/* Slave Transfer Disable [SAM9260 only] */
+#define	AT91_TWI_SWRST		(1 <<  7)	/* Software Reset */
+
+#define	AT91_TWI_MMR		0x04		/* Master Mode Register */
+#define	AT91_TWI_IADRSZ		(3    <<  8)	/* Internal Device Address Size */
+#define	AT91_TWI_IADRSZ_NO	(0 << 8)
+#define	AT91_TWI_IADRSZ_1	(1 << 8)
+#define	AT91_TWI_IADRSZ_2	(2 << 8)
+#define	AT91_TWI_IADRSZ_3	(3 << 8)
+#define	AT91_TWI_MREAD		(1    << 12)	/* Master Read Direction */
+#define	AT91_TWI_DADR		(0x7f << 16)	/* Device Address */
+
+#define	AT91_TWI_SMR		0x08		/* Slave Mode Register [SAM9260 only] */
+#define	AT91_TWI_SADR		(0x7f << 16)	/* Slave Address */
+
+#define	AT91_TWI_IADR		0x0c		/* Internal Address Register */
+
+#define	AT91_TWI_CWGR		0x10		/* Clock Waveform Generator Register */
+#define	AT91_TWI_CLDIV		(0xff <<  0)	/* Clock Low Divisor */
+#define	AT91_TWI_CHDIV		(0xff <<  8)	/* Clock High Divisor */
+#define	AT91_TWI_CKDIV		(7    << 16)	/* Clock Divider */
+
+#define	AT91_TWI_SR		0x20		/* Status Register */
+#define	AT91_TWI_TXCOMP		(1 <<  0)	/* Transmission Complete */
+#define	AT91_TWI_RXRDY		(1 <<  1)	/* Receive Holding Register Ready */
+#define	AT91_TWI_TXRDY		(1 <<  2)	/* Transmit Holding Register Ready */
+#define	AT91_TWI_SVREAD		(1 <<  3)	/* Slave Read [SAM9260 only] */
+#define	AT91_TWI_SVACC		(1 <<  4)	/* Slave Access [SAM9260 only] */
+#define	AT91_TWI_GACC		(1 <<  5)	/* General Call Access [SAM9260 only] */
+#define	AT91_TWI_OVRE		(1 <<  6)	/* Overrun Error [AT91RM9200 only] */
+#define	AT91_TWI_UNRE		(1 <<  7)	/* Underrun Error [AT91RM9200 only] */
+#define	AT91_TWI_NACK		(1 <<  8)	/* Not Acknowledged */
+#define	AT91_TWI_ARBLST		(1 <<  9)	/* Arbitration Lost [SAM9260 only] */
+#define	AT91_TWI_SCLWS		(1 << 10)	/* Clock Wait State [SAM9260 only] */
+#define	AT91_TWI_EOSACC		(1 << 11)	/* End of Slave Address [SAM9260 only] */
+
+#define	AT91_TWI_IER		0x24		/* Interrupt Enable Register */
+#define	AT91_TWI_IDR		0x28		/* Interrupt Disable Register */
+#define	AT91_TWI_IMR		0x2c		/* Interrupt Mask Register */
+#define	AT91_TWI_RHR		0x30		/* Receive Holding Register */
+#define	AT91_TWI_THR		0x34		/* Transmit Holding Register */
+
+#endif
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91cap9_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91cap9_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91cap9_devices.c
@@ -160,7 +160,22 @@ void at91_spi1_hw_init(unsigned long cs_
 	if (cs_mask & (1 << 7)) {
 		at91_set_pio_output(AT91_PIO_PORTB, 18, 1);
 	}
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+#endif
+
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_b_periph(AT91_PIO_PORTB, 4, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 4, 1);
+	at91_set_b_periph(AT91_PIO_PORTB, 5, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 5, 1);
 
+	at91_sys_write(AT91_PMC_PCER, 1 << ATMEL_ID_TWI);
 }
 #endif
 
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9260_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91sam9260_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9260_devices.c
@@ -155,6 +155,22 @@ void at91_spi1_hw_init(unsigned long cs_
 }
 #endif
 
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTA, 23, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 23, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTA, 24, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 24, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+#endif
+
 #ifdef CONFIG_MACB
 void at91_macb_hw_init(void)
 {
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9261_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91sam9261_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9261_devices.c
@@ -154,3 +154,19 @@ void at91_spi1_hw_init(unsigned long cs_
 	}
 }
 #endif
+
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTA, 7, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 7, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTA, 8, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 8, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+#endif
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9263_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91sam9263_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9263_devices.c
@@ -159,6 +159,22 @@ void at91_spi1_hw_init(unsigned long cs_
 }
 #endif
 
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTB, 4, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 4, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTB, 5, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 5, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+#endif
+
 #ifdef CONFIG_MACB
 void at91_macb_hw_init(void)
 {
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9m10g45_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91sam9m10g45_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9m10g45_devices.c
@@ -181,3 +181,33 @@ void at91_macb_hw_init(void)
 #endif
 }
 #endif
+
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTA, 20, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 20, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTA, 21, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 21, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+
+void at91_twi1_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTB, 10, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 10, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTB, 11, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTB, 11, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI1, &pmc->pcer);
+}
+#endif
Index: u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9rl_devices.c
===================================================================
--- u-boot-2011.06.orig/arch/arm/cpu/arm926ejs/at91/at91sam9rl_devices.c
+++ u-boot-2011.06/arch/arm/cpu/arm926ejs/at91/at91sam9rl_devices.c
@@ -117,3 +117,33 @@ void at91_spi0_hw_init(unsigned long cs_
 	}
 }
 #endif
+
+#ifdef CONFIG_I2C_ATMEL
+void at91_twi0_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTA, 23, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 23, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTA, 24, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTA, 24, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI0, &pmc->pcer);
+}
+
+void at91_twi1_hw_init(void)
+{
+	at91_pmc_t	*pmc	= (at91_pmc_t *) ATMEL_BASE_PMC;
+
+	at91_set_a_periph(AT91_PIO_PORTD, 10, 0);	/* TWD */
+	at91_set_pio_multi_drive(AT91_PIO_PORTD, 10, 1);
+
+	at91_set_a_periph(AT91_PIO_PORTD, 11, 0);	/* TWCK */
+	at91_set_pio_multi_drive(AT91_PIO_PORTD, 11, 1);
+
+	/* Enable clock */
+	writel(1 << ATMEL_ID_TWI1, &pmc->pcer);
+}
+#endif
